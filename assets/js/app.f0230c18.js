(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var o,r,s=n[0],l=n[1],c=n[2],u=0,p=[];u<s.length;u++)r=s[u],Object.prototype.hasOwnProperty.call(i,r)&&i[r]&&p.push(i[r][0]),i[r]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(d&&d(n);p.length;)p.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var e,n=0;n<a.length;n++){for(var t=a[n],o=!0,s=1;s<t.length;s++){var l=t[s];0!==i[l]&&(o=!1)}o&&(a.splice(n--,1),e=r(r.s=t[0]))}return e}var o={},i={1:0},a=[];function r(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=i[e];if(0!==t)if(t)n.push(t[2]);else{var o=new Promise((function(n,o){t=i[e]=[n,o]}));n.push(t[2]=o);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({}[e]||e)+"."+{2:"945e1dd0",3:"beec7317",4:"7a280ea7",5:"e81ec5d7",6:"508a40a5",7:"286ff97a",8:"493eda02",9:"cd406eca",10:"513ac2f8",11:"37162120",12:"8349d7aa",13:"a4be4e90",14:"32f6774c",15:"c2c916fb",16:"2f61d76e",17:"4bd67c99",18:"dd70af45",19:"39530a69",20:"8a530966",21:"6ca38d25",22:"f56563da",23:"ff74cf46",24:"da115d6c",25:"5e20c1d3",26:"089a10aa",27:"ddcb48c8",28:"31993abc",29:"c90f497d",30:"97677c34",31:"459230b0",32:"5e0fb1cf",33:"9a2af346",34:"32eecf36",35:"9922b7f7",36:"4f0e7d22",37:"1456ee5f",38:"f4791865",39:"f9e22873",40:"ad0ca6b1",41:"f95d77ec",42:"f59a8b79",43:"4207eb95",44:"823a4841",45:"cac17683",46:"915db60b",47:"977be496",48:"053ae283",49:"e444123e",50:"412951a5",51:"e7212733",52:"214b609c",53:"17c78b6a",54:"c3d89f2e",55:"7879bf72",56:"4a7f6494",57:"b537aeaa",58:"4142853f",59:"4fca1498",60:"a2534cbe",61:"c015f139",62:"cd494cdb",63:"96b692ed",64:"ef64b568",65:"e0ac793c"}[e]+".js"}(e);var l=new Error;a=function(n){s.onerror=s.onload=null,clearTimeout(c);var t=i[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,t[1](l)}i[e]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=o,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/OpenCore-Install-Guide/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var d=l;a.push([100,0]),t()}([function(e,n,t){var o=t(53),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){var o=t(27),i=Function.prototype,a=i.call,r=o&&i.bind.bind(a,a);e.exports=o?r:function(e){return function(){return a.apply(e,arguments)}}},function(e,n,t){var o=t(2);e.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var o=t(67),i="object"==typeof self&&self&&self.Object===Object&&self,a=o||i||Function("return this")();e.exports=a},function(e,n,t){var o=t(3),i=t(30),a=o({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return a(i(e),n)}},function(e,n,t){var o=t(0),i=t(53),a=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:o(e)||e===a}:function(e){return"object"==typeof e?null!==e:o(e)}},function(e,n,t){var o=t(159),i=t(162);e.exports=function(e,n){var t=i(e,n);return o(t)?t:void 0}},function(e,n,t){"use strict";function o(e,n,t,o,i,a,r,s){var l,c="function"==typeof e?e.options:e;if(n&&(c.render=n,c.staticRenderFns=t,c._compiled=!0),o&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},c._ssrRegister=l):i&&(l=s?function(){i.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(e,n){return l.call(n),d(e,n)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:c}}t.d(n,"a",(function(){return o}))},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var o=t(13),i=t(144),a=t(145),r=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?i(e):a(e)}},function(e,n,t){var o=t(6).Symbol;e.exports=o},function(e,n,t){var o=t(4),i=t(62),a=t(96),r=t(25),s=t(52),l=TypeError,c=Object.defineProperty,d=Object.getOwnPropertyDescriptor;n.f=o?a?function(e,n,t){if(r(e),n=s(n),r(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var o=d(e,n);o&&o.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return c(e,n,t)}:c:function(e,n,t){if(r(e),n=s(n),r(t),i)try{return c(e,n,t)}catch(e){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var o=t(3),i=o({}.toString),a=o("".slice);e.exports=function(e){return a(i(e),8,-1)}},function(e,n,t){var o=t(1),i=t(0),a=function(e){return i(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?a(o[e]):o[e]&&o[e][n]}},function(e,n,t){var o=t(4),i=t(14),a=t(33);e.exports=o?function(e,n,t){return i.f(e,n,a(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(149),i=t(150),a=t(151),r=t(152),s=t(153);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(69);e.exports=function(e,n){for(var t=e.length;t--;)if(o(e[t][0],n))return t;return-1}},function(e,n,t){var o=t(9)(Object,"create");e.exports=o},function(e,n,t){var o=t(171);e.exports=function(e,n){var t=e.__data__;return o(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var o=t(43);e.exports=function(e){if("string"==typeof e||o(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,a=/^0o[0-7]+$/i,r=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,m=function(){return c.Date.now()};function h(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function f(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(h(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=h(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=i.test(e);return s||a.test(e)?r(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,n,t){var o,i,a,r,s,l,c=0,d=!1,g=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function v(n){var t=o,a=i;return o=i=void 0,c=n,r=e.apply(a,t)}function y(e){return c=e,s=setTimeout(w,n),d?v(e):r}function k(e){var t=e-l;return void 0===l||t>=n||t<0||g&&e-c>=a}function w(){var e=m();if(k(e))return S(e);s=setTimeout(w,function(e){var t=n-(e-l);return g?p(t,a-(e-c)):t}(e))}function S(e){return s=void 0,b&&o?v(e):(o=i=void 0,r)}function x(){var e=m(),t=k(e);if(o=arguments,i=this,l=e,t){if(void 0===s)return y(l);if(g)return s=setTimeout(w,n),v(l)}return void 0===s&&(s=setTimeout(w,n)),r}return n=f(n)||0,h(t)&&(d=!!t.leading,a=(g="maxWait"in t)?u(f(t.maxWait)||0,n):a,b="trailing"in t?!!t.trailing:b),x.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=i=s=void 0},x.flush=function(){return void 0===s?r:S(m())},x}},function(e,n,t){var o,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(o=function(){var e,n,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,n,t){return e<n?n:e>t?t:e}function a(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(o[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=i(e,o.minimum,1),t.status=1===e?null:e;var l=t.render(!n),c=l.querySelector(o.barSelector),d=o.speed,u=o.easing;return l.offsetWidth,r((function(n){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(c,function(e,n,t){var i;return(i="translate3d"===o.positionUsing?{transform:"translate3d("+a(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(e)+"%,0)"}:{"margin-left":a(e)+"%"}).transition="all "+n+"ms "+t,i}(e,d,u)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),d)}),d)):setTimeout(n,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*i(Math.random()*n,.1,.95)),n=i(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},e=0,n=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===n&&t.start(),e++,n++,o.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=o.template;var i,r=n.querySelector(o.barSelector),l=e?"-100":a(t.status||0),d=document.querySelector(o.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(i=n.querySelector(o.spinnerSelector))&&p(i),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(n),n},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var o,i=e.length,a=n.charAt(0).toUpperCase()+n.slice(1);i--;)if((o=e[i]+a)in t)return o;return n}(t))}function o(e,n,o){n=t(n),e.style[n]=o}return function(e,n){var t,i,a=arguments;if(2==a.length)for(t in n)void 0!==(i=n[t])&&n.hasOwnProperty(t)&&o(e,t,i);else o(e,a[1],a[2])}}();function l(e,n){return("string"==typeof e?e:u(e)).indexOf(" "+n+" ")>=0}function c(e,n){var t=u(e),o=t+n;l(t,n)||(e.className=o.substring(1))}function d(e,n){var t,o=u(e);l(e,n)&&(t=o.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?o.call(n,t,n,e):o)||(e.exports=i)},function(e,n,t){var o=t(8),i=String,a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not an object")}},function(e,n,t){var o=t(1),i=t(49).f,a=t(17),r=t(108),s=t(35),l=t(63),c=t(121);e.exports=function(e,n){var t,d,u,p,m,h=e.target,f=e.global,g=e.stat;if(t=f?o:g?o[h]||s(h,{}):(o[h]||{}).prototype)for(d in n){if(p=n[d],u=e.dontCallGetSet?(m=i(t,d))&&m.value:t[d],!c(f?d:h+(g?".":"#")+d,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&a(p,"sham",!0),r(t,d,p,e)}}},function(e,n,t){var o=t(2);e.exports=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){var o=t(45),i=t(50);e.exports=function(e){return o(i(e))}},function(e,n,t){var o=t(1),i=t(59),a=t(7),r=t(61),s=t(57),l=t(56),c=i("wks"),d=o.Symbol,u=d&&d.for,p=l?d:d&&d.withoutSetter||r;e.exports=function(e){if(!a(c,e)||!s&&"string"!=typeof c[e]){var n="Symbol."+e;s&&a(d,e)?c[e]=d[e]:c[e]=l&&u?u(n):p(n)}return c[e]}},function(e,n,t){var o=t(50),i=Object;e.exports=function(e){return i(o(e))}},function(e,n,t){var o=t(119);e.exports=function(e){return o(e.length)}},function(e,n,t){var o=t(27),i=Function.prototype.call;e.exports=o?i.bind(i):function(){return i.apply(i,arguments)}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var o=t(1),i=t(35),a=o["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=a},function(e,n,t){var o=t(1),i=Object.defineProperty;e.exports=function(e,n){try{i(o,e,{value:n,configurable:!0,writable:!0})}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(143),i=t(11),a=Object.prototype,r=a.hasOwnProperty,s=a.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return i(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var o=t(9)(t(6),"Map");e.exports=o},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var o=t(163),i=t(170),a=t(172),r=t(173),s=t(174);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var o=t(5),i=t(43),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(o(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!i(e))||(r.test(e)||!a.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==o(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){var o=t(3),i=t(2),a=t(15),r=Object,s=o("".split);e.exports=i((function(){return!r("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?s(e,""):r(e)}:r},function(e,n,t){var o=t(0),i=t(106),a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a function")}},function(e,n){e.exports={}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){var o=t(4),i=t(32),a=t(102),r=t(33),s=t(28),l=t(52),c=t(7),d=t(62),u=Object.getOwnPropertyDescriptor;n.f=o?u:function(e,n){if(e=s(e),n=l(n),d)try{return u(e,n)}catch(e){}if(c(e,n))return r(!i(a.f,e,n),e[n])}},function(e,n,t){var o=t(51),i=TypeError;e.exports=function(e){if(o(e))throw i("Can't call method on "+e);return e}},function(e,n){e.exports=function(e){return null==e}},function(e,n,t){var o=t(103),i=t(54);e.exports=function(e){var n=o(e,"string");return i(n)?n:n+""}},function(e,n){var t="object"==typeof document&&document.all,o=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:o}},function(e,n,t){var o=t(16),i=t(0),a=t(55),r=t(56),s=Object;e.exports=r?function(e){return"symbol"==typeof e}:function(e){var n=o("Symbol");return i(n)&&a(n.prototype,s(e))}},function(e,n,t){var o=t(3);e.exports=o({}.isPrototypeOf)},function(e,n,t){var o=t(57);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var o=t(58),i=t(2);e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(e,n,t){var o,i,a=t(1),r=t(104),s=a.process,l=a.Deno,c=s&&s.versions||l&&l.version,d=c&&c.v8;d&&(i=(o=d.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!i&&r&&(!(o=r.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=r.match(/Chrome\/(\d+)/))&&(i=+o[1]),e.exports=i},function(e,n,t){var o=t(60),i=t(34);(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.27.1",mode:o?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.27.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n){e.exports=!1},function(e,n,t){var o=t(3),i=0,a=Math.random(),r=o(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+r(++i+a,36)}},function(e,n,t){var o=t(4),i=t(2),a=t(95);e.exports=!o&&!i((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var o=t(7),i=t(114),a=t(49),r=t(14);e.exports=function(e,n,t){for(var s=i(n),l=r.f,c=a.f,d=0;d<s.length;d++){var u=s[d];o(e,u)||t&&o(t,u)||l(e,u,c(n,u))}}},function(e,n,t){var o=t(118);e.exports=function(e){var n=+e;return n!=n||0===n?0:o(n)}},function(e,n,t){var o=t(3),i=t(25),a=t(131);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),n=t instanceof Array}catch(e){}return function(t,o){return i(t),a(o),n?e(t,o):t.__proto__=o,t}}():void 0)},function(e,n){e.exports=function(e,n){for(var t=-1,o=n.length,i=e.length;++t<o;)e[i+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var o=t(18),i=t(154),a=t(155),r=t(156),s=t(157),l=t(158);function c(e){var n=this.__data__=new o(e);this.size=n.size}c.prototype.clear=i,c.prototype.delete=a,c.prototype.get=r,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var o=t(12),i=t(38);e.exports=function(e){if(!i(e))return!1;var n=o(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var o=t(175),i=t(11);e.exports=function e(n,t,a,r,s){return n===t||(null==n||null==t||!i(n)&&!i(t)?n!=n&&t!=t:o(n,t,a,r,e,s))}},function(e,n,t){var o=t(74),i=t(178),a=t(75);e.exports=function(e,n,t,r,s,l){var c=1&t,d=e.length,u=n.length;if(d!=u&&!(c&&u>d))return!1;var p=l.get(e),m=l.get(n);if(p&&m)return p==n&&m==e;var h=-1,f=!0,g=2&t?new o:void 0;for(l.set(e,n),l.set(n,e);++h<d;){var b=e[h],v=n[h];if(r)var y=c?r(v,b,h,n,e,l):r(b,v,h,e,n,l);if(void 0!==y){if(y)continue;f=!1;break}if(g){if(!i(n,(function(e,n){if(!a(g,n)&&(b===e||s(b,e,t,r,l)))return g.push(n)}))){f=!1;break}}else if(b!==v&&!s(b,v,t,r,l)){f=!1;break}}return l.delete(e),l.delete(n),f}},function(e,n,t){var o=t(39),i=t(176),a=t(177);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new o;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=i,r.prototype.has=a,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var o=t(188),i=t(194),a=t(80);e.exports=function(e){return a(e)?o(e):i(e)}},function(e,n,t){(function(e){var o=t(6),i=t(190),a=n&&!n.nodeType&&n,r=a&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===a?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;e.exports=l}).call(this,t(48)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==o||"symbol"!=o&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var o=t(191),i=t(192),a=t(193),r=a&&a.isTypedArray,s=r?i(r):o;e.exports=s},function(e,n,t){var o=t(70),i=t(41);e.exports=function(e){return null!=e&&i(e.length)&&!o(e)}},function(e,n,t){var o=t(9)(t(6),"Set");e.exports=o},function(e,n,t){var o=t(38);e.exports=function(e){return e==e&&!o(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var o=t(85),i=t(22);e.exports=function(e,n){for(var t=0,a=(n=o(n,e)).length;null!=e&&t<a;)e=e[i(n[t++])];return t&&t==a?e:void 0}},function(e,n,t){var o=t(5),i=t(42),a=t(205),r=t(208);e.exports=function(e,n){return o(e)?e:i(e,n)?[e]:a(r(e))}},function(e,n,t){},function(e,n,t){"use strict";n.a=["ThemeManager","BackToTop"]},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(141),i=t(146),a=t(217),r=t(225),s=t(234),l=t(99),c=a((function(e){var n=l(e);return s(n)&&(n=void 0),r(o(e,1,s,!0),i(n,2))}));e.exports=c},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;e.exports=function(e){var n,t=""+e,i=o.exec(t);if(!i)return t;var a="",r=0,s=0;for(r=i.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==r&&(a+=t.substring(s,r)),s=r+1,a+=n}return s!==r?a+t.substring(s,r):a}},function(e,n,t){!function(){"use strict";e.exports={polyfill:function(){var e=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var t,o=e.HTMLElement||e.Element,i={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:o.prototype.scroll||s,scrollIntoView:o.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,r=(t=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(t)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?h.call(e,n.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):i.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(l(arguments[0])?i.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):h.call(e,n.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==l(arguments[0])){var e=arguments[0].left,n=arguments[0].top;h.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==l(arguments[0])){var t=p(this),o=t.getBoundingClientRect(),a=this.getBoundingClientRect();t!==n.body?(h.call(this,t,t.scrollLeft+a.left-o.left,t.scrollTop+a.top-o.top),"fixed"!==e.getComputedStyle(t).position&&e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:a.left,top:a.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function s(e,n){this.scrollLeft=e,this.scrollTop=n}function l(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(e,n){return"Y"===n?e.clientHeight+r<e.scrollHeight:"X"===n?e.clientWidth+r<e.scrollWidth:void 0}function d(n,t){var o=e.getComputedStyle(n,null)["overflow"+t];return"auto"===o||"scroll"===o}function u(e){var n=c(e,"Y")&&d(e,"Y"),t=c(e,"X")&&d(e,"X");return n||t}function p(e){for(;e!==n.body&&!1===u(e);)e=e.parentNode||e.host;return e}function m(n){var t,o,i,r,s=(a()-n.startTime)/468;r=s=s>1?1:s,t=.5*(1-Math.cos(Math.PI*r)),o=n.startX+(n.x-n.startX)*t,i=n.startY+(n.y-n.startY)*t,n.method.call(n.scrollable,o,i),o===n.x&&i===n.y||e.requestAnimationFrame(m.bind(e,n))}function h(t,o,r){var l,c,d,u,p=a();t===n.body?(l=e,c=e.scrollX||e.pageXOffset,d=e.scrollY||e.pageYOffset,u=i.scroll):(l=t,c=t.scrollLeft,d=t.scrollTop,u=s),m({scrollable:l,method:u,startTime:p,startX:c,startY:d,x:o,y:r})}}}}()},function(e,n,t){"use strict";var o=t(26),i=t(30),a=t(31),r=t(125),s=t(127),l=t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)})),c=!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}();o({target:"Array",proto:!0,arity:1,forced:l||c},{push:function(e){var n=i(this),t=a(n),o=arguments.length;s(t+o);for(var l=0;l<o;l++)n[t]=arguments[l],t++;return r(n,t),t}})},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){var o=t(1),i=t(8),a=o.document,r=i(a)&&i(a.createElement);e.exports=function(e){return r?a.createElement(e):{}}},function(e,n,t){var o=t(4),i=t(2);e.exports=o&&i((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){var o=t(59),i=t(61),a=o("keys");e.exports=function(e){return a[e]||(a[e]=i(e))}},function(e,n,t){var o=t(3),i=t(7),a=t(28),r=t(116).indexOf,s=t(47),l=o([].push);e.exports=function(e,n){var t,o=a(e),c=0,d=[];for(t in o)!i(s,t)&&i(o,t)&&l(d,t);for(;n.length>c;)i(o,t=n[c++])&&(~r(d,t)||l(d,t));return d}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){e.exports=t(242)},function(e,n,t){"use strict";var o=t(26),i=t(122).left,a=t(123),r=t(58),s=t(124);o({target:"Array",proto:!0,forced:!a("reduce")||!s&&r>79&&r<83},{reduce:function(e){var n=arguments.length;return i(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,a=i&&!o.call({1:2},1);n.f=a?function(e){var n=i(this,e);return!!n&&n.enumerable}:o},function(e,n,t){var o=t(32),i=t(8),a=t(54),r=t(105),s=t(107),l=t(29),c=TypeError,d=l("toPrimitive");e.exports=function(e,n){if(!i(e)||a(e))return e;var t,l=r(e,d);if(l){if(void 0===n&&(n="default"),t=o(l,e,n),!i(t)||a(t))return t;throw c("Can't convert object to primitive value")}return void 0===n&&(n="number"),s(e,n)}},function(e,n,t){var o=t(16);e.exports=o("navigator","userAgent")||""},function(e,n,t){var o=t(46),i=t(51);e.exports=function(e,n){var t=e[n];return i(t)?void 0:o(t)}},function(e,n){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},function(e,n,t){var o=t(32),i=t(0),a=t(8),r=TypeError;e.exports=function(e,n){var t,s;if("string"===n&&i(t=e.toString)&&!a(s=o(t,e)))return s;if(i(t=e.valueOf)&&!a(s=o(t,e)))return s;if("string"!==n&&i(t=e.toString)&&!a(s=o(t,e)))return s;throw r("Can't convert object to primitive value")}},function(e,n,t){var o=t(0),i=t(14),a=t(109),r=t(35);e.exports=function(e,n,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:n;if(o(t)&&a(t,c,s),s.global)l?e[n]=t:r(n,t);else{try{s.unsafe?e[n]&&(l=!0):delete e[n]}catch(e){}l?e[n]=t:i.f(e,n,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,n,t){var o=t(2),i=t(0),a=t(7),r=t(4),s=t(110).CONFIGURABLE,l=t(111),c=t(112),d=c.enforce,u=c.get,p=Object.defineProperty,m=r&&!o((function(){return 8!==p((function(){}),"length",{value:8}).length})),h=String(String).split("String"),f=e.exports=function(e,n,t){"Symbol("===String(n).slice(0,7)&&(n="["+String(n).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(n="get "+n),t&&t.setter&&(n="set "+n),(!a(e,"name")||s&&e.name!==n)&&(r?p(e,"name",{value:n,configurable:!0}):e.name=n),m&&t&&a(t,"arity")&&e.length!==t.arity&&p(e,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?r&&p(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var o=d(e);return a(o,"source")||(o.source=h.join("string"==typeof n?n:"")),e};Function.prototype.toString=f((function(){return i(this)&&u(this).source||l(this)}),"toString")},function(e,n,t){var o=t(4),i=t(7),a=Function.prototype,r=o&&Object.getOwnPropertyDescriptor,s=i(a,"name"),l=s&&"something"===function(){}.name,c=s&&(!o||o&&r(a,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(e,n,t){var o=t(3),i=t(0),a=t(34),r=o(Function.toString);i(a.inspectSource)||(a.inspectSource=function(e){return r(e)}),e.exports=a.inspectSource},function(e,n,t){var o,i,a,r=t(113),s=t(1),l=t(8),c=t(17),d=t(7),u=t(34),p=t(97),m=t(47),h=s.TypeError,f=s.WeakMap;if(r||u.state){var g=u.state||(u.state=new f);g.get=g.get,g.has=g.has,g.set=g.set,o=function(e,n){if(g.has(e))throw h("Object already initialized");return n.facade=e,g.set(e,n),n},i=function(e){return g.get(e)||{}},a=function(e){return g.has(e)}}else{var b=p("state");m[b]=!0,o=function(e,n){if(d(e,b))throw h("Object already initialized");return n.facade=e,c(e,b,n),n},i=function(e){return d(e,b)?e[b]:{}},a=function(e){return d(e,b)}}e.exports={set:o,get:i,has:a,enforce:function(e){return a(e)?i(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=i(n)).type!==e)throw h("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){var o=t(1),i=t(0),a=o.WeakMap;e.exports=i(a)&&/native code/.test(String(a))},function(e,n,t){var o=t(16),i=t(3),a=t(115),r=t(120),s=t(25),l=i([].concat);e.exports=o("Reflect","ownKeys")||function(e){var n=a.f(s(e)),t=r.f;return t?l(n,t(e)):n}},function(e,n,t){var o=t(98),i=t(94).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,i)}},function(e,n,t){var o=t(28),i=t(117),a=t(31),r=function(e){return function(n,t,r){var s,l=o(n),c=a(l),d=i(r,c);if(e&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((e||d in l)&&l[d]===t)return e||d||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){var o=t(64),i=Math.max,a=Math.min;e.exports=function(e,n){var t=o(e);return t<0?i(t+n,0):a(t,n)}},function(e,n){var t=Math.ceil,o=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?o:t)(n)}},function(e,n,t){var o=t(64),i=Math.min;e.exports=function(e){return e>0?i(o(e),9007199254740991):0}},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var o=t(2),i=t(0),a=/#|\.prototype\./,r=function(e,n){var t=l[s(e)];return t==d||t!=c&&(i(n)?o(n):!!n)},s=r.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=r.data={},c=r.NATIVE="N",d=r.POLYFILL="P";e.exports=r},function(e,n,t){var o=t(46),i=t(30),a=t(45),r=t(31),s=TypeError,l=function(e){return function(n,t,l,c){o(t);var d=i(n),u=a(d),p=r(d),m=e?p-1:0,h=e?-1:1;if(l<2)for(;;){if(m in u){c=u[m],m+=h;break}if(m+=h,e?m<0:p<=m)throw s("Reduce of empty array with no initial value")}for(;e?m>=0:p>m;m+=h)m in u&&(c=t(c,u[m],m,d));return c}};e.exports={left:l(!1),right:l(!0)}},function(e,n,t){"use strict";var o=t(2);e.exports=function(e,n){var t=[][e];return!!t&&o((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){var o=t(15),i=t(1);e.exports="process"==o(i.process)},function(e,n,t){"use strict";var o=t(4),i=t(126),a=TypeError,r=Object.getOwnPropertyDescriptor,s=o&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,n){if(i(e)&&!r(e,"length").writable)throw a("Cannot set read only .length");return e.length=n}:function(e,n){return e.length=n}},function(e,n,t){var o=t(15);e.exports=Array.isArray||function(e){return"Array"==o(e)}},function(e,n){var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},function(e,n,t){var o=t(26),i=t(1),a=t(129),r=t(130),s=i.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(e,n){var t={};t[e]=r(e,n,l),o({global:!0,constructor:!0,arity:1,forced:l},t)},d=function(e,n){if(s&&s[e]){var t={};t[e]=r("WebAssembly."+e,n,l),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(e){return function(n){return a(e,this,arguments)}})),c("EvalError",(function(e){return function(n){return a(e,this,arguments)}})),c("RangeError",(function(e){return function(n){return a(e,this,arguments)}})),c("ReferenceError",(function(e){return function(n){return a(e,this,arguments)}})),c("SyntaxError",(function(e){return function(n){return a(e,this,arguments)}})),c("TypeError",(function(e){return function(n){return a(e,this,arguments)}})),c("URIError",(function(e){return function(n){return a(e,this,arguments)}})),d("CompileError",(function(e){return function(n){return a(e,this,arguments)}})),d("LinkError",(function(e){return function(n){return a(e,this,arguments)}})),d("RuntimeError",(function(e){return function(n){return a(e,this,arguments)}}))},function(e,n,t){var o=t(27),i=Function.prototype,a=i.apply,r=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(o?r.bind(a):function(){return r.apply(a,arguments)})},function(e,n,t){"use strict";var o=t(16),i=t(7),a=t(17),r=t(55),s=t(65),l=t(63),c=t(132),d=t(133),u=t(134),p=t(138),m=t(139),h=t(140),f=t(4),g=t(60);e.exports=function(e,n,t,b){var v=b?2:1,y=e.split("."),k=y[y.length-1],w=o.apply(null,y);if(w){var S=w.prototype;if(!g&&i(S,"cause")&&delete S.cause,!t)return w;var x=o("Error"),I=n((function(e,n){var t=u(b?n:e,void 0),o=b?new w(e):new w;return void 0!==t&&a(o,"message",t),h&&a(o,"stack",m(o.stack,2)),this&&r(S,this)&&d(o,this,I),arguments.length>v&&p(o,arguments[v]),o}));if(I.prototype=S,"Error"!==k?s?s(I,x):l(I,x,{name:!0}):f&&"stackTraceLimit"in w&&(c(I,w,"stackTraceLimit"),c(I,w,"prepareStackTrace")),l(I,w),!g)try{S.name!==k&&a(S,"name",k),S.constructor=I}catch(e){}return I}}},function(e,n,t){var o=t(0),i=String,a=TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},function(e,n,t){var o=t(14).f;e.exports=function(e,n,t){t in e||o(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){var o=t(0),i=t(8),a=t(65);e.exports=function(e,n,t){var r,s;return a&&o(r=n.constructor)&&r!==t&&i(s=r.prototype)&&s!==t.prototype&&a(e,s),e}},function(e,n,t){var o=t(135);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:o(e)}},function(e,n,t){var o=t(136),i=String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},function(e,n,t){var o=t(137),i=t(0),a=t(15),r=t(29)("toStringTag"),s=Object,l="Arguments"==a(function(){return arguments}());e.exports=o?a:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=s(e),r))?t:l?a(n):"Object"==(o=a(n))&&i(n.callee)?"Arguments":o}},function(e,n,t){var o={};o[t(29)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){var o=t(8),i=t(17);e.exports=function(e,n){o(n)&&"cause"in n&&i(e,"cause",n.cause)}},function(e,n,t){var o=t(3),i=Error,a=o("".replace),r=String(i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(r);e.exports=function(e,n){if(l&&"string"==typeof e&&!i.prepareStackTrace)for(;n--;)e=a(e,s,"");return e}},function(e,n,t){var o=t(2),i=t(33);e.exports=!o((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",i(1,7)),7!==e.stack)}))},function(e,n,t){var o=t(66),i=t(142);e.exports=function e(n,t,a,r,s){var l=-1,c=n.length;for(a||(a=i),s||(s=[]);++l<c;){var d=n[l];t>0&&a(d)?t>1?e(d,t-1,a,r,s):o(s,d):r||(s[s.length]=d)}return s}},function(e,n,t){var o=t(13),i=t(36),a=t(5),r=o?o.isConcatSpreadable:void 0;e.exports=function(e){return a(e)||i(e)||!!(r&&e&&e[r])}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return i(e)&&"[object Arguments]"==o(e)}},function(e,n,t){var o=t(13),i=Object.prototype,a=i.hasOwnProperty,r=i.toString,s=o?o.toStringTag:void 0;e.exports=function(e){var n=a.call(e,s),t=e[s];try{e[s]=void 0;var o=!0}catch(e){}var i=r.call(e);return o&&(n?e[s]=t:delete e[s]),i}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var o=t(147),i=t(203),a=t(44),r=t(5),s=t(214);e.exports=function(e){return"function"==typeof e?e:null==e?a:"object"==typeof e?r(e)?i(e[0],e[1]):o(e):s(e)}},function(e,n,t){var o=t(148),i=t(202),a=t(83);e.exports=function(e){var n=i(e);return 1==n.length&&n[0][2]?a(n[0][0],n[0][1]):function(t){return t===e||o(t,e,n)}}},function(e,n,t){var o=t(68),i=t(72);e.exports=function(e,n,t,a){var r=t.length,s=r,l=!a;if(null==e)return!s;for(e=Object(e);r--;){var c=t[r];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++r<s;){var d=(c=t[r])[0],u=e[d],p=c[1];if(l&&c[2]){if(void 0===u&&!(d in e))return!1}else{var m=new o;if(a)var h=a(u,p,d,e,n,m);if(!(void 0===h?i(p,u,3,a,m):h))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var o=t(19),i=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=o(n,e);return!(t<0)&&(t==n.length-1?n.pop():i.call(n,t,1),--this.size,!0)}},function(e,n,t){var o=t(19);e.exports=function(e){var n=this.__data__,t=o(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var o=t(19);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,n,t){var o=t(19);e.exports=function(e,n){var t=this.__data__,i=o(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this}},function(e,n,t){var o=t(18);e.exports=function(){this.__data__=new o,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var o=t(18),i=t(37),a=t(39);e.exports=function(e,n){var t=this.__data__;if(t instanceof o){var r=t.__data__;if(!i||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new a(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var o=t(70),i=t(160),a=t(38),r=t(71),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,u=c.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||i(e))&&(o(e)?p:s).test(r(e))}},function(e,n,t){var o,i=t(161),a=(o=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!a&&a in e}},function(e,n,t){var o=t(6)["__core-js_shared__"];e.exports=o},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var o=t(164),i=t(18),a=t(37);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||i),string:new o}}},function(e,n,t){var o=t(165),i=t(166),a=t(167),r=t(168),s=t(169);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(20);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var o=t(20),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(o){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var o=t(20),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return o?void 0!==n[e]:i.call(n,e)}},function(e,n,t){var o=t(20);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=o&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var o=t(21);e.exports=function(e){var n=o(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var o=t(21);e.exports=function(e){return o(this,e).get(e)}},function(e,n,t){var o=t(21);e.exports=function(e){return o(this,e).has(e)}},function(e,n,t){var o=t(21);e.exports=function(e,n){var t=o(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this}},function(e,n,t){var o=t(68),i=t(73),a=t(179),r=t(182),s=t(198),l=t(5),c=t(77),d=t(79),u="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,m,h,f){var g=l(e),b=l(n),v=g?"[object Array]":s(e),y=b?"[object Array]":s(n),k=(v="[object Arguments]"==v?u:v)==u,w=(y="[object Arguments]"==y?u:y)==u,S=v==y;if(S&&c(e)){if(!c(n))return!1;g=!0,k=!1}if(S&&!k)return f||(f=new o),g||d(e)?i(e,n,t,m,h,f):a(e,n,v,t,m,h,f);if(!(1&t)){var x=k&&p.call(e,"__wrapped__"),I=w&&p.call(n,"__wrapped__");if(x||I){var C=x?e.value():e,P=I?n.value():n;return f||(f=new o),h(C,P,t,m,f)}}return!!S&&(f||(f=new o),r(e,n,t,m,h,f))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var o=t(13),i=t(180),a=t(69),r=t(73),s=t(181),l=t(40),c=o?o.prototype:void 0,d=c?c.valueOf:void 0;e.exports=function(e,n,t,o,c,u,p){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!u(new i(e),new i(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var m=s;case"[object Set]":var h=1&o;if(m||(m=l),e.size!=n.size&&!h)return!1;var f=p.get(e);if(f)return f==n;o|=2,p.set(e,n);var g=r(m(e),m(n),o,c,u,p);return p.delete(e),g;case"[object Symbol]":if(d)return d.call(e)==d.call(n)}return!1}},function(e,n,t){var o=t(6).Uint8Array;e.exports=o},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,o){t[++n]=[o,e]})),t}},function(e,n,t){var o=t(183),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,a,r,s){var l=1&t,c=o(e),d=c.length;if(d!=o(n).length&&!l)return!1;for(var u=d;u--;){var p=c[u];if(!(l?p in n:i.call(n,p)))return!1}var m=s.get(e),h=s.get(n);if(m&&h)return m==n&&h==e;var f=!0;s.set(e,n),s.set(n,e);for(var g=l;++u<d;){var b=e[p=c[u]],v=n[p];if(a)var y=l?a(v,b,p,n,e,s):a(b,v,p,e,n,s);if(!(void 0===y?b===v||r(b,v,t,a,s):y)){f=!1;break}g||(g="constructor"==p)}if(f&&!g){var k=e.constructor,w=n.constructor;k==w||!("constructor"in e)||!("constructor"in n)||"function"==typeof k&&k instanceof k&&"function"==typeof w&&w instanceof w||(f=!1)}return s.delete(e),s.delete(n),f}},function(e,n,t){var o=t(184),i=t(185),a=t(76);e.exports=function(e){return o(e,a,i)}},function(e,n,t){var o=t(66),i=t(5);e.exports=function(e,n,t){var a=n(e);return i(e)?a:o(a,t(e))}},function(e,n,t){var o=t(186),i=t(187),a=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),o(r(e),(function(n){return a.call(e,n)})))}:i;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=0,a=[];++t<o;){var r=e[t];n(r,t,e)&&(a[i++]=r)}return a}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var o=t(189),i=t(36),a=t(5),r=t(77),s=t(78),l=t(79),c=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=a(e),d=!t&&i(e),u=!t&&!d&&r(e),p=!t&&!d&&!u&&l(e),m=t||d||u||p,h=m?o(e.length,String):[],f=h.length;for(var g in e)!n&&!c.call(e,g)||m&&("length"==g||u&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,f))||h.push(g);return h}},function(e,n){e.exports=function(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var o=t(12),i=t(41),a=t(11),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&i(e.length)&&!!r[o(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var o=t(67),i=n&&!n.nodeType&&n,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,r=a&&a.exports===i&&o.process,s=function(){try{var e=a&&a.require&&a.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(48)(e))},function(e,n,t){var o=t(195),i=t(196),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return i(e);var n=[];for(var t in Object(e))a.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var o=t(197)(Object.keys,Object);e.exports=o},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var o=t(199),i=t(37),a=t(200),r=t(81),s=t(201),l=t(12),c=t(71),d=c(o),u=c(i),p=c(a),m=c(r),h=c(s),f=l;(o&&"[object DataView]"!=f(new o(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||a&&"[object Promise]"!=f(a.resolve())||r&&"[object Set]"!=f(new r)||s&&"[object WeakMap]"!=f(new s))&&(f=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,o=t?c(t):"";if(o)switch(o){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case m:return"[object Set]";case h:return"[object WeakMap]"}return n}),e.exports=f},function(e,n,t){var o=t(9)(t(6),"DataView");e.exports=o},function(e,n,t){var o=t(9)(t(6),"Promise");e.exports=o},function(e,n,t){var o=t(9)(t(6),"WeakMap");e.exports=o},function(e,n,t){var o=t(82),i=t(76);e.exports=function(e){for(var n=i(e),t=n.length;t--;){var a=n[t],r=e[a];n[t]=[a,r,o(r)]}return n}},function(e,n,t){var o=t(72),i=t(204),a=t(211),r=t(42),s=t(82),l=t(83),c=t(22);e.exports=function(e,n){return r(e)&&s(n)?l(c(e),n):function(t){var r=i(t,e);return void 0===r&&r===n?a(t,e):o(n,r,3)}}},function(e,n,t){var o=t(84);e.exports=function(e,n,t){var i=null==e?void 0:o(e,n);return void 0===i?t:i}},function(e,n,t){var o=t(206),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,r=o((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(i,(function(e,t,o,i){n.push(o?i.replace(a,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var o=t(207);e.exports=function(e){var n=o(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var o=t(39);function i(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var o=arguments,i=n?n.apply(this,o):o[0],a=t.cache;if(a.has(i))return a.get(i);var r=e.apply(this,o);return t.cache=a.set(i,r)||a,r};return t.cache=new(i.Cache||o),t}i.Cache=o,e.exports=i},function(e,n,t){var o=t(209);e.exports=function(e){return null==e?"":o(e)}},function(e,n,t){var o=t(13),i=t(210),a=t(5),r=t(43),s=o?o.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(a(n))return i(n,e)+"";if(r(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=Array(o);++t<o;)i[t]=n(e[t],t,e);return i}},function(e,n,t){var o=t(212),i=t(213);e.exports=function(e,n){return null!=e&&i(e,n,o)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var o=t(85),i=t(36),a=t(5),r=t(78),s=t(41),l=t(22);e.exports=function(e,n,t){for(var c=-1,d=(n=o(n,e)).length,u=!1;++c<d;){var p=l(n[c]);if(!(u=null!=e&&t(e,p)))break;e=e[p]}return u||++c!=d?u:!!(d=null==e?0:e.length)&&s(d)&&r(p,d)&&(a(e)||i(e))}},function(e,n,t){var o=t(215),i=t(216),a=t(42),r=t(22);e.exports=function(e){return a(e)?o(r(e)):i(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var o=t(84);e.exports=function(e){return function(n){return o(n,e)}}},function(e,n,t){var o=t(44),i=t(218),a=t(220);e.exports=function(e,n){return a(i(e,n,o),e+"")}},function(e,n,t){var o=t(219),i=Math.max;e.exports=function(e,n,t){return n=i(void 0===n?e.length-1:n,0),function(){for(var a=arguments,r=-1,s=i(a.length-n,0),l=Array(s);++r<s;)l[r]=a[n+r];r=-1;for(var c=Array(n+1);++r<n;)c[r]=a[r];return c[n]=t(l),o(e,this,c)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var o=t(221),i=t(224)(o);e.exports=i},function(e,n,t){var o=t(222),i=t(223),a=t(44),r=i?function(e,n){return i(e,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:a;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var o=t(9),i=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,n){var t=Date.now;e.exports=function(e){var n=0,o=0;return function(){var i=t(),a=16-(i-o);if(o=i,a>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var o=t(74),i=t(226),a=t(231),r=t(75),s=t(232),l=t(40);e.exports=function(e,n,t){var c=-1,d=i,u=e.length,p=!0,m=[],h=m;if(t)p=!1,d=a;else if(u>=200){var f=n?null:s(e);if(f)return l(f);p=!1,d=r,h=new o}else h=n?[]:m;e:for(;++c<u;){var g=e[c],b=n?n(g):g;if(g=t||0!==g?g:0,p&&b==b){for(var v=h.length;v--;)if(h[v]===b)continue e;n&&h.push(b),m.push(g)}else d(h,b,t)||(h!==m&&h.push(b),m.push(g))}return m}},function(e,n,t){var o=t(227);e.exports=function(e,n){return!!(null==e?0:e.length)&&o(e,n,0)>-1}},function(e,n,t){var o=t(228),i=t(229),a=t(230);e.exports=function(e,n,t){return n==n?a(e,n,t):o(e,i,t)}},function(e,n){e.exports=function(e,n,t,o){for(var i=e.length,a=t+(o?1:-1);o?a--:++a<i;)if(n(e[a],a,e))return a;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var o=t-1,i=e.length;++o<i;)if(e[o]===n)return o;return-1}},function(e,n){e.exports=function(e,n,t){for(var o=-1,i=null==e?0:e.length;++o<i;)if(t(n,e[o]))return!0;return!1}},function(e,n,t){var o=t(81),i=t(233),a=t(40),r=o&&1/a(new o([,-0]))[1]==1/0?function(e){return new o(e)}:i;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var o=t(80),i=t(11);e.exports=function(e){return i(e)&&o(e)}},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(86)},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(88)},function(e,n,t){"use strict";t(89)},function(e,n,t){"use strict";t.r(n);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),i=Array.isArray;function a(e){return null==e}function r(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return"function"==typeof e}function d(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function p(e){return"[object Object]"===u.call(e)}function m(e){return"[object RegExp]"===u.call(e)}function h(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function f(e){return r(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function b(e){var n=parseFloat(e);return isNaN(n)?e:n}function v(e,n){for(var t=Object.create(null),o=e.split(","),i=0;i<o.length;i++)t[o[i]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}v("slot,component",!0);var y=v("key,ref,slot,slot-scope,is");function k(e,n){var t=e.length;if(t){if(n===e[t-1])return void(e.length=t-1);var o=e.indexOf(n);if(o>-1)return e.splice(o,1)}}var w=Object.prototype.hasOwnProperty;function S(e,n){return w.call(e,n)}function x(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var I=/-(\w)/g,C=x((function(e){return e.replace(I,(function(e,n){return n?n.toUpperCase():""}))})),P=x((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),M=/\B([A-Z])/g,A=x((function(e){return e.replace(M,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var o=arguments.length;return o?o>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function B(e,n){n=n||0;for(var t=e.length-n,o=new Array(t);t--;)o[t]=e[t+n];return o}function D(e,n){for(var t in n)e[t]=n[t];return e}function T(e){for(var n={},t=0;t<e.length;t++)e[t]&&D(n,e[t]);return n}function E(e,n,t){}var U=function(e,n,t){return!1},F=function(e){return e};function _(e,n){if(e===n)return!0;var t=d(e),o=d(n);if(!t||!o)return!t&&!o&&String(e)===String(n);try{var i=Array.isArray(e),a=Array.isArray(n);if(i&&a)return e.length===n.length&&e.every((function(e,t){return _(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(i||a)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return _(e[t],n[t])}))}catch(e){return!1}}function R(e,n){for(var t=0;t<e.length;t++)if(_(e[t],n))return t;return-1}function L(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}function G(e,n){return e===n?0===e&&1/e!=1/n:e==e||n==n}var N=["component","directive","filter"],z=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],H={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:U,isReservedAttr:U,isUnknownElement:U,getTagNamespace:E,parsePlatformTagName:F,mustUseProp:U,async:!0,_lifecycleHooks:z},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function j(e){var n=(e+"").charCodeAt(0);return 36===n||95===n}function K(e,n,t,o){Object.defineProperty(e,n,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var X=new RegExp("[^".concat(V.source,".$_\\d]"));var q="__proto__"in{},W="undefined"!=typeof window,Y=W&&window.navigator.userAgent.toLowerCase(),$=Y&&/msie|trident/.test(Y),Q=Y&&Y.indexOf("msie 9.0")>0,J=Y&&Y.indexOf("edge/")>0;Y&&Y.indexOf("android");var Z=Y&&/iphone|ipad|ipod|ios/.test(Y);Y&&/chrome\/\d+/.test(Y),Y&&/phantomjs/.test(Y);var ee,ne=Y&&Y.match(/firefox\/(\d+)/),te={}.watch,oe=!1;if(W)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){oe=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===ee&&(ee=!W&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},re=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,ce="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var de=null;function ue(e){void 0===e&&(e=null),e||de&&de._scope.off(),de=e,e&&e._scope.on()}var pe=function(){function e(e,n,t,o,i,a,r,s){this.tag=e,this.data=n,this.children=t,this.text=o,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),me=function(e){void 0===e&&(e="");var n=new pe;return n.text=e,n.isComment=!0,n};function he(e){return new pe(void 0,void 0,void 0,String(e))}function fe(e){var n=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ge=0,be=[],ve=function(){function e(){this._pending=!1,this.id=ge++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,be.push(this))},e.prototype.depend=function(n){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var n=this.subs.filter((function(e){return e}));for(var t=0,o=n.length;t<o;t++){0,n[t].update()}},e}();ve.target=null;var ye=[];function ke(e){ye.push(e),ve.target=e}function we(){ye.pop(),ve.target=ye[ye.length-1]}var Se=Array.prototype,xe=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=Se[e];K(xe,e,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var i,a=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&r.observeArray(i),r.dep.notify(),a}))}));var Ie=Object.getOwnPropertyNames(xe),Ce={},Pe=!0;function Me(e){Pe=e}var Ae={notify:E,depend:E,addSub:E,removeSub:E},Oe=function(){function e(e,n,t){if(void 0===n&&(n=!1),void 0===t&&(t=!1),this.value=e,this.shallow=n,this.mock=t,this.dep=t?Ae:new ve,this.vmCount=0,K(e,"__ob__",this),i(e)){if(!t)if(q)e.__proto__=xe;else for(var o=0,a=Ie.length;o<a;o++){K(e,s=Ie[o],xe[s])}n||this.observeArray(e)}else{var r=Object.keys(e);for(o=0;o<r.length;o++){var s;De(e,s=r[o],Ce,void 0,n,t)}}}return e.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Be(e[n],!1,this.mock)},e}();function Be(e,n,t){return e&&S(e,"__ob__")&&e.__ob__ instanceof Oe?e.__ob__:!Pe||!t&&ae()||!i(e)&&!p(e)||!Object.isExtensible(e)||e.__v_skip||Le(e)||e instanceof pe?void 0:new Oe(e,n,t)}function De(e,n,t,o,a,r){var s=new ve,l=Object.getOwnPropertyDescriptor(e,n);if(!l||!1!==l.configurable){var c=l&&l.get,d=l&&l.set;c&&!d||t!==Ce&&2!==arguments.length||(t=e[n]);var u=!a&&Be(t,!1,r);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=c?c.call(e):t;return ve.target&&(s.depend(),u&&(u.dep.depend(),i(n)&&Ue(n))),Le(n)&&!a?n.value:n},set:function(n){var o=c?c.call(e):t;if(G(o,n)){if(d)d.call(e,n);else{if(c)return;if(!a&&Le(o)&&!Le(n))return void(o.value=n);t=n}u=!a&&Be(n,!1,r),s.notify()}}}),s}}function Te(e,n,t){if(!Re(e)){var o=e.__ob__;return i(e)&&h(n)?(e.length=Math.max(e.length,n),e.splice(n,1,t),o&&!o.shallow&&o.mock&&Be(t,!1,!0),t):n in e&&!(n in Object.prototype)?(e[n]=t,t):e._isVue||o&&o.vmCount?t:o?(De(o.value,n,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(e[n]=t,t)}}function Ee(e,n){if(i(e)&&h(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||Re(e)||S(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ue(e){for(var n=void 0,t=0,o=e.length;t<o;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),i(n)&&Ue(n)}function Fe(e){return _e(e,!0),K(e,"__v_isShallow",!0),e}function _e(e,n){if(!Re(e)){Be(e,n,ae());0}}function Re(e){return!(!e||!e.__v_isReadonly)}function Le(e){return!(!e||!0!==e.__v_isRef)}function Ge(e,n,t){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var e=n[t];if(Le(e))return e.value;var o=e&&e.__ob__;return o&&o.dep.depend(),e},set:function(e){var o=n[t];Le(o)&&!Le(e)?o.value=e:n[t]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Ne;var ze=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Ne,!e&&Ne&&(this.index=(Ne.scopes||(Ne.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var n=Ne;try{return Ne=this,e()}finally{Ne=n}}else 0},e.prototype.on=function(){Ne=this},e.prototype.off=function(){Ne=this.parent},e.prototype.stop=function(e){if(this.active){var n=void 0,t=void 0;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].teardown();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this.active=!1}},e}();function He(e){var n=e._provided,t=e.$parent&&e.$parent._provided;return t===n?e._provided=Object.create(t):n}var Ve=x((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),o="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:t,capture:o,passive:n}}));function je(e,n){function t(){var e=t.fns;if(!i(e))return Mn(e,null,arguments,n,"v-on handler");for(var o=e.slice(),a=0;a<o.length;a++)Mn(o[a],null,arguments,n,"v-on handler")}return t.fns=e,t}function Ke(e,n,t,o,i,r){var l,c,d,u;for(l in e)c=e[l],d=n[l],u=Ve(l),a(c)||(a(d)?(a(c.fns)&&(c=e[l]=je(c,r)),s(u.once)&&(c=e[l]=i(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==d&&(d.fns=c,e[l]=d));for(l in n)a(e[l])&&o((u=Ve(l)).name,n[l],u.capture)}function Xe(e,n,t){var o;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var i=e[n];function l(){t.apply(this,arguments),k(o.fns,l)}a(i)?o=je([l]):r(i.fns)&&s(i.merged)?(o=i).fns.push(l):o=je([i,l]),o.merged=!0,e[n]=o}function qe(e,n,t,o,i){if(r(n)){if(S(n,t))return e[t]=n[t],i||delete n[t],!0;if(S(n,o))return e[t]=n[o],i||delete n[o],!0}return!1}function We(e){return l(e)?[he(e)]:i(e)?function e(n,t){var o,c,d,u,p=[];for(o=0;o<n.length;o++)a(c=n[o])||"boolean"==typeof c||(d=p.length-1,u=p[d],i(c)?c.length>0&&(Ye((c=e(c,"".concat(t||"","_").concat(o)))[0])&&Ye(u)&&(p[d]=he(u.text+c[0].text),c.shift()),p.push.apply(p,c)):l(c)?Ye(u)?p[d]=he(u.text+c):""!==c&&p.push(he(c)):Ye(c)&&Ye(u)?p[d]=he(u.text+c.text):(s(n._isVList)&&r(c.tag)&&a(c.key)&&r(t)&&(c.key="__vlist".concat(t,"_").concat(o,"__")),p.push(c)));return p}(e):void 0}function Ye(e){return r(e)&&r(e.text)&&!1===e.isComment}function $e(e,n){var t,o,a,s,l=null;if(i(e)||"string"==typeof e)for(l=new Array(e.length),t=0,o=e.length;t<o;t++)l[t]=n(e[t],t);else if("number"==typeof e)for(l=new Array(e),t=0;t<e;t++)l[t]=n(t+1,t);else if(d(e))if(ce&&e[Symbol.iterator]){l=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)l.push(n(u.value,l.length)),u=c.next()}else for(a=Object.keys(e),l=new Array(a.length),t=0,o=a.length;t<o;t++)s=a[t],l[t]=n(e[s],s,t);return r(l)||(l=[]),l._isVList=!0,l}function Qe(e,n,t,o){var i,a=this.$scopedSlots[e];a?(t=t||{},o&&(t=D(D({},o),t)),i=a(t)||(c(n)?n():n)):i=this.$slots[e]||(c(n)?n():n);var r=t&&t.slot;return r?this.$createElement("template",{slot:r},i):i}function Je(e){return Bt(this.$options,"filters",e,!0)||F}function Ze(e,n){return i(e)?-1===e.indexOf(n):e!==n}function en(e,n,t,o,i){var a=H.keyCodes[n]||t;return i&&o&&!H.keyCodes[n]?Ze(i,o):a?Ze(a,e):o?A(o)!==n:void 0===e}function nn(e,n,t,o,a){if(t)if(d(t)){i(t)&&(t=T(t));var r=void 0,s=function(i){if("class"===i||"style"===i||y(i))r=e;else{var s=e.attrs&&e.attrs.type;r=o||H.mustUseProp(n,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=C(i),c=A(i);l in r||c in r||(r[i]=t[i],a&&((e.on||(e.on={}))["update:".concat(i)]=function(e){t[i]=e}))};for(var l in t)s(l)}else;return e}function tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),o=t[e];return o&&!n||an(o=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),o}function on(e,n,t){return an(e,"__once__".concat(n).concat(t?"_".concat(t):""),!0),e}function an(e,n,t){if(i(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&rn(e[o],"".concat(n,"_").concat(o),t);else rn(e,n,t)}function rn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function sn(e,n){if(n)if(p(n)){var t=e.on=e.on?D({},e.on):{};for(var o in n){var i=t[o],a=n[o];t[o]=i?[].concat(i,a):a}}else;return e}function ln(e,n,t,o){n=n||{$stable:!t};for(var a=0;a<e.length;a++){var r=e[a];i(r)?ln(r,n,t):r&&(r.proxy&&(r.fn.proxy=!0),n[r.key]=r.fn)}return o&&(n.$key=o),n}function cn(e,n){for(var t=0;t<n.length;t+=2){var o=n[t];"string"==typeof o&&o&&(e[n[t]]=n[t+1])}return e}function dn(e,n){return"string"==typeof e?n+e:e}function un(e){e._o=on,e._n=b,e._s=g,e._l=$e,e._t=Qe,e._q=_,e._i=R,e._m=tn,e._f=Je,e._k=en,e._b=nn,e._v=he,e._e=me,e._u=ln,e._g=sn,e._d=cn,e._p=dn}function pn(e,n){if(!e||!e.length)return{};for(var t={},o=0,i=e.length;o<i;o++){var a=e[o],r=a.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,a.context!==n&&a.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(a);else{var s=r.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(mn)&&delete t[c];return t}function mn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function hn(e){return e.isComment&&e.asyncFactory}function fn(e,n,t,i){var a,r=Object.keys(t).length>0,s=n?!!n.$stable:!r,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(s&&i&&i!==o&&l===i.$key&&!r&&!i.$hasNormal)return i;for(var c in a={},n)n[c]&&"$"!==c[0]&&(a[c]=gn(e,t,c,n[c]))}else a={};for(var d in t)d in a||(a[d]=bn(t,d));return n&&Object.isExtensible(n)&&(n._normalized=a),K(a,"$stable",s),K(a,"$key",l),K(a,"$hasNormal",r),a}function gn(e,n,t,o){var a=function(){var n=de;ue(e);var t=arguments.length?o.apply(null,arguments):o({}),a=(t=t&&"object"==typeof t&&!i(t)?[t]:We(t))&&t[0];return ue(n),t&&(!a||1===t.length&&a.isComment&&!hn(a))?void 0:t};return o.proxy&&Object.defineProperty(n,t,{get:a,enumerable:!0,configurable:!0}),a}function bn(e,n){return function(){return e[n]}}function vn(e){return{get attrs(){if(!e._attrsProxy){var n=e._attrsProxy={};K(n,"_v_attr_proxy",!0),yn(n,e.$attrs,o,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||yn(e._listenersProxy={},e.$listeners,o,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||wn(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:O(e.$emit,e),expose:function(n){n&&Object.keys(n).forEach((function(t){return Ge(e,n,t)}))}}}function yn(e,n,t,o,i){var a=!1;for(var r in n)r in e?n[r]!==t[r]&&(a=!0):(a=!0,kn(e,r,o,i));for(var r in e)r in n||(a=!0,delete e[r]);return a}function kn(e,n,t,o){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){return t[o][n]}})}function wn(e,n){for(var t in n)e[t]=n[t];for(var t in e)t in n||delete e[t]}var Sn=null;function xn(e,n){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),d(e)?n.extend(e):e}function In(e){if(i(e))for(var n=0;n<e.length;n++){var t=e[n];if(r(t)&&(r(t.componentOptions)||hn(t)))return t}}function Cn(e,n,t,o,u,p){return(i(t)||l(t))&&(u=o,o=t,t=void 0),s(p)&&(u=2),function(e,n,t,o,l){if(r(t)&&r(t.__ob__))return me();r(t)&&r(t.is)&&(n=t.is);if(!n)return me();0;i(o)&&c(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===l?o=We(o):1===l&&(o=function(e){for(var n=0;n<e.length;n++)if(i(e[n]))return Array.prototype.concat.apply([],e);return e}(o));var u,p;if("string"==typeof n){var m=void 0;p=e.$vnode&&e.$vnode.ns||H.getTagNamespace(n),u=H.isReservedTag(n)?new pe(H.parsePlatformTagName(n),t,o,void 0,void 0,e):t&&t.pre||!r(m=Bt(e.$options,"components",n))?new pe(n,t,o,void 0,void 0,e):kt(m,t,e,o,n)}else u=kt(n,t,e,o);return i(u)?u:r(u)?(r(p)&&function e(n,t,o){n.ns=t,"foreignObject"===n.tag&&(t=void 0,o=!0);if(r(n.children))for(var i=0,l=n.children.length;i<l;i++){var c=n.children[i];r(c.tag)&&(a(c.ns)||s(o)&&"svg"!==c.tag)&&e(c,t,o)}}(u,p),r(t)&&function(e){d(e.style)&&Hn(e.style);d(e.class)&&Hn(e.class)}(t),u):me()}(e,n,t,o,u)}function Pn(e,n,t){ke();try{if(n)for(var o=n;o=o.$parent;){var i=o.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(o,e,n,t))return}catch(e){An(e,o,"errorCaptured hook")}}An(e,n,t)}finally{we()}}function Mn(e,n,t,o,i){var a;try{(a=t?e.apply(n,t):e.call(n))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(e){return Pn(e,o,i+" (Promise/async)")})),a._handled=!0)}catch(e){Pn(e,o,i)}return a}function An(e,n,t){if(H.errorHandler)try{return H.errorHandler.call(null,e,n,t)}catch(n){n!==e&&On(n,null,"config.errorHandler")}On(e,n,t)}function On(e,n,t){if(!W||"undefined"==typeof console)throw e;console.error(e)}var Bn,Dn=!1,Tn=[],En=!1;function Un(){En=!1;var e=Tn.slice(0);Tn.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&se(Promise)){var Fn=Promise.resolve();Bn=function(){Fn.then(Un),Z&&setTimeout(E)},Dn=!0}else if($||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Bn="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(Un)}:function(){setTimeout(Un,0)};else{var _n=1,Rn=new MutationObserver(Un),Ln=document.createTextNode(String(_n));Rn.observe(Ln,{characterData:!0}),Bn=function(){_n=(_n+1)%2,Ln.data=String(_n)},Dn=!0}function Gn(e,n){var t;if(Tn.push((function(){if(e)try{e.call(n)}catch(e){Pn(e,n,"nextTick")}else t&&t(n)})),En||(En=!0,Bn()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}function Nn(e){return function(n,t){if(void 0===t&&(t=de),t)return function(e,n,t){var o=e.$options;o[n]=Pt(o[n],t)}(t,e,n)}}Nn("beforeMount"),Nn("mounted"),Nn("beforeUpdate"),Nn("updated"),Nn("beforeDestroy"),Nn("destroyed"),Nn("activated"),Nn("deactivated"),Nn("serverPrefetch"),Nn("renderTracked"),Nn("renderTriggered"),Nn("errorCaptured");var zn=new le;function Hn(e){return function e(n,t){var o,a,r=i(n);if(!r&&!d(n)||n.__v_skip||Object.isFrozen(n)||n instanceof pe)return;if(n.__ob__){var s=n.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(r)for(o=n.length;o--;)e(n[o],t);else if(Le(n))e(n.value,t);else for(a=Object.keys(n),o=a.length;o--;)e(n[a[o]],t)}(e,zn),zn.clear(),e}var Vn,jn=0,Kn=function(){function e(e,n,t,o,i){var a,r;a=this,void 0===(r=Ne&&!Ne._vm?Ne:e?e._scope:void 0)&&(r=Ne),r&&r.active&&r.effects.push(a),(this.vm=e)&&i&&(e._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++jn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",c(n)?this.getter=n:(this.getter=function(e){if(!X.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=E)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;ke(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;Pn(e,n,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Hn(e),we(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||d(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'.concat(this.expression,'"');Mn(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&k(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Xn(e,n){Vn.$on(e,n)}function qn(e,n){Vn.$off(e,n)}function Wn(e,n){var t=Vn;return function o(){var i=n.apply(null,arguments);null!==i&&t.$off(e,o)}}function Yn(e,n,t){Vn=e,Ke(n,t||{},Xn,qn,Wn,e),Vn=void 0}var $n=null;function Qn(e){var n=$n;return $n=e,function(){$n=n}}function Jn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zn(e,n){if(n){if(e._directInactive=!1,Jn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Zn(e.$children[t]);et(e,"activated")}}function et(e,n,t,o){void 0===o&&(o=!0),ke();var i=de;o&&ue(e);var a=e.$options[n],r="".concat(n," hook");if(a)for(var s=0,l=a.length;s<l;s++)Mn(a[s],e,t||null,e,r);e._hasHookEvent&&e.$emit("hook:"+n),o&&ue(i),we()}var nt=[],tt=[],ot={},it=!1,at=!1,rt=0;var st=0,lt=Date.now;if(W&&!$){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var dt=function(e,n){if(e.post){if(!n.post)return 1}else if(n.post)return-1;return e.id-n.id};function ut(){var e,n;for(st=lt(),at=!0,nt.sort(dt),rt=0;rt<nt.length;rt++)(e=nt[rt]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=tt.slice(),o=nt.slice();rt=nt.length=tt.length=0,ot={},it=at=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Zn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),function(){for(var e=0;e<be.length;e++){var n=be[e];n.subs=n.subs.filter((function(e){return e})),n._pending=!1}be.length=0}(),re&&H.devtools&&re.emit("flush")}function pt(e){var n=e.id;if(null==ot[n]&&(e!==ve.target||!e.noRecurse)){if(ot[n]=!0,at){for(var t=nt.length-1;t>rt&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);it||(it=!0,Gn(ut))}}function mt(e,n){if(e){for(var t=Object.create(null),o=ce?Reflect.ownKeys(e):Object.keys(e),i=0;i<o.length;i++){var a=o[i];if("__ob__"!==a){var r=e[a].from;if(r in n._provided)t[a]=n._provided[r];else if("default"in e[a]){var s=e[a].default;t[a]=c(s)?s.call(n):s}else 0}}return t}}function ht(e,n,t,a,r){var l,c=this,d=r.options;S(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var u=s(d._compiled),p=!u;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||o,this.injections=mt(d.inject,a),this.slots=function(){return c.$slots||fn(a,e.scopedSlots,c.$slots=pn(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fn(a,e.scopedSlots,this.slots())}}),u&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=fn(a,e.scopedSlots,this.$slots)),d._scopeId?this._c=function(e,n,t,o){var r=Cn(l,e,n,t,o,p);return r&&!i(r)&&(r.fnScopeId=d._scopeId,r.fnContext=a),r}:this._c=function(e,n,t,o){return Cn(l,e,n,t,o,p)}}function ft(e,n,t,o,i){var a=fe(e);return a.fnContext=t,a.fnOptions=o,n.slot&&((a.data||(a.data={})).slot=n.slot),a}function gt(e,n){for(var t in n)e[C(t)]=n[t]}function bt(e){return e.name||e.__name||e._componentTag}un(ht.prototype);var vt={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;vt.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},o=e.data.inlineTemplate;r(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,$n)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,i,a){var r=i.data.scopedSlots,s=e.$scopedSlots,l=!!(r&&!r.$stable||s!==o&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key||!r&&e.$scopedSlots.$key),c=!!(a||e.$options._renderChildren||l),d=e.$vnode;e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i),e.$options._renderChildren=a;var u=i.data.attrs||o;e._attrsProxy&&yn(e._attrsProxy,u,d.data&&d.data.attrs||o,e,"$attrs")&&(c=!0),e.$attrs=u,t=t||o;var p=e.$options._parentListeners;if(e._listenersProxy&&yn(e._listenersProxy,t,p||o,e,"$listeners"),e.$listeners=e.$options._parentListeners=t,Yn(e,t,p),n&&e.$options.props){Me(!1);for(var m=e._props,h=e.$options._propKeys||[],f=0;f<h.length;f++){var g=h[f],b=e.$options.props;m[g]=Dt(g,b,n,e)}Me(!0),e.$options.propsData=n}c&&(e.$slots=pn(a,i.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),e.data.keepAlive&&(t._isMounted?((n=o)._inactive=!1,tt.push(n)):Zn(o,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(!(t&&(n._directInactive=!0,Jn(n))||n._inactive)){n._inactive=!0;for(var o=0;o<n.$children.length;o++)e(n.$children[o]);et(n,"deactivated")}}(n,!0):n.$destroy())}},yt=Object.keys(vt);function kt(e,n,t,l,c){if(!a(e)){var u=t.$options._base;if(d(e)&&(e=u.extend(e)),"function"==typeof e){var p;if(a(e.cid)&&void 0===(e=function(e,n){if(s(e.error)&&r(e.errorComp))return e.errorComp;if(r(e.resolved))return e.resolved;var t=Sn;if(t&&r(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t),s(e.loading)&&r(e.loadingComp))return e.loadingComp;if(t&&!r(e.owners)){var o=e.owners=[t],i=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return k(o,t)}));var u=function(e){for(var n=0,t=o.length;n<t;n++)o[n].$forceUpdate();e&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},p=L((function(t){e.resolved=xn(t,n),i?o.length=0:u(!0)})),m=L((function(n){r(e.errorComp)&&(e.error=!0,u(!0))})),h=e(p,m);return d(h)&&(f(h)?a(e.resolved)&&h.then(p,m):f(h.component)&&(h.component.then(p,m),r(h.error)&&(e.errorComp=xn(h.error,n)),r(h.loading)&&(e.loadingComp=xn(h.loading,n),0===h.delay?e.loading=!0:l=setTimeout((function(){l=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,u(!1))}),h.delay||200)),r(h.timeout)&&(c=setTimeout((function(){c=null,a(e.resolved)&&m(null)}),h.timeout)))),i=!1,e.loading?e.loadingComp:e.resolved}}(p=e,u)))return function(e,n,t,o,i){var a=me();return a.asyncFactory=e,a.asyncMeta={data:n,context:t,children:o,tag:i},a}(p,n,t,l,c);n=n||{},Kt(e),r(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var a=n.on||(n.on={}),s=a[o],l=n.model.callback;r(s)?(i(s)?-1===s.indexOf(l):s!==l)&&(a[o]=[l].concat(s)):a[o]=l}(e.options,n);var m=function(e,n,t){var o=n.options.props;if(!a(o)){var i={},s=e.attrs,l=e.props;if(r(s)||r(l))for(var c in o){var d=A(c);qe(i,l,c,d,!0)||qe(i,s,c,d,!1)}return i}}(n,e);if(s(e.options.functional))return function(e,n,t,a,s){var l=e.options,c={},d=l.props;if(r(d))for(var u in d)c[u]=Dt(u,d,n||o);else r(t.attrs)&&gt(c,t.attrs),r(t.props)&&gt(c,t.props);var p=new ht(t,c,s,a,e),m=l.render.call(null,p._c,p);if(m instanceof pe)return ft(m,t,p.parent,l,p);if(i(m)){for(var h=We(m)||[],f=new Array(h.length),g=0;g<h.length;g++)f[g]=ft(h[g],t,p.parent,l,p);return f}}(e,m,n,t,l);var h=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<yt.length;t++){var o=yt[t],i=n[o],a=vt[o];i===a||i&&i._merged||(n[o]=i?wt(a,i):a)}}(n);var b=bt(e.options)||c;return new pe("vue-component-".concat(e.cid).concat(b?"-".concat(b):""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:m,listeners:h,tag:c,children:l},p)}}}function wt(e,n){var t=function(t,o){e(t,o),n(t,o)};return t._merged=!0,t}var St=E,xt=H.optionMergeStrategies;function It(e,n,t){if(void 0===t&&(t=!0),!n)return e;for(var o,i,a,r=ce?Reflect.ownKeys(n):Object.keys(n),s=0;s<r.length;s++)"__ob__"!==(o=r[s])&&(i=e[o],a=n[o],t&&S(e,o)?i!==a&&p(i)&&p(a)&&It(i,a):Te(e,o,a));return e}function Ct(e,n,t){return t?function(){var o=c(n)?n.call(t,t):n,i=c(e)?e.call(t,t):e;return o?It(o,i):i}:n?e?function(){return It(c(n)?n.call(this,this):n,c(e)?e.call(this,this):e)}:n:e}function Pt(e,n){var t=n?e?e.concat(n):i(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function Mt(e,n,t,o){var i=Object.create(e||null);return n?D(i,n):i}xt.data=function(e,n,t){return t?Ct(e,n,t):n&&"function"!=typeof n?e:Ct(e,n)},z.forEach((function(e){xt[e]=Pt})),N.forEach((function(e){xt[e+"s"]=Mt})),xt.watch=function(e,n,t,o){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var a={};for(var r in D(a,e),n){var s=a[r],l=n[r];s&&!i(s)&&(s=[s]),a[r]=s?s.concat(l):i(l)?l:[l]}return a},xt.props=xt.methods=xt.inject=xt.computed=function(e,n,t,o){if(!e)return n;var i=Object.create(null);return D(i,e),n&&D(i,n),i},xt.provide=function(e,n){return e?function(){var t=Object.create(null);return It(t,c(e)?e.call(this):e),n&&It(t,c(n)?n.call(this):n,!1),t}:n};var At=function(e,n){return void 0===n?e:n};function Ot(e,n,t){if(c(n)&&(n=n.options),function(e,n){var t=e.props;if(t){var o,a,r={};if(i(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(r[C(a)]={type:null});else if(p(t))for(var s in t)a=t[s],r[C(s)]=p(a)?a:{type:a};else 0;e.props=r}}(n),function(e,n){var t=e.inject;if(t){var o=e.inject={};if(i(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(p(t))for(var r in t){var s=t[r];o[r]=p(s)?D({from:r},s):{from:s}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var o=n[t];c(o)&&(n[t]={bind:o,update:o})}}(n),!n._base&&(n.extends&&(e=Ot(e,n.extends,t)),n.mixins))for(var o=0,a=n.mixins.length;o<a;o++)e=Ot(e,n.mixins[o],t);var r,s={};for(r in e)l(r);for(r in n)S(e,r)||l(r);function l(o){var i=xt[o]||At;s[o]=i(e[o],n[o],t,o)}return s}function Bt(e,n,t,o){if("string"==typeof t){var i=e[n];if(S(i,t))return i[t];var a=C(t);if(S(i,a))return i[a];var r=P(a);return S(i,r)?i[r]:i[t]||i[a]||i[r]}}function Dt(e,n,t,o){var i=n[e],a=!S(t,e),r=t[e],s=Ft(Boolean,i.type);if(s>-1)if(a&&!S(i,"default"))r=!1;else if(""===r||r===A(e)){var l=Ft(String,i.type);(l<0||s<l)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!S(n,"default"))return;var o=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return c(o)&&"Function"!==Et(n.type)?o.call(e):o}(o,i,e);var d=Pe;Me(!0),Be(r),Me(d)}return r}var Tt=/^\s*function (\w+)/;function Et(e){var n=e&&e.toString().match(Tt);return n?n[1]:""}function Ut(e,n){return Et(e)===Et(n)}function Ft(e,n){if(!i(n))return Ut(n,e)?0:-1;for(var t=0,o=n.length;t<o;t++)if(Ut(n[t],e))return t;return-1}var _t={enumerable:!0,configurable:!0,get:E,set:E};function Rt(e,n,t){_t.get=function(){return this[n][t]},_t.set=function(e){this[n][t]=e},Object.defineProperty(e,t,_t)}function Lt(e){var n=e.$options;if(n.props&&function(e,n){var t=e.$options.propsData||{},o=e._props=Fe({}),i=e.$options._propKeys=[];e.$parent&&Me(!1);var a=function(a){i.push(a);var r=Dt(a,n,t,e);De(o,a,r),a in e||Rt(e,"_props",a)};for(var r in n)a(r);Me(!0)}(e,n.props),function(e){var n=e.$options,t=n.setup;if(t){var o=e._setupContext=vn(e);ue(e),ke();var i=Mn(t,null,[e._props||Fe({}),o],e,"setup");if(we(),ue(),c(i))n.render=i;else if(d(i))if(e._setupState=i,i.__sfc){var a=e._setupProxy={};for(var r in i)"__sfc"!==r&&Ge(a,i,r)}else for(var r in i)j(r)||Ge(e,i,r);else 0}}(e),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?E:O(n[t],e)}(e,n.methods),n.data)!function(e){var n=e.$options.data;p(n=e._data=c(n)?function(e,n){ke();try{return e.call(n,n)}catch(e){return Pn(e,n,"data()"),{}}finally{we()}}(n,e):n||{})||(n={});var t=Object.keys(n),o=e.$options.props,i=(e.$options.methods,t.length);for(;i--;){var a=t[i];0,o&&S(o,a)||j(a)||Rt(e,"_data",a)}var r=Be(n);r&&r.vmCount++}(e);else{var t=Be(e._data={});t&&t.vmCount++}n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),o=ae();for(var i in n){var a=n[i],r=c(a)?a:a.get;0,o||(t[i]=new Kn(e,r||E,E,Gt)),i in e||Nt(e,i,a)}}(e,n.computed),n.watch&&n.watch!==te&&function(e,n){for(var t in n){var o=n[t];if(i(o))for(var a=0;a<o.length;a++)Vt(e,t,o[a]);else Vt(e,t,o)}}(e,n.watch)}var Gt={lazy:!0};function Nt(e,n,t){var o=!ae();c(t)?(_t.get=o?zt(n):Ht(t),_t.set=E):(_t.get=t.get?o&&!1!==t.cache?zt(n):Ht(t.get):E,_t.set=t.set||E),Object.defineProperty(e,n,_t)}function zt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),ve.target&&n.depend(),n.value}}function Ht(e){return function(){return e.call(this,this)}}function Vt(e,n,t,o){return p(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,o)}var jt=0;function Kt(e){var n=e.options;if(e.super){var t=Kt(e.super);if(t!==e.superOptions){e.superOptions=t;var o=function(e){var n,t=e.options,o=e.sealedOptions;for(var i in t)t[i]!==o[i]&&(n||(n={}),n[i]=t[i]);return n}(e);o&&D(e.extendOptions,o),(n=e.options=Ot(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function Xt(e){this._init(e)}function qt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,o=t.cid,i=e._Ctor||(e._Ctor={});if(i[o])return i[o];var a=bt(e)||bt(t.options);var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=Ot(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)Rt(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)Nt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,N.forEach((function(e){r[e]=t[e]})),a&&(r.options.components[a]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=D({},r.options),i[o]=r,r}}function Wt(e){return e&&(bt(e.Ctor.options)||e.tag)}function Yt(e,n){return i(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!m(e)&&e.test(n)}function $t(e,n){var t=e.cache,o=e.keys,i=e._vnode;for(var a in t){var r=t[a];if(r){var s=r.name;s&&!n(s)&&Qt(t,a,o,i)}}}function Qt(e,n,t,o){var i=e[n];!i||o&&i.tag===o.tag||i.componentInstance.$destroy(),e[n]=null,k(t,n)}Xt.prototype._init=function(e){var n=this;n._uid=jt++,n._isVue=!0,n.__v_skip=!0,n._scope=new ze(!0),n._scope._vm=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),o=n._parentVnode;t.parent=n.parent,t._parentVnode=o;var i=o.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Ot(Kt(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._provided=t?t._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Yn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,i=t&&t.context;e.$slots=pn(n._renderChildren,i),e.$scopedSlots=t?fn(e.$parent,t.data.scopedSlots,e.$slots):o,e._c=function(n,t,o,i){return Cn(e,n,t,o,i,!1)},e.$createElement=function(n,t,o,i){return Cn(e,n,t,o,i,!0)};var a=t&&t.data;De(e,"$attrs",a&&a.attrs||o,null,!0),De(e,"$listeners",n._parentListeners||o,null,!0)}(n),et(n,"beforeCreate",void 0,!1),function(e){var n=mt(e.$options.inject,e);n&&(Me(!1),Object.keys(n).forEach((function(t){De(e,t,n[t])})),Me(!0))}(n),Lt(n),function(e){var n=e.$options.provide;if(n){var t=c(n)?n.call(e):n;if(!d(t))return;for(var o=He(e),i=ce?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++){var r=i[a];Object.defineProperty(o,r,Object.getOwnPropertyDescriptor(t,r))}}}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)},function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=Te,e.prototype.$delete=Ee,e.prototype.$watch=function(e,n,t){if(p(n))return Vt(this,e,n,t);(t=t||{}).user=!0;var o=new Kn(this,e,n,t);if(t.immediate){var i='callback for immediate watcher "'.concat(o.expression,'"');ke(),Mn(n,this,[o.value],this,i),we()}return function(){o.teardown()}}}(Xt),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var o=this;if(i(e))for(var a=0,r=e.length;a<r;a++)o.$on(e[a],t);else(o._events[e]||(o._events[e]=[])).push(t),n.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,n){var t=this;function o(){t.$off(e,o),n.apply(t,arguments)}return o.fn=n,t.$on(e,o),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(e)){for(var o=0,a=e.length;o<a;o++)t.$off(e[o],n);return t}var r,s=t._events[e];if(!s)return t;if(!n)return t._events[e]=null,t;for(var l=s.length;l--;)if((r=s[l])===n||r.fn===n){s.splice(l,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?B(t):t;for(var o=B(arguments,1),i='event handler for "'.concat(e,'"'),a=0,r=t.length;a<r;a++)Mn(t[a],n,o,n,i)}return n}}(Xt),function(e){e.prototype._update=function(e,n){var t=this,o=t.$el,i=t._vnode,a=Qn(t);t._vnode=e,t.$el=i?t.__patch__(i,e):t.__patch__(t.$el,e,n,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var r=t;r&&r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode;)r.$parent.$el=r.$el,r=r.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||k(n.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Xt),function(e){un(e.prototype),e.prototype.$nextTick=function(e){return Gn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,o=t.render,a=t._parentVnode;a&&n._isMounted&&(n.$scopedSlots=fn(n.$parent,a.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&wn(n._slotsProxy,n.$scopedSlots)),n.$vnode=a;try{ue(n),Sn=n,e=o.call(n._renderProxy,n.$createElement)}catch(t){Pn(t,n,"render"),e=n._vnode}finally{Sn=null,ue()}return i(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=me()),e.parent=a,e}}(Xt);var Jt=[String,RegExp,Array],Zt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Jt,exclude:Jt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var i=t.tag,a=t.componentInstance,r=t.componentOptions;e[o]={name:Wt(r),tag:i,componentInstance:a},n.push(o),this.max&&n.length>parseInt(this.max)&&Qt(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Qt(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){$t(e,(function(e){return Yt(n,e)}))})),this.$watch("exclude",(function(n){$t(e,(function(e){return!Yt(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=In(e),t=n&&n.componentOptions;if(t){var o=Wt(t),i=this.include,a=this.exclude;if(i&&(!o||!Yt(i,o))||a&&o&&Yt(a,o))return n;var r=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):n.key;r[l]?(n.componentInstance=r[l].componentInstance,k(s,l),s.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return H}};Object.defineProperty(e,"config",n),e.util={warn:St,extend:D,mergeOptions:Ot,defineReactive:De},e.set=Te,e.delete=Ee,e.nextTick=Gn,e.observable=function(e){return Be(e),e},e.options=Object.create(null),N.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,D(e.options.components,Zt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=B(arguments,1);return t.unshift(this),c(e.install)?e.install.apply(e,t):c(e)&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ot(this.options,e),this}}(e),qt(e),function(e){N.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&p(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&c(t)&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(Xt),Object.defineProperty(Xt.prototype,"$isServer",{get:ae}),Object.defineProperty(Xt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Xt,"FunctionalRenderContext",{value:ht}),Xt.version="2.7.14";var eo=v("style,class"),no=v("input,textarea,option,select,progress"),to=v("contenteditable,draggable,spellcheck"),oo=v("events,caret,typing,plaintext-only"),io=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ao="http://www.w3.org/1999/xlink",ro=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},so=function(e){return ro(e)?e.slice(6,e.length):""},lo=function(e){return null==e||!1===e};function co(e){for(var n=e.data,t=e,o=e;r(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(n=uo(o.data,n));for(;r(t=t.parent);)t&&t.data&&(n=uo(n,t.data));return function(e,n){if(r(e)||r(n))return po(e,mo(n));return""}(n.staticClass,n.class)}function uo(e,n){return{staticClass:po(e.staticClass,n.staticClass),class:r(e.class)?[e.class,n.class]:n.class}}function po(e,n){return e?n?e+" "+n:e:n||""}function mo(e){return Array.isArray(e)?function(e){for(var n,t="",o=0,i=e.length;o<i;o++)r(n=mo(e[o]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):d(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var ho={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fo=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),go=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),bo=function(e){return fo(e)||go(e)};var vo=Object.create(null);var yo=v("text,number,password,search,email,tel,url");var ko=Object.freeze({__proto__:null,createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(ho[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),wo={create:function(e,n){So(n)},update:function(e,n){e.data.ref!==n.data.ref&&(So(e,!0),So(n))},destroy:function(e){So(e,!0)}};function So(e,n){var t=e.data.ref;if(r(t)){var o=e.context,a=e.componentInstance||e.elm,s=n?null:a,l=n?void 0:a;if(c(t))Mn(t,o,[s],o,"template ref function");else{var d=e.data.refInFor,u="string"==typeof t||"number"==typeof t,p=Le(t),m=o.$refs;if(u||p)if(d){var h=u?m[t]:t.value;n?i(h)&&k(h,a):i(h)?h.includes(a)||h.push(a):u?(m[t]=[a],xo(o,t,m[t])):t.value=[a]}else if(u){if(n&&m[t]!==a)return;m[t]=l,xo(o,t,s)}else if(p){if(n&&t.value!==a)return;t.value=s}else 0}}}function xo(e,n,t){var o=e._setupState;o&&S(o,n)&&(Le(o[n])?o[n].value=t:o[n]=t)}var Io=new pe("",{},[]),Co=["create","activate","update","remove","destroy"];function Po(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&r(e.data)===r(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,o=r(t=e.data)&&r(t=t.attrs)&&t.type,i=r(t=n.data)&&r(t=t.attrs)&&t.type;return o===i||yo(o)&&yo(i)}(e,n)||s(e.isAsyncPlaceholder)&&a(n.asyncFactory.error))}function Mo(e,n,t){var o,i,a={};for(o=n;o<=t;++o)r(i=e[o].key)&&(a[i]=o);return a}var Ao={create:Oo,update:Oo,destroy:function(e){Oo(e,Io)}};function Oo(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,o,i,a=e===Io,r=n===Io,s=Do(e.data.directives,e.context),l=Do(n.data.directives,n.context),c=[],d=[];for(t in l)o=s[t],i=l[t],o?(i.oldValue=o.value,i.oldArg=o.arg,Eo(i,"update",n,e),i.def&&i.def.componentUpdated&&d.push(i)):(Eo(i,"bind",n,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var u=function(){for(var t=0;t<c.length;t++)Eo(c[t],"inserted",n,e)};a?Xe(n,"insert",u):u()}d.length&&Xe(n,"postpatch",(function(){for(var t=0;t<d.length;t++)Eo(d[t],"componentUpdated",n,e)}));if(!a)for(t in s)l[t]||Eo(s[t],"unbind",e,e,r)}(e,n)}var Bo=Object.create(null);function Do(e,n){var t,o,i=Object.create(null);if(!e)return i;for(t=0;t<e.length;t++){if((o=e[t]).modifiers||(o.modifiers=Bo),i[To(o)]=o,n._setupState&&n._setupState.__sfc){var a=o.def||Bt(n,"_setupState","v-"+o.name);o.def="function"==typeof a?{bind:a,update:a}:a}o.def=o.def||Bt(n.$options,"directives",o.name)}return i}function To(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Eo(e,n,t,o,i){var a=e.def&&e.def[n];if(a)try{a(t.elm,e,t,o,i)}catch(o){Pn(o,t.context,"directive ".concat(e.name," ").concat(n," hook"))}}var Uo=[wo,Ao];function Fo(e,n){var t=n.componentOptions;if(!(r(t)&&!1===t.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(n.data.attrs))){var o,i,l=n.elm,c=e.data.attrs||{},d=n.data.attrs||{};for(o in(r(d.__ob__)||s(d._v_attr_proxy))&&(d=n.data.attrs=D({},d)),d)i=d[o],c[o]!==i&&_o(l,o,i,n.data.pre);for(o in($||J)&&d.value!==c.value&&_o(l,"value",d.value),c)a(d[o])&&(ro(o)?l.removeAttributeNS(ao,so(o)):to(o)||l.removeAttribute(o))}}function _o(e,n,t,o){o||e.tagName.indexOf("-")>-1?Ro(e,n,t):io(n)?lo(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):to(n)?e.setAttribute(n,function(e,n){return lo(n)||"false"===n?"false":"contenteditable"===e&&oo(n)?n:"true"}(n,t)):ro(n)?lo(t)?e.removeAttributeNS(ao,so(n)):e.setAttributeNS(ao,n,t):Ro(e,n,t)}function Ro(e,n,t){if(lo(t))e.removeAttribute(n);else{if($&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var o=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(n,t)}}var Lo={create:Fo,update:Fo};function Go(e,n){var t=n.elm,o=n.data,i=e.data;if(!(a(o.staticClass)&&a(o.class)&&(a(i)||a(i.staticClass)&&a(i.class)))){var s=co(n),l=t._transitionClasses;r(l)&&(s=po(s,mo(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var No,zo={create:Go,update:Go};function Ho(e,n,t){var o=No;return function i(){var a=n.apply(null,arguments);null!==a&&Ko(e,i,t,o)}}var Vo=Dn&&!(ne&&Number(ne[1])<=53);function jo(e,n,t,o){if(Vo){var i=st,a=n;n=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}No.addEventListener(e,n,oe?{capture:t,passive:o}:t)}function Ko(e,n,t,o){(o||No).removeEventListener(e,n._wrapper||n,t)}function Xo(e,n){if(!a(e.data.on)||!a(n.data.on)){var t=n.data.on||{},o=e.data.on||{};No=n.elm||e.elm,function(e){if(r(e.__r)){var n=$?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}r(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),Ke(t,o,jo,Ko,Ho,n.context),No=void 0}}var qo,Wo={create:Xo,update:Xo,destroy:function(e){return Xo(e,Io)}};function Yo(e,n){if(!a(e.data.domProps)||!a(n.data.domProps)){var t,o,i=n.elm,l=e.data.domProps||{},c=n.data.domProps||{};for(t in(r(c.__ob__)||s(c._v_attr_proxy))&&(c=n.data.domProps=D({},c)),l)t in c||(i[t]="");for(t in c){if(o=c[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),o===l[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=o;var d=a(o)?"":String(o);$o(i,d)&&(i.value=d)}else if("innerHTML"===t&&go(i.tagName)&&a(i.innerHTML)){(qo=qo||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var u=qo.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(o!==l[t])try{i[t]=o}catch(e){}}}}function $o(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,o=e._vModifiers;if(r(o)){if(o.number)return b(t)!==b(n);if(o.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Qo={create:Yo,update:Yo},Jo=x((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(t);o.length>1&&(n[o[0].trim()]=o[1].trim())}})),n}));function Zo(e){var n=ei(e.style);return e.staticStyle?D(e.staticStyle,n):n}function ei(e){return Array.isArray(e)?T(e):"string"==typeof e?Jo(e):e}var ni,ti=/^--/,oi=/\s*!important$/,ii=function(e,n,t){if(ti.test(n))e.style.setProperty(n,t);else if(oi.test(t))e.style.setProperty(A(n),t.replace(oi,""),"important");else{var o=ri(n);if(Array.isArray(t))for(var i=0,a=t.length;i<a;i++)e.style[o]=t[i];else e.style[o]=t}},ai=["Webkit","Moz","ms"],ri=x((function(e){if(ni=ni||document.createElement("div").style,"filter"!==(e=C(e))&&e in ni)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<ai.length;t++){var o=ai[t]+n;if(o in ni)return o}}));function si(e,n){var t=n.data,o=e.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var i,s,l=n.elm,c=o.staticStyle,d=o.normalizedStyle||o.style||{},u=c||d,p=ei(n.data.style)||{};n.data.normalizedStyle=r(p.__ob__)?D({},p):p;var m=function(e,n){var t,o={};if(n)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Zo(i.data))&&D(o,t);(t=Zo(e.data))&&D(o,t);for(var a=e;a=a.parent;)a.data&&(t=Zo(a.data))&&D(o,t);return o}(n,!0);for(s in u)a(m[s])&&ii(l,s,"");for(s in m)(i=m[s])!==u[s]&&ii(l,s,null==i?"":i)}}var li={create:si,update:si},ci=/\s+/;function di(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(ci).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" ".concat(e.getAttribute("class")||""," ");t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function ui(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(ci).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" ".concat(e.getAttribute("class")||""," "),o=" "+n+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function pi(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&D(n,mi(e.name||"v")),D(n,e),n}return"string"==typeof e?mi(e):void 0}}var mi=x((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),hi=W&&!Q,fi="transition",gi="transitionend",bi="animation",vi="animationend";hi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fi="WebkitTransition",gi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(bi="WebkitAnimation",vi="webkitAnimationEnd"));var yi=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function ki(e){yi((function(){yi(e)}))}function wi(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),di(e,n))}function Si(e,n){e._transitionClasses&&k(e._transitionClasses,n),ui(e,n)}function xi(e,n,t){var o=Ci(e,n),i=o.type,a=o.timeout,r=o.propCount;if(!i)return t();var s="transition"===i?gi:vi,l=0,c=function(){e.removeEventListener(s,d),t()},d=function(n){n.target===e&&++l>=r&&c()};setTimeout((function(){l<r&&c()}),a+1),e.addEventListener(s,d)}var Ii=/\b(transform|all)(,|$)/;function Ci(e,n){var t,o=window.getComputedStyle(e),i=(o[fi+"Delay"]||"").split(", "),a=(o[fi+"Duration"]||"").split(", "),r=Pi(i,a),s=(o[bi+"Delay"]||"").split(", "),l=(o[bi+"Duration"]||"").split(", "),c=Pi(s,l),d=0,u=0;return"transition"===n?r>0&&(t="transition",d=r,u=a.length):"animation"===n?c>0&&(t="animation",d=c,u=l.length):u=(t=(d=Math.max(r,c))>0?r>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&Ii.test(o[fi+"Property"])}}function Pi(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return Mi(n)+Mi(e[t])})))}function Mi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Ai(e,n){var t=e.elm;r(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=pi(e.data.transition);if(!a(o)&&!r(t._enterCb)&&1===t.nodeType){for(var i=o.css,s=o.type,l=o.enterClass,u=o.enterToClass,p=o.enterActiveClass,m=o.appearClass,h=o.appearToClass,f=o.appearActiveClass,g=o.beforeEnter,v=o.enter,y=o.afterEnter,k=o.enterCancelled,w=o.beforeAppear,S=o.appear,x=o.afterAppear,I=o.appearCancelled,C=o.duration,P=$n,M=$n.$vnode;M&&M.parent;)P=M.context,M=M.parent;var A=!P._isMounted||!e.isRootInsert;if(!A||S||""===S){var O=A&&m?m:l,B=A&&f?f:p,D=A&&h?h:u,T=A&&w||g,E=A&&c(S)?S:v,U=A&&x||y,F=A&&I||k,_=b(d(C)?C.enter:C);0;var R=!1!==i&&!Q,G=Di(E),N=t._enterCb=L((function(){R&&(Si(t,D),Si(t,B)),N.cancelled?(R&&Si(t,O),F&&F(t)):U&&U(t),t._enterCb=null}));e.data.show||Xe(e,"insert",(function(){var n=t.parentNode,o=n&&n._pending&&n._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),E&&E(t,N)})),T&&T(t),R&&(wi(t,O),wi(t,B),ki((function(){Si(t,O),N.cancelled||(wi(t,D),G||(Bi(_)?setTimeout(N,_):xi(t,s,N)))}))),e.data.show&&(n&&n(),E&&E(t,N)),R||G||N()}}}function Oi(e,n){var t=e.elm;r(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=pi(e.data.transition);if(a(o)||1!==t.nodeType)return n();if(!r(t._leaveCb)){var i=o.css,s=o.type,l=o.leaveClass,c=o.leaveToClass,u=o.leaveActiveClass,p=o.beforeLeave,m=o.leave,h=o.afterLeave,f=o.leaveCancelled,g=o.delayLeave,v=o.duration,y=!1!==i&&!Q,k=Di(m),w=b(d(v)?v.leave:v);0;var S=t._leaveCb=L((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),y&&(Si(t,c),Si(t,u)),S.cancelled?(y&&Si(t,l),f&&f(t)):(n(),h&&h(t)),t._leaveCb=null}));g?g(x):x()}function x(){S.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),p&&p(t),y&&(wi(t,l),wi(t,u),ki((function(){Si(t,l),S.cancelled||(wi(t,c),k||(Bi(w)?setTimeout(S,w):xi(t,s,S)))}))),m&&m(t,S),y||k||S())}}function Bi(e){return"number"==typeof e&&!isNaN(e)}function Di(e){if(a(e))return!1;var n=e.fns;return r(n)?Di(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function Ti(e,n){!0!==n.data.show&&Ai(n)}var Ei=function(e){var n,t,o={},c=e.modules,d=e.nodeOps;for(n=0;n<Co.length;++n)for(o[Co[n]]=[],t=0;t<c.length;++t)r(c[t][Co[n]])&&o[Co[n]].push(c[t][Co[n]]);function u(e){var n=d.parentNode(e);r(n)&&d.removeChild(n,e)}function p(e,n,t,i,a,l,c){if(r(e.elm)&&r(l)&&(e=l[c]=fe(e)),e.isRootInsert=!a,!function(e,n,t,i){var a=e.data;if(r(a)){var l=r(e.componentInstance)&&a.keepAlive;if(r(a=a.hook)&&r(a=a.init)&&a(e,!1),r(e.componentInstance))return m(e,n),h(t,e.elm,i),s(l)&&function(e,n,t,i){var a,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,r(a=s.data)&&r(a=a.transition)){for(a=0;a<o.activate.length;++a)o.activate[a](Io,s);n.push(s);break}h(t,e.elm,i)}(e,n,t,i),!0}}(e,n,t,i)){var u=e.data,p=e.children,g=e.tag;r(g)?(e.elm=e.ns?d.createElementNS(e.ns,g):d.createElement(g,e),y(e),f(e,p,n),r(u)&&b(e,n),h(t,e.elm,i)):s(e.isComment)?(e.elm=d.createComment(e.text),h(t,e.elm,i)):(e.elm=d.createTextNode(e.text),h(t,e.elm,i))}}function m(e,n){r(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(b(e,n),y(e)):(So(e),n.push(e))}function h(e,n,t){r(e)&&(r(t)?d.parentNode(t)===e&&d.insertBefore(e,n,t):d.appendChild(e,n))}function f(e,n,t){if(i(n)){0;for(var o=0;o<n.length;++o)p(n[o],t,e.elm,null,!0,n,o)}else l(e.text)&&d.appendChild(e.elm,d.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return r(e.tag)}function b(e,t){for(var i=0;i<o.create.length;++i)o.create[i](Io,e);r(n=e.data.hook)&&(r(n.create)&&n.create(Io,e),r(n.insert)&&t.push(e))}function y(e){var n;if(r(n=e.fnScopeId))d.setStyleScope(e.elm,n);else for(var t=e;t;)r(n=t.context)&&r(n=n.$options._scopeId)&&d.setStyleScope(e.elm,n),t=t.parent;r(n=$n)&&n!==e.context&&n!==e.fnContext&&r(n=n.$options._scopeId)&&d.setStyleScope(e.elm,n)}function k(e,n,t,o,i,a){for(;o<=i;++o)p(t[o],a,e,n,!1,t,o)}function w(e){var n,t,i=e.data;if(r(i))for(r(n=i.hook)&&r(n=n.destroy)&&n(e),n=0;n<o.destroy.length;++n)o.destroy[n](e);if(r(n=e.children))for(t=0;t<e.children.length;++t)w(e.children[t])}function S(e,n,t){for(;n<=t;++n){var o=e[n];r(o)&&(r(o.tag)?(x(o),w(o)):u(o.elm))}}function x(e,n){if(r(n)||r(e.data)){var t,i=o.remove.length+1;for(r(n)?n.listeners+=i:n=function(e,n){function t(){0==--t.listeners&&u(e)}return t.listeners=n,t}(e.elm,i),r(t=e.componentInstance)&&r(t=t._vnode)&&r(t.data)&&x(t,n),t=0;t<o.remove.length;++t)o.remove[t](e,n);r(t=e.data.hook)&&r(t=t.remove)?t(e,n):n()}else u(e.elm)}function I(e,n,t,o){for(var i=t;i<o;i++){var a=n[i];if(r(a)&&Po(e,a))return i}}function C(e,n,t,i,l,c){if(e!==n){r(n.elm)&&r(i)&&(n=i[l]=fe(n));var u=n.elm=e.elm;if(s(e.isAsyncPlaceholder))r(n.asyncFactory.resolved)?A(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var m,h=n.data;r(h)&&r(m=h.hook)&&r(m=m.prepatch)&&m(e,n);var f=e.children,b=n.children;if(r(h)&&g(n)){for(m=0;m<o.update.length;++m)o.update[m](e,n);r(m=h.hook)&&r(m=m.update)&&m(e,n)}a(n.text)?r(f)&&r(b)?f!==b&&function(e,n,t,o,i){var s,l,c,u=0,m=0,h=n.length-1,f=n[0],g=n[h],b=t.length-1,v=t[0],y=t[b],w=!i;for(0;u<=h&&m<=b;)a(f)?f=n[++u]:a(g)?g=n[--h]:Po(f,v)?(C(f,v,o,t,m),f=n[++u],v=t[++m]):Po(g,y)?(C(g,y,o,t,b),g=n[--h],y=t[--b]):Po(f,y)?(C(f,y,o,t,b),w&&d.insertBefore(e,f.elm,d.nextSibling(g.elm)),f=n[++u],y=t[--b]):Po(g,v)?(C(g,v,o,t,m),w&&d.insertBefore(e,g.elm,f.elm),g=n[--h],v=t[++m]):(a(s)&&(s=Mo(n,u,h)),a(l=r(v.key)?s[v.key]:I(v,n,u,h))?p(v,o,e,f.elm,!1,t,m):Po(c=n[l],v)?(C(c,v,o,t,m),n[l]=void 0,w&&d.insertBefore(e,c.elm,f.elm)):p(v,o,e,f.elm,!1,t,m),v=t[++m]);u>h?k(e,a(t[b+1])?null:t[b+1].elm,t,m,b,o):m>b&&S(n,u,h)}(u,f,b,t,c):r(b)?(r(e.text)&&d.setTextContent(u,""),k(u,null,b,0,b.length-1,t)):r(f)?S(f,0,f.length-1):r(e.text)&&d.setTextContent(u,""):e.text!==n.text&&d.setTextContent(u,n.text),r(h)&&r(m=h.hook)&&r(m=m.postpatch)&&m(e,n)}}}function P(e,n,t){if(s(t)&&r(e.parent))e.parent.data.pendingInsert=n;else for(var o=0;o<n.length;++o)n[o].data.hook.insert(n[o])}var M=v("attrs,class,staticClass,staticStyle,key");function A(e,n,t,o){var i,a=n.tag,l=n.data,c=n.children;if(o=o||l&&l.pre,n.elm=e,s(n.isComment)&&r(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(r(l)&&(r(i=l.hook)&&r(i=i.init)&&i(n,!0),r(i=n.componentInstance)))return m(n,t),!0;if(r(a)){if(r(c))if(e.hasChildNodes())if(r(i=l)&&r(i=i.domProps)&&r(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var d=!0,u=e.firstChild,p=0;p<c.length;p++){if(!u||!A(u,c[p],t,o)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else f(n,c,t);if(r(l)){var h=!1;for(var g in l)if(!M(g)){h=!0,b(n,t);break}!h&&l.class&&Hn(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,i){if(!a(n)){var l,c=!1,u=[];if(a(e))c=!0,p(n,u);else{var m=r(e.nodeType);if(!m&&Po(e,n))C(e,n,u,null,null,i);else{if(m){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),s(t)&&A(e,n,u))return P(n,u,!0),e;l=e,e=new pe(d.tagName(l).toLowerCase(),{},[],void 0,l)}var h=e.elm,f=d.parentNode(h);if(p(n,u,h._leaveCb?null:f,d.nextSibling(h)),r(n.parent))for(var b=n.parent,v=g(n);b;){for(var y=0;y<o.destroy.length;++y)o.destroy[y](b);if(b.elm=n.elm,v){for(var k=0;k<o.create.length;++k)o.create[k](Io,b);var x=b.data.hook.insert;if(x.merged)for(var I=1;I<x.fns.length;I++)x.fns[I]()}else So(b);b=b.parent}r(f)?S([e],0,0):r(e.tag)&&w(e)}}return P(n,u,c),n.elm}r(e)&&w(e)}}({nodeOps:ko,modules:[Lo,zo,Wo,Qo,li,W?{create:Ti,activate:Ti,remove:function(e,n){!0!==e.data.show?Oi(e,n):n()}}:{}].concat(Uo)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&zi(e,"input")}));var Ui={inserted:function(e,n,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?Xe(t,"postpatch",(function(){Ui.componentUpdated(e,n,t)})):Fi(e,n,t.context),e._vOptions=[].map.call(e.options,Li)):("textarea"===t.tag||yo(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",Gi),e.addEventListener("compositionend",Ni),e.addEventListener("change",Ni),Q&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){Fi(e,n,t.context);var o=e._vOptions,i=e._vOptions=[].map.call(e.options,Li);if(i.some((function(e,n){return!_(e,o[n])})))(e.multiple?n.value.some((function(e){return Ri(e,i)})):n.value!==n.oldValue&&Ri(n.value,i))&&zi(e,"change")}}};function Fi(e,n,t){_i(e,n,t),($||J)&&setTimeout((function(){_i(e,n,t)}),0)}function _i(e,n,t){var o=n.value,i=e.multiple;if(!i||Array.isArray(o)){for(var a,r,s=0,l=e.options.length;s<l;s++)if(r=e.options[s],i)a=R(o,Li(r))>-1,r.selected!==a&&(r.selected=a);else if(_(Li(r),o))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Ri(e,n){return n.every((function(n){return!_(n,e)}))}function Li(e){return"_value"in e?e._value:e.value}function Gi(e){e.target.composing=!0}function Ni(e){e.target.composing&&(e.target.composing=!1,zi(e.target,"input"))}function zi(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function Hi(e){return!e.componentInstance||e.data&&e.data.transition?e:Hi(e.componentInstance._vnode)}var Vi={model:Ui,show:{bind:function(e,n,t){var o=n.value,i=(t=Hi(t)).data&&t.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&i?(t.data.show=!0,Ai(t,(function(){e.style.display=a}))):e.style.display=o?a:"none"},update:function(e,n,t){var o=n.value;!o!=!n.oldValue&&((t=Hi(t)).data&&t.data.transition?(t.data.show=!0,o?Ai(t,(function(){e.style.display=e.__vOriginalDisplay})):Oi(t,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,o,i){i||(e.style.display=e.__vOriginalDisplay)}}},ji={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ki(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?Ki(In(n.children)):e}function Xi(e){var n={},t=e.$options;for(var o in t.propsData)n[o]=e[o];var i=t._parentListeners;for(var o in i)n[C(o)]=i[o];return n}function qi(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Wi=function(e){return e.tag||hn(e)},Yi=function(e){return"show"===e.name},$i={name:"transition",props:ji,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Wi)).length){0;var o=this.mode;0;var i=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var a=Ki(i);if(!a)return i;if(this._leaving)return qi(e,i);var r="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?r+"comment":r+a.tag:l(a.key)?0===String(a.key).indexOf(r)?a.key:r+a.key:a.key;var s=(a.data||(a.data={})).transition=Xi(this),c=this._vnode,d=Ki(c);if(a.data.directives&&a.data.directives.some(Yi)&&(a.data.show=!0),d&&d.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(a,d)&&!hn(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=D({},s);if("out-in"===o)return this._leaving=!0,Xe(u,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),qi(e,i);if("in-out"===o){if(hn(a))return c;var p,m=function(){p()};Xe(s,"afterEnter",m),Xe(s,"enterCancelled",m),Xe(u,"delayLeave",(function(e){p=e}))}}return i}}},Qi=D({tag:String,moveClass:String},ji);function Ji(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Zi(e){e.data.newPos=e.elm.getBoundingClientRect()}function ea(e){var n=e.data.pos,t=e.data.newPos,o=n.left-t.left,i=n.top-t.top;if(o||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate(".concat(o,"px,").concat(i,"px)"),a.transitionDuration="0s"}}delete Qi.mode;var na={Transition:$i,TransitionGroup:{props:Qi,beforeMount:function(){var e=this,n=this._update;this._update=function(t,o){var i=Qn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),n.call(e,t,o)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],r=Xi(this),s=0;s<i.length;s++){if((d=i[s]).tag)if(null!=d.key&&0!==String(d.key).indexOf("__vlist"))a.push(d),t[d.key]=d,(d.data||(d.data={})).transition=r;else;}if(o){var l=[],c=[];for(s=0;s<o.length;s++){var d;(d=o[s]).data.transition=r,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):c.push(d)}this.kept=e(n,null,l),this.removed=c}return e(n,null,a)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(Ji),e.forEach(Zi),e.forEach(ea),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,o=t.style;wi(t,n),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(gi,t._moveCb=function e(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(gi,e),t._moveCb=null,Si(t,n))})}})))},methods:{hasMove:function(e,n){if(!hi)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){ui(t,e)})),di(t,n),t.style.display="none",this.$el.appendChild(t);var o=Ci(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ta(e,n){for(var t in n)e[t]=n[t];return e}Xt.config.mustUseProp=function(e,n,t){return"value"===t&&no(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},Xt.config.isReservedTag=bo,Xt.config.isReservedAttr=eo,Xt.config.getTagNamespace=function(e){return go(e)?"svg":"math"===e?"math":void 0},Xt.config.isUnknownElement=function(e){if(!W)return!0;if(bo(e))return!1;if(e=e.toLowerCase(),null!=vo[e])return vo[e];var n=document.createElement(e);return e.indexOf("-")>-1?vo[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:vo[e]=/HTMLUnknownElement/.test(n.toString())},D(Xt.options.directives,Vi),D(Xt.options.components,na),Xt.prototype.__patch__=W?Ei:E,Xt.prototype.$mount=function(e,n){return function(e,n,t){var o;e.$el=n,e.$options.render||(e.$options.render=me),et(e,"beforeMount"),o=function(){e._update(e._render(),t)},new Kn(e,o,E,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1;var i=e._preWatchers;if(i)for(var a=0;a<i.length;a++)i[a].run();return null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&W?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},W&&setTimeout((function(){H.devtools&&re&&re.emit("init",Xt)}),0);var oa=/[!'()*]/g,ia=function(e){return"%"+e.charCodeAt(0).toString(16)},aa=/%2C/g,ra=function(e){return encodeURIComponent(e).replace(oa,ia).replace(aa,",")};function sa(e){try{return decodeURIComponent(e)}catch(e){0}return e}var la=function(e){return null==e||"object"==typeof e?e:String(e)};function ca(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=sa(t.shift()),i=t.length>0?sa(t.join("=")):null;void 0===n[o]?n[o]=i:Array.isArray(n[o])?n[o].push(i):n[o]=[n[o],i]})),n):n}function da(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return ra(n);if(Array.isArray(t)){var o=[];return t.forEach((function(e){void 0!==e&&(null===e?o.push(ra(n)):o.push(ra(n)+"="+ra(e)))})),o.join("&")}return ra(n)+"="+ra(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var ua=/\/?$/;function pa(e,n,t,o){var i=o&&o.options.stringifyQuery,a=n.query||{};try{a=ma(a)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:a,params:n.params||{},fullPath:ga(n,i),matched:e?fa(e):[]};return t&&(r.redirectedFrom=ga(t,i)),Object.freeze(r)}function ma(e){if(Array.isArray(e))return e.map(ma);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=ma(e[t]);return n}return e}var ha=pa(null,{path:"/"});function fa(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function ga(e,n){var t=e.path,o=e.query;void 0===o&&(o={});var i=e.hash;return void 0===i&&(i=""),(t||"/")+(n||da)(o)+i}function ba(e,n,t){return n===ha?e===n:!!n&&(e.path&&n.path?e.path.replace(ua,"")===n.path.replace(ua,"")&&(t||e.hash===n.hash&&va(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&va(e.query,n.query)&&va(e.params,n.params))))}function va(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),o=Object.keys(n).sort();return t.length===o.length&&t.every((function(t,i){var a=e[t];if(o[i]!==t)return!1;var r=n[t];return null==a||null==r?a===r:"object"==typeof a&&"object"==typeof r?va(a,r):String(a)===String(r)}))}function ya(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var o in t.instances){var i=t.instances[o],a=t.enteredCbs[o];if(i&&a){delete t.enteredCbs[o];for(var r=0;r<a.length;r++)i._isBeingDestroyed||a[r](i)}}}}var ka={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,o=n.children,i=n.parent,a=n.data;a.routerView=!0;for(var r=i.$createElement,s=t.name,l=i.$route,c=i._routerViewCache||(i._routerViewCache={}),d=0,u=!1;i&&i._routerRoot!==i;){var p=i.$vnode?i.$vnode.data:{};p.routerView&&d++,p.keepAlive&&i._directInactive&&i._inactive&&(u=!0),i=i.$parent}if(a.routerViewDepth=d,u){var m=c[s],h=m&&m.component;return h?(m.configProps&&wa(h,a,m.route,m.configProps),r(h,a,o)):r()}var f=l.matched[d],g=f&&f.components[s];if(!f||!g)return c[s]=null,r();c[s]={component:g},a.registerRouteInstance=function(e,n){var t=f.instances[s];(n&&t!==e||!n&&t===e)&&(f.instances[s]=n)},(a.hook||(a.hook={})).prepatch=function(e,n){f.instances[s]=n.componentInstance},a.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[s]&&(f.instances[s]=e.componentInstance),ya(l)};var b=f.props&&f.props[s];return b&&(ta(c[s],{route:l,configProps:b}),wa(g,a,l,b)),r(g,a,o)}};function wa(e,n,t,o){var i=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,o);if(i){i=n.props=ta({},i);var a=n.attrs=n.attrs||{};for(var r in i)e.props&&r in e.props||(a[r]=i[r],delete i[r])}}function Sa(e,n,t){var o=e.charAt(0);if("/"===o)return e;if("?"===o||"#"===o)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var a=e.replace(/^\//,"").split("/"),r=0;r<a.length;r++){var s=a[r];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function xa(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Ia=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Ca=Ga,Pa=Da,Ma=function(e,n){return Ea(Da(e,n),n)},Aa=Ea,Oa=La,Ba=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Da(e,n){for(var t,o=[],i=0,a=0,r="",s=n&&n.delimiter||"/";null!=(t=Ba.exec(e));){var l=t[0],c=t[1],d=t.index;if(r+=e.slice(a,d),a=d+l.length,c)r+=c[1];else{var u=e[a],p=t[2],m=t[3],h=t[4],f=t[5],g=t[6],b=t[7];r&&(o.push(r),r="");var v=null!=p&&null!=u&&u!==p,y="+"===g||"*"===g,k="?"===g||"*"===g,w=t[2]||s,S=h||f;o.push({name:m||i++,prefix:p||"",delimiter:w,optional:k,repeat:y,partial:v,asterisk:!!b,pattern:S?Fa(S):b?".*":"[^"+Ua(w)+"]+?"})}}return a<e.length&&(r+=e.substr(a)),r&&o.push(r),o}function Ta(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Ea(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",Ra(n)));return function(n,o){for(var i="",a=n||{},r=(o||{}).pretty?Ta:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,d=a[l.name];if(null==d){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ia(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(c=r(d[u]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");i+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');i+=l.prefix+c}}else i+=l}return i}}function Ua(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Fa(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function _a(e,n){return e.keys=n,e}function Ra(e){return e&&e.sensitive?"":"i"}function La(e,n,t){Ia(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,i=!1!==t.end,a="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)a+=Ua(s);else{var l=Ua(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+l+c+")*"),a+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=Ua(t.delimiter||"/"),u=a.slice(-d.length)===d;return o||(a=(u?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=i?"$":o&&u?"":"(?="+d+"|$)",_a(new RegExp("^"+a,Ra(t)),n)}function Ga(e,n,t){return Ia(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)n.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return _a(e,n)}(e,n):Ia(e)?function(e,n,t){for(var o=[],i=0;i<e.length;i++)o.push(Ga(e[i],n,t).source);return _a(new RegExp("(?:"+o.join("|")+")",Ra(t)),n)}(e,n,t):function(e,n,t){return La(Da(e,t),n,t)}(e,n,t)}Ca.parse=Pa,Ca.compile=Ma,Ca.tokensToFunction=Aa,Ca.tokensToRegExp=Oa;var Na=Object.create(null);function za(e,n,t){n=n||{};try{var o=Na[e]||(Na[e]=Ca.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),o(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function Ha(e,n,t,o){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var a=(i=ta({},e)).params;return a&&"object"==typeof a&&(i.params=ta({},a)),i}if(!i.path&&i.params&&n){(i=ta({},i))._normalized=!0;var r=ta(ta({},n.params),i.params);if(n.name)i.name=n.name,i.params=r;else if(n.matched.length){var s=n.matched[n.matched.length-1].path;i.path=za(s,r,n.path)}else 0;return i}var l=function(e){var n="",t="",o=e.indexOf("#");o>=0&&(n=e.slice(o),e=e.slice(0,o));var i=e.indexOf("?");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{path:e,query:t,hash:n}}(i.path||""),c=n&&n.path||"/",d=l.path?Sa(l.path,c,t||i.append):c,u=function(e,n,t){void 0===n&&(n={});var o,i=t||ca;try{o=i(e||"")}catch(e){o={}}for(var a in n){var r=n[a];o[a]=Array.isArray(r)?r.map(la):la(r)}return o}(l.query,i.query,o&&o.options.parseQuery),p=i.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:d,query:u,hash:p}}var Va,ja=function(){},Ka={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,o=this.$route,i=t.resolve(this.to,o,this.append),a=i.location,r=i.route,s=i.href,l={},c=t.options.linkActiveClass,d=t.options.linkExactActiveClass,u=null==c?"router-link-active":c,p=null==d?"router-link-exact-active":d,m=null==this.activeClass?u:this.activeClass,h=null==this.exactActiveClass?p:this.exactActiveClass,f=r.redirectedFrom?pa(null,Ha(r.redirectedFrom),null,t):r;l[h]=ba(o,f,this.exactPath),l[m]=this.exact||this.exactPath?l[h]:function(e,n){return 0===e.path.replace(ua,"/").indexOf(n.path.replace(ua,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(o,f);var g=l[h]?this.ariaCurrentValue:null,b=function(e){Xa(e)&&(n.replace?t.replace(a,ja):t.push(a,ja))},v={click:Xa};Array.isArray(this.event)?this.event.forEach((function(e){v[e]=b})):v[this.event]=b;var y={class:l},k=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:r,navigate:b,isActive:l[m],isExactActive:l[h]});if(k){if(1===k.length)return k[0];if(k.length>1||!k.length)return 0===k.length?e():e("span",{},k)}if("a"===this.tag)y.on=v,y.attrs={href:s,"aria-current":g};else{var w=function e(n){var t;if(n)for(var o=0;o<n.length;o++){if("a"===(t=n[o]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var S=w.data=ta({},w.data);for(var x in S.on=S.on||{},S.on){var I=S.on[x];x in v&&(S.on[x]=Array.isArray(I)?I:[I])}for(var C in v)C in S.on?S.on[C].push(v[C]):S.on[C]=b;var P=w.data.attrs=ta({},w.data.attrs);P.href=s,P["aria-current"]=g}else y.on=v}return e(this.tag,y,this.$slots.default)}};function Xa(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var qa="undefined"!=typeof window;function Wa(e,n,t,o,i){var a=n||[],r=t||Object.create(null),s=o||Object.create(null);e.forEach((function(e){!function e(n,t,o,i,a,r){var s=i.path,l=i.name;0;var c=i.pathToRegexpOptions||{},d=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return xa(n.path+"/"+e)}(s,a,c.strict);"boolean"==typeof i.caseSensitive&&(c.sensitive=i.caseSensitive);var u={path:d,regex:Ya(d,c),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:r,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var a=r?xa(r+"/"+i.path):void 0;e(n,t,o,i,u,a)}));t[u.path]||(n.push(u.path),t[u.path]=u);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],m=0;m<p.length;++m){0;var h={path:p[m],children:i.children};e(n,t,o,h,a,u.path||"/")}l&&(o[l]||(o[l]=u))}(a,r,s,e,i)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:r,nameMap:s}}function Ya(e,n){return Ca(e,[],n)}function $a(e,n){var t=Wa(e),o=t.pathList,i=t.pathMap,a=t.nameMap;function r(e,t,r){var s=Ha(e,t,!1,n),c=s.name;if(c){var d=a[c];if(!d)return l(null,s);var u=d.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=za(d.path,s.params),l(d,s,r)}if(s.path){s.params={};for(var m=0;m<o.length;m++){var h=o[m],f=i[h];if(Qa(f.regex,s.path,s.params))return l(f,s,r)}}return l(null,s)}function s(e,t){var o=e.redirect,i="function"==typeof o?o(pa(e,t,null,n)):o;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var s=i,c=s.name,d=s.path,u=t.query,p=t.hash,m=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,m=s.hasOwnProperty("params")?s.params:m,c){a[c];return r({_normalized:!0,name:c,query:u,hash:p,params:m},void 0,t)}if(d){var h=function(e,n){return Sa(e,n.parent?n.parent.path:"/",!0)}(d,e);return r({_normalized:!0,path:za(h,m),query:u,hash:p},void 0,t)}return l(null,t)}function l(e,t,o){return e&&e.redirect?s(e,o||t):e&&e.matchAs?function(e,n,t){var o=r({_normalized:!0,path:za(t,n.params)});if(o){var i=o.matched,a=i[i.length-1];return n.params=o.params,l(a,n)}return l(null,n)}(0,t,e.matchAs):pa(e,t,o,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?a[e]:void 0;Wa([n||e],o,i,a,t),t&&t.alias.length&&Wa(t.alias.map((function(e){return{path:e,children:[n]}})),o,i,a,t)},getRoutes:function(){return o.map((function(e){return i[e]}))},addRoutes:function(e){Wa(e,o,i,a)}}}function Qa(e,n,t){var o=n.match(e);if(!o)return!1;if(!t)return!0;for(var i=1,a=o.length;i<a;++i){var r=e.keys[i-1];r&&(t[r.name||"pathMatch"]="string"==typeof o[i]?sa(o[i]):o[i])}return!0}var Ja=qa&&window.performance&&window.performance.now?window.performance:Date;function Za(){return Ja.now().toFixed(3)}var er=Za();function nr(){return er}function tr(e){return er=e}var or=Object.create(null);function ir(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=ta({},window.history.state);return t.key=nr(),window.history.replaceState(t,"",n),window.addEventListener("popstate",sr),function(){window.removeEventListener("popstate",sr)}}function ar(e,n,t,o){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var a=function(){var e=nr();if(e)return or[e]}(),r=i.call(e,n,t,o?a:null);r&&("function"==typeof r.then?r.then((function(e){pr(e,a)})).catch((function(e){0})):pr(r,a))}))}}function rr(){var e=nr();e&&(or[e]={x:window.pageXOffset,y:window.pageYOffset})}function sr(e){rr(),e.state&&e.state.key&&tr(e.state.key)}function lr(e){return dr(e.x)||dr(e.y)}function cr(e){return{x:dr(e.x)?e.x:window.pageXOffset,y:dr(e.y)?e.y:window.pageYOffset}}function dr(e){return"number"==typeof e}var ur=/^#\d/;function pr(e,n){var t,o="object"==typeof e;if(o&&"string"==typeof e.selector){var i=ur.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var a=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-t.left-n.x,y:o.top-t.top-n.y}}(i,a={x:dr((t=a).x)?t.x:0,y:dr(t.y)?t.y:0})}else lr(e)&&(n=cr(e))}else o&&lr(e)&&(n=cr(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var mr,hr=qa&&((-1===(mr=window.navigator.userAgent).indexOf("Android 2.")&&-1===mr.indexOf("Android 4.0")||-1===mr.indexOf("Mobile Safari")||-1!==mr.indexOf("Chrome")||-1!==mr.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fr(e,n){rr();var t=window.history;try{if(n){var o=ta({},t.state);o.key=nr(),t.replaceState(o,"",e)}else t.pushState({key:tr(Za())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function gr(e){fr(e,!0)}var br={redirected:2,aborted:4,cancelled:8,duplicated:16};function vr(e,n){return kr(e,n,br.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return wr.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function yr(e,n){return kr(e,n,br.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function kr(e,n,t,o){var i=new Error(o);return i._isRouter=!0,i.from=e,i.to=n,i.type=t,i}var wr=["params","query","hash"];function Sr(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function xr(e,n){return Sr(e)&&e._isRouter&&(null==n||e.type===n)}function Ir(e,n,t){var o=function(i){i>=e.length?t():e[i]?n(e[i],(function(){o(i+1)})):o(i+1)};o(0)}function Cr(e){return function(n,t,o){var i=!1,a=0,r=null;Pr(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){i=!0,a++;var l,c=Or((function(n){var i;((i=n).__esModule||Ar&&"Module"===i[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:Va.extend(n),t.components[s]=n,--a<=0&&o()})),d=Or((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=Sr(e)?e:new Error(n),o(r))}));try{l=e(c,d)}catch(e){d(e)}if(l)if("function"==typeof l.then)l.then(c,d);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,d)}}})),i||o()}}function Pr(e,n){return Mr(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Mr(e){return Array.prototype.concat.apply([],e)}var Ar="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Or(e){var n=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!n)return n=!0,e.apply(this,t)}}var Br=function(e,n){this.router=e,this.base=function(e){if(!e)if(qa){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=ha,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Dr(e,n,t,o){var i=Pr(e,(function(e,o,i,a){var r=function(e,n){"function"!=typeof e&&(e=Va.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,o,i,a)})):t(r,o,i,a)}));return Mr(o?i.reverse():i)}function Tr(e,n){if(n)return function(){return e.apply(n,arguments)}}Br.prototype.listen=function(e){this.cb=e},Br.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Br.prototype.onError=function(e){this.errorCbs.push(e)},Br.prototype.transitionTo=function(e,n,t){var o,i=this;try{o=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var a=this.current;this.confirmTransition(o,(function(){i.updateRoute(o),n&&n(o),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(o,a)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(o)})))}),(function(e){t&&t(e),e&&!i.ready&&(xr(e,br.redirected)&&a===ha||(i.ready=!0,i.readyErrorCbs.forEach((function(n){n(e)}))))}))},Br.prototype.confirmTransition=function(e,n,t){var o=this,i=this.current;this.pending=e;var a,r,s=function(e){!xr(e)&&Sr(e)&&(o.errorCbs.length?o.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,c=i.matched.length-1;if(ba(e,i)&&l===c&&e.matched[l]===i.matched[c])return this.ensureURL(),e.hash&&ar(this.router,i,e,!1),s(((r=kr(a=i,e,br.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",r));var d=function(e,n){var t,o=Math.max(e.length,n.length);for(t=0;t<o&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),u=d.updated,p=d.deactivated,m=d.activated,h=[].concat(function(e){return Dr(e,"beforeRouteLeave",Tr,!0)}(p),this.router.beforeHooks,function(e){return Dr(e,"beforeRouteUpdate",Tr)}(u),m.map((function(e){return e.beforeEnter})),Cr(m)),f=function(n,t){if(o.pending!==e)return s(yr(i,e));try{n(e,i,(function(n){!1===n?(o.ensureURL(!0),s(function(e,n){return kr(e,n,br.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(i,e))):Sr(n)?(o.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(vr(i,e)),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)}))}catch(e){s(e)}};Ir(h,f,(function(){Ir(function(e){return Dr(e,"beforeRouteEnter",(function(e,n,t,o){return function(e,n,t){return function(o,i,a){return e(o,i,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),a(e)}))}}(e,t,o)}))}(m).concat(o.router.resolveHooks),f,(function(){if(o.pending!==e)return s(yr(i,e));o.pending=null,n(e),o.router.app&&o.router.app.$nextTick((function(){ya(e)}))}))}))},Br.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Br.prototype.setupListeners=function(){},Br.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=ha,this.pending=null};var Er=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Ur(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,o=hr&&t;o&&this.listeners.push(ir());var i=function(){var t=e.current,i=Ur(e.base);e.current===ha&&i===e._startLocation||e.transitionTo(i,(function(e){o&&ar(n,e,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){fr(xa(o.base+e.fullPath)),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){gr(xa(o.base+e.fullPath)),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Ur(this.base)!==this.current.fullPath){var n=xa(this.base+this.current.fullPath);e?fr(n):gr(n)}},n.prototype.getCurrentLocation=function(){return Ur(this.base)},n}(Br);function Ur(e){var n=window.location.pathname,t=n.toLowerCase(),o=e.toLowerCase();return!e||t!==o&&0!==t.indexOf(xa(o+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var Fr=function(e){function n(n,t,o){e.call(this,n,t),o&&function(e){var n=Ur(e);if(!/^\/#/.test(n))return window.location.replace(xa(e+"/#"+n)),!0}(this.base)||_r()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=hr&&n;t&&this.listeners.push(ir());var o=function(){var n=e.current;_r()&&e.transitionTo(Rr(),(function(o){t&&ar(e.router,o,n,!0),hr||Nr(o.fullPath)}))},i=hr?"popstate":"hashchange";window.addEventListener(i,o),this.listeners.push((function(){window.removeEventListener(i,o)}))}},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){Gr(e.fullPath),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){Nr(e.fullPath),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Rr()!==n&&(e?Gr(n):Nr(n))},n.prototype.getCurrentLocation=function(){return Rr()},n}(Br);function _r(){var e=Rr();return"/"===e.charAt(0)||(Nr("/"+e),!1)}function Rr(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Lr(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function Gr(e){hr?fr(Lr(e)):window.location.hash=e}function Nr(e){hr?gr(Lr(e)):window.location.replace(Lr(e))}var zr=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index+1).concat(e),o.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var e=n.current;n.index=t,n.updateRoute(o),n.router.afterHooks.forEach((function(n){n&&n(o,e)}))}),(function(e){xr(e,br.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Br),Hr=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=$a(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!hr&&!1!==e.fallback,this.fallback&&(n="hash"),qa||(n="abstract"),this.mode=n,n){case"history":this.history=new Er(this,e.base);break;case"hash":this.history=new Fr(this,e.base,this.fallback);break;case"abstract":this.history=new zr(this,e.base);break;default:0}},Vr={currentRoute:{configurable:!0}};Hr.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Vr.currentRoute.get=function(){return this.history&&this.history.current},Hr.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Er||t instanceof Fr){var o=function(e){t.setupListeners(),function(e){var o=t.current,i=n.options.scrollBehavior;hr&&i&&"fullPath"in e&&ar(n,e,o,!1)}(e)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},Hr.prototype.beforeEach=function(e){return Kr(this.beforeHooks,e)},Hr.prototype.beforeResolve=function(e){return Kr(this.resolveHooks,e)},Hr.prototype.afterEach=function(e){return Kr(this.afterHooks,e)},Hr.prototype.onReady=function(e,n){this.history.onReady(e,n)},Hr.prototype.onError=function(e){this.history.onError(e)},Hr.prototype.push=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.push(e,n,t)}));this.history.push(e,n,t)},Hr.prototype.replace=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.replace(e,n,t)}));this.history.replace(e,n,t)},Hr.prototype.go=function(e){this.history.go(e)},Hr.prototype.back=function(){this.go(-1)},Hr.prototype.forward=function(){this.go(1)},Hr.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},Hr.prototype.resolve=function(e,n,t){var o=Ha(e,n=n||this.history.current,t,this),i=this.match(o,n),a=i.redirectedFrom||i.fullPath;return{location:o,route:i,href:function(e,n,t){var o="hash"===t?"#"+n:n;return e?xa(e+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:i}},Hr.prototype.getRoutes=function(){return this.matcher.getRoutes()},Hr.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==ha&&this.history.transitionTo(this.history.getCurrentLocation())},Hr.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==ha&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Hr.prototype,Vr);var jr=Hr;function Kr(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}Hr.install=function e(n){if(!e.installed||Va!==n){e.installed=!0,Va=n;var t=function(e){return void 0!==e},o=function(e,n){var o=e.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",ka),n.component("RouterLink",Ka);var i=n.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Hr.version="3.6.5",Hr.isNavigationFailure=xr,Hr.NavigationFailureType=br,Hr.START_LOCATION=ha,qa&&window.Vue&&window.Vue.use(Hr);t(101);t(93),t(128);var Xr={NotFound:()=>t.e(36).then(t.bind(null,467)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,466))},qr={"v-5f435ea6":()=>t.e(37).then(t.bind(null,471)),"v-17876ab6":()=>t.e(38).then(t.bind(null,472)),"v-534eac26":()=>t.e(39).then(t.bind(null,473)),"v-63ef920e":()=>t.e(40).then(t.bind(null,474)),"v-2817348d":()=>t.e(41).then(t.bind(null,475)),"v-05f885ed":()=>t.e(42).then(t.bind(null,476)),"v-30c73b20":()=>t.e(43).then(t.bind(null,477)),"v-c594cb12":()=>t.e(44).then(t.bind(null,478)),"v-5a347704":()=>t.e(13).then(t.bind(null,479)),"v-b3d44012":()=>t.e(45).then(t.bind(null,480)),"v-6ff798cd":()=>t.e(46).then(t.bind(null,481)),"v-2dbdfc6e":()=>t.e(47).then(t.bind(null,482)),"v-7bb6e866":()=>t.e(15).then(t.bind(null,483)),"v-441d1fbf":()=>t.e(28).then(t.bind(null,484)),"v-1586d58d":()=>t.e(29).then(t.bind(null,485)),"v-3d24dfa6":()=>t.e(48).then(t.bind(null,486)),"v-330d09a7":()=>t.e(49).then(t.bind(null,487)),"v-5ff6c07a":()=>t.e(50).then(t.bind(null,488)),"v-59a4f3a6":()=>t.e(51).then(t.bind(null,489)),"v-87f19466":()=>t.e(52).then(t.bind(null,490)),"v-b45995c4":()=>t.e(14).then(t.bind(null,491)),"v-010da74d":()=>t.e(6).then(t.bind(null,492)),"v-1ab60666":()=>t.e(30).then(t.bind(null,493)),"v-2e394ce3":()=>t.e(53).then(t.bind(null,494)),"v-1ae073bb":()=>t.e(31).then(t.bind(null,495)),"v-2fe7bc2d":()=>t.e(54).then(t.bind(null,496)),"v-31cf8b6d":()=>t.e(55).then(t.bind(null,497)),"v-71e7376d":()=>t.e(56).then(t.bind(null,498)),"v-3a21b4ad":()=>t.e(57).then(t.bind(null,499)),"v-655aff7f":()=>t.e(25).then(t.bind(null,500)),"v-4694779a":()=>t.e(58).then(t.bind(null,501)),"v-3730ed66":()=>t.e(3).then(t.bind(null,502)),"v-4b67d32d":()=>t.e(20).then(t.bind(null,503)),"v-a0034d84":()=>t.e(59).then(t.bind(null,504)),"v-1d1cd917":()=>t.e(60).then(t.bind(null,505)),"v-094f9f8d":()=>t.e(4).then(t.bind(null,506)),"v-3720f90d":()=>t.e(18).then(t.bind(null,507)),"v-5c2963cd":()=>t.e(26).then(t.bind(null,508)),"v-6e88b902":()=>t.e(19).then(t.bind(null,509)),"v-76c4d0ed":()=>t.e(7).then(t.bind(null,510)),"v-6a3191c1":()=>t.e(16).then(t.bind(null,511)),"v-6a91c3ed":()=>t.e(5).then(t.bind(null,512)),"v-2d36c3cd":()=>t.e(32).then(t.bind(null,513)),"v-5a9fa515":()=>t.e(61).then(t.bind(null,514)),"v-fb5f9066":()=>t.e(62).then(t.bind(null,515)),"v-800849a6":()=>t.e(63).then(t.bind(null,516)),"v-8f35bea6":()=>t.e(64).then(t.bind(null,517)),"v-b6c24aaa":()=>t.e(11).then(t.bind(null,518)),"v-dca255e6":()=>t.e(27).then(t.bind(null,519)),"v-0be25d32":()=>t.e(10).then(t.bind(null,520)),"v-526d6785":()=>t.e(33).then(t.bind(null,521)),"v-381957ff":()=>t.e(34).then(t.bind(null,522)),"v-457daeed":()=>t.e(17).then(t.bind(null,523)),"v-4e3122ad":()=>t.e(12).then(t.bind(null,524)),"v-ca48b55a":()=>t.e(8).then(t.bind(null,525)),"v-e6d98926":()=>t.e(65).then(t.bind(null,526)),"v-3a54b007":()=>t.e(9).then(t.bind(null,527))};function Wr(e){const n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}const Yr=/-(\w)/g,$r=Wr(e=>e.replace(Yr,(e,n)=>n?n.toUpperCase():"")),Qr=/\B([A-Z])/g,Jr=Wr(e=>e.replace(Qr,"-$1").toLowerCase()),Zr=Wr(e=>e.charAt(0).toUpperCase()+e.slice(1));function es(e,n){if(!n)return;if(e(n))return e(n);return n.includes("-")?e(Zr($r(n))):e(Zr(n))||e(Jr(n))}const ns=Object.assign({},Xr,qr),ts=e=>ns[e],os=e=>qr[e],is=e=>Xr[e],as=e=>Xt.component(e);function rs(e){return es(os,e)}function ss(e){return es(is,e)}function ls(e){return es(ts,e)}function cs(e){return es(as,e)}function ds(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!cs(e)&&ls(e)){const n=await ls(e)();Xt.component(e,n.default)}}))}function us(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var ps=t(90),ms=t.n(ps),hs=t(91),fs=t.n(hs),gs={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,n])=>n),this.$ssrContext){const n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map(e=>{let n="<meta";return Object.keys(e).forEach(t=>{n+=` ${t}="${fs()(e[t])}"`}),n+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vs(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=ys(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return ms()([{name:"description",content:this.$description}],e,this.siteMeta,ks)},updateCanonicalLink(){bs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){ys(null,this.currentMetaTags),bs()}};function bs(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function vs(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function ys(e,n){if(n&&[...n].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const n=document.createElement("meta");return Object.keys(e).forEach(t=>{n.setAttribute(t,e[t])}),document.head.appendChild(n),n})}function ks(e){for(const n of["name","property","itemprop"])if(e.hasOwnProperty(n))return e[n]+n;return JSON.stringify(e)}var ws=t(24),Ss=t.n(ws),xs={mounted(){Ss.a.configure({showSpinner:!1}),this.$router.beforeEach((e,n,t)=>{e.path===n.path||Xt.component(e.name)||Ss.a.start(),t()}),this.$router.afterEach(()=>{Ss.a.done(),this.isSidebarOpen=!1})}},Is=t(92),Cs=t.n(Is),Ps={mounted(){Cs.a.polyfill()}},Ms=(t(235),Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}),As=function(e){return"IMG"===e.tagName},Os=function(e){return e&&1===e.nodeType},Bs=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Ds=function(e){try{return Array.isArray(e)?e.filter(As):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(As):Os(e)?[e].filter(As):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(As):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},Ts=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},Es=function(e){var n=e.getBoundingClientRect(),t=n.top,o=n.left,i=n.width,a=n.height,r=e.cloneNode(),s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return r.removeAttribute("id"),r.style.position="absolute",r.style.top=t+s+"px",r.style.left=o+l+"px",r.style.width=i+"px",r.style.height=a+"px",r.style.transform="",r},Us=function(e,n){var t=Ms({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var o=document.createEvent("CustomEvent");return o.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),o};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&o.firstChild?o.insertBefore(i,o.firstChild):o.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Fs=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=window.Promise||function(e){function n(){}e(n,n)},i=function(e){var n=e.target;n!==C?-1!==y.indexOf(n)&&f({target:n}):h()},a=function(){if(!w&&I.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(S-e)>x.scrollOffset&&setTimeout(h,150)}},r=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||h()},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(C.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=Ms({},x.container,e.container)),e.template){var t=Os(e.template)?e.template:document.querySelector(e.template);n.template=t}return x=Ms({},x,n),y.forEach((function(e){e.dispatchEvent(Us("medium-zoom:update",{detail:{zoom:P}}))})),P},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Ms({},x,n))},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var o=n.reduce((function(e,n){return[].concat(e,Ds(n))}),[]);return o.filter((function(e){return-1===y.indexOf(e)})).forEach((function(e){y.push(e),e.classList.add("medium-zoom-image")})),k.forEach((function(e){var n=e.type,t=e.listener,i=e.options;o.forEach((function(e){e.addEventListener(n,t,i)}))})),P},d=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];I.zoomed&&h();var o=n.length>0?n.reduce((function(e,n){return[].concat(e,Ds(n))}),[]):y;return o.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Us("medium-zoom:detach",{detail:{zoom:P}}))})),y=y.filter((function(e){return-1===o.indexOf(e)})),P},u=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return y.forEach((function(o){o.addEventListener("medium-zoom:"+e,n,t)})),k.push({type:"medium-zoom:"+e,listener:n,options:t}),P},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return y.forEach((function(o){o.removeEventListener("medium-zoom:"+e,n,t)})),k=k.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),P},m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(x.container)if(x.container instanceof Object)n=(e=Ms({},e,x.container)).width-e.left-e.right-2*x.margin,t=e.height-e.top-e.bottom-2*x.margin;else{var o=(Os(x.container)?x.container:document.querySelector(x.container)).getBoundingClientRect(),i=o.width,a=o.height,r=o.left,s=o.top;e=Ms({},e,{width:i,height:a,left:r,top:s})}n=n||e.width-2*x.margin,t=t||e.height-2*x.margin;var l=I.zoomedHd||I.original,c=Bs(l)?n:l.naturalWidth||n,d=Bs(l)?t:l.naturalHeight||t,u=l.getBoundingClientRect(),p=u.top,m=u.left,h=u.width,f=u.height,g=Math.min(c,n)/h,b=Math.min(d,t)/f,v=Math.min(g,b),y="scale("+v+") translate3d("+((n-h)/2-m+x.margin+e.left)/v+"px, "+((t-f)/2-p+x.margin+e.top)/v+"px, 0)";I.zoomed.style.transform=y,I.zoomedHd&&(I.zoomedHd.style.transform=y)};return new o((function(e){if(n&&-1===y.indexOf(n))e(P);else{if(I.zoomed)e(P);else{if(n)I.original=n;else{if(!(y.length>0))return void e(P);var o=y;I.original=o[0]}if(I.original.dispatchEvent(Us("medium-zoom:open",{detail:{zoom:P}})),S=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,w=!0,I.zoomed=Es(I.original),document.body.appendChild(C),x.template){var i=Os(x.template)?x.template:document.querySelector(x.template);I.template=document.createElement("div"),I.template.appendChild(i.content.cloneNode(!0)),document.body.appendChild(I.template)}if(document.body.appendChild(I.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),I.original.classList.add("medium-zoom-image--hidden"),I.zoomed.classList.add("medium-zoom-image--opened"),I.zoomed.addEventListener("click",h),I.zoomed.addEventListener("transitionend",(function n(){w=!1,I.zoomed.removeEventListener("transitionend",n),I.original.dispatchEvent(Us("medium-zoom:opened",{detail:{zoom:P}})),e(P)})),I.original.getAttribute("data-zoom-src")){I.zoomedHd=I.zoomed.cloneNode(),I.zoomedHd.removeAttribute("srcset"),I.zoomedHd.removeAttribute("sizes"),I.zoomedHd.src=I.zoomed.getAttribute("data-zoom-src"),I.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+I.zoomedHd.src),I.zoomedHd=null,t()};var a=setInterval((function(){I.zoomedHd.complete&&(clearInterval(a),I.zoomedHd.classList.add("medium-zoom-image--opened"),I.zoomedHd.addEventListener("click",h),document.body.appendChild(I.zoomedHd),t())}),10)}else if(I.original.hasAttribute("srcset")){I.zoomedHd=I.zoomed.cloneNode(),I.zoomedHd.removeAttribute("sizes"),I.zoomedHd.removeAttribute("loading");var r=I.zoomedHd.addEventListener("load",(function(){I.zoomedHd.removeEventListener("load",r),I.zoomedHd.classList.add("medium-zoom-image--opened"),I.zoomedHd.addEventListener("click",h),document.body.appendChild(I.zoomedHd),t()}))}else t()}}}))},h=function(){return new o((function(e){if(!w&&I.original){w=!0,document.body.classList.remove("medium-zoom--opened"),I.zoomed.style.transform="",I.zoomedHd&&(I.zoomedHd.style.transform=""),I.template&&(I.template.style.transition="opacity 150ms",I.template.style.opacity=0),I.original.dispatchEvent(Us("medium-zoom:close",{detail:{zoom:P}})),I.zoomed.addEventListener("transitionend",(function n(){I.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(I.zoomed),I.zoomedHd&&document.body.removeChild(I.zoomedHd),document.body.removeChild(C),I.zoomed.classList.remove("medium-zoom-image--opened"),I.template&&document.body.removeChild(I.template),w=!1,I.zoomed.removeEventListener("transitionend",n),I.original.dispatchEvent(Us("medium-zoom:closed",{detail:{zoom:P}})),I.original=null,I.zoomed=null,I.zoomedHd=null,I.template=null,e(P)}))}else e(P)}))},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return I.original?h():m({target:n})},g=function(){return x},b=function(){return y},v=function(){return I.original},y=[],k=[],w=!1,S=0,x=t,I={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?x=n:(n||"string"==typeof n)&&c(n),x=Ms({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},x);var C=Ts(x.background);document.addEventListener("click",i),document.addEventListener("keyup",r),document.addEventListener("scroll",a),window.addEventListener("resize",h);var P={open:m,close:h,toggle:f,update:s,clone:l,attach:c,detach:d,on:u,off:p,getOptions:g,getImages:b,getZoomedImage:v};return P},_s={data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=Fs(".theme-succinct-content :not(a) > img",{background:"var(--bodyBgColor)"})},1e3)}}},Rs=t(23),Ls=t.n(Rs),Gs=[gs,xs,Ps,_s,{mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:Ls()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),n=[].slice.call(document.querySelectorAll(".header-anchor")).filter(n=>e.some(e=>e.hash===n.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let e=0;e<n.length;e++){const a=n[e],r=n[e+1],s=0===e&&0===t||t>=a.parentElement.offsetTop+10&&(!r||t<r.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(i===o)for(let t=e+1;t<n.length;t++)if(l===decodeURIComponent(n[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}}],Ns={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return us("layout",e),Xt.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},zs=t(10),Hs=Object(zs.a)(Ns,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),e[n].push(...t);break;default:throw new Error("Unknown option name.")}}(Hs,"mixins",Gs);const Vs=[{name:"v-5f435ea6",path:"/AMD/AMD-USB-map.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-5f435ea6").then(t)}},{name:"v-17876ab6",path:"/CONTRIBUTING.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-17876ab6").then(t)}},{name:"v-534eac26",path:"/LICENSE.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-534eac26").then(t)}},{name:"v-63ef920e",path:"/",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-63ef920e").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-2817348d",path:"/clover-conversion/Clover-boot-arg.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-2817348d").then(t)}},{name:"v-05f885ed",path:"/clover-conversion/Clover-config.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-05f885ed").then(t)}},{name:"v-30c73b20",path:"/clover-conversion/",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-30c73b20").then(t)}},{path:"/clover-conversion/index.html",redirect:"/clover-conversion/"},{name:"v-c594cb12",path:"/clover-conversion/clover-efi.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-c594cb12").then(t)}},{name:"v-5a347704",path:"/config.plist/",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-5a347704").then(t)}},{path:"/config.plist/index.html",redirect:"/config.plist/"},{name:"v-b3d44012",path:"/clover-conversion/clover-patch.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-b3d44012").then(t)}},{name:"v-6ff798cd",path:"/config.plist/acpi.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-6ff798cd").then(t)}},{name:"v-2dbdfc6e",path:"/config.plist/bios-settings.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-2dbdfc6e").then(t)}},{name:"v-7bb6e866",path:"/config.plist/booter.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-7bb6e866").then(t)}},{name:"v-441d1fbf",path:"/config.plist/device-properties.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-441d1fbf").then(t)}},{name:"v-1586d58d",path:"/config.plist/kernel.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-1586d58d").then(t)}},{name:"v-3d24dfa6",path:"/config.plist/misc.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-3d24dfa6").then(t)}},{name:"v-330d09a7",path:"/config.plist/nvram.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-330d09a7").then(t)}},{name:"v-5ff6c07a",path:"/config.plist/platform-info.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-5ff6c07a").then(t)}},{name:"v-59a4f3a6",path:"/config.plist/security.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-59a4f3a6").then(t)}},{name:"v-87f19466",path:"/config.plist/uefi.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-87f19466").then(t)}},{name:"v-b45995c4",path:"/extras/big-sur/",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-b45995c4").then(t)}},{path:"/extras/big-sur/index.html",redirect:"/extras/big-sur/"},{name:"v-010da74d",path:"/extras/big-sur/fusion.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-010da74d").then(t)}},{name:"v-1ab60666",path:"/extras/big-sur/virtualbox.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-1ab60666").then(t)}},{name:"v-2e394ce3",path:"/extras/big-sur/workstation.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-2e394ce3").then(t)}},{name:"v-1ae073bb",path:"/extras/kaslr-fix.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-1ae073bb").then(t)}},{name:"v-2fe7bc2d",path:"/extras/legacy.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-2fe7bc2d").then(t)}},{name:"v-31cf8b6d",path:"/extras/monterey.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-31cf8b6d").then(t)}},{name:"v-71e7376d",path:"/extras/smbios-support.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-71e7376d").then(t)}},{name:"v-3a21b4ad",path:"/extras/smbios.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-3a21b4ad").then(t)}},{name:"v-655aff7f",path:"/extras/spoof.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-655aff7f").then(t)}},{name:"v-4694779a",path:"/extras/ventura.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-4694779a").then(t)}},{name:"v-3730ed66",path:"/find-hardware.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-3730ed66").then(t)}},{name:"v-4b67d32d",path:"/installation/installation-process.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-4b67d32d").then(t)}},{name:"v-a0034d84",path:"/installer-guide/",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-a0034d84").then(t)}},{path:"/installer-guide/index.html",redirect:"/installer-guide/"},{name:"v-1d1cd917",path:"/installer-guide/legacy-mac-install.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-1d1cd917").then(t)}},{name:"v-094f9f8d",path:"/installer-guide/linux-install.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-094f9f8d").then(t)}},{name:"v-3720f90d",path:"/installer-guide/mac-install-dmg.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-3720f90d").then(t)}},{name:"v-5c2963cd",path:"/installer-guide/mac-install-pkg.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-5c2963cd").then(t)}},{name:"v-6e88b902",path:"/installer-guide/mac-install-recovery.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-6e88b902").then(t)}},{name:"v-76c4d0ed",path:"/installer-guide/mac-install.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-76c4d0ed").then(t)}},{name:"v-6a3191c1",path:"/installer-guide/opencore-efi.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-6a3191c1").then(t)}},{name:"v-6a91c3ed",path:"/installer-guide/windows-install.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-6a91c3ed").then(t)}},{name:"v-2d36c3cd",path:"/ktext.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-2d36c3cd").then(t)}},{name:"v-5a9fa515",path:"/macos-limits.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-5a9fa515").then(t)}},{name:"v-fb5f9066",path:"/misc/credit.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-fb5f9066").then(t)}},{name:"v-800849a6",path:"/prerequisites.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-800849a6").then(t)}},{name:"v-8f35bea6",path:"/terminology.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-8f35bea6").then(t)}},{name:"v-b6c24aaa",path:"/troubleshooting/boot.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-b6c24aaa").then(t)}},{name:"v-dca255e6",path:"/troubleshooting/debug.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-dca255e6").then(t)}},{name:"v-0be25d32",path:"/troubleshooting/extended/kernel-issues.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-0be25d32").then(t)}},{name:"v-526d6785",path:"/troubleshooting/extended/misc-issues.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-526d6785").then(t)}},{name:"v-381957ff",path:"/troubleshooting/extended/opencore-issues.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-381957ff").then(t)}},{name:"v-457daeed",path:"/troubleshooting/extended/post-issues.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-457daeed").then(t)}},{name:"v-4e3122ad",path:"/troubleshooting/extended/userspace-issues.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-4e3122ad").then(t)}},{name:"v-ca48b55a",path:"/troubleshooting/kernel-debugging.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-ca48b55a").then(t)}},{name:"v-e6d98926",path:"/troubleshooting/troubleshooting.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-e6d98926").then(t)}},{name:"v-3a54b007",path:"/why-oc.html",component:Hs,beforeEnter:(e,n,t)=>{ds("Layout","v-3a54b007").then(t)}},{path:"*",component:Hs}],js={title:"",description:"",base:"/OpenCore-Install-Guide/",headTags:[["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"'stylesheet",href:"/OpenCore-Install-Guide/styles/website.css"}]],pages:[{title:"AMD USB Map",frontmatter:{search:!1},regularPath:"/AMD/AMD-USB-map.html",relativePath:"AMD/AMD-USB-map.md",key:"v-5f435ea6",path:"/AMD/AMD-USB-map.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# AMD USB Map\n\nFor those looking for the AMD USB map guide, it has been moved here:\n\n * USB Map guide\n\nFor a more user-friendly guide, see Aleksander's post: Why you need to care about USB mapping",normalizedContent:"# amd usb map\n\nfor those looking for the amd usb map guide, it has been moved here:\n\n * usb map guide\n\nfor a more user-friendly guide, see aleksander's post: why you need to care about usb mapping",charsets:{}},{title:"Supporting the guides",frontmatter:{},regularPath:"/CONTRIBUTING.html",relativePath:"CONTRIBUTING.md",key:"v-17876ab6",path:"/CONTRIBUTING.html",headers:[{level:2,title:"Contributing via Issues",slug:"contributing-via-issues",normalizedTitle:"contributing via issues",charIndex:246},{level:2,title:"Contributing via PRs",slug:"contributing-via-prs",normalizedTitle:"contributing via prs",charIndex:273},{level:3,title:"How to Contribute",slug:"how-to-contribute",normalizedTitle:"how to contribute",charIndex:299},{level:3,title:"Tips",slug:"tips",normalizedTitle:"tips",charIndex:322},{level:2,title:"Contributing via Translations",slug:"contributing-via-translations",normalizedTitle:"contributing via translations",charIndex:330}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Contributing via Issues Contributing via PRs How to Contribute Tips Contributing via Translations",content:"# Supporting the guides\n\nNote: This is a community run guide which is not officially endorsed by Acidanthera. Please do not bug Acidanthera with issues about this guide.\n\nWant to help support the guide? Well there's some ways you can help!\n\n\n\n * Contributing via Issues\n * Contributing via PRs\n   * How to Contribute\n   * Tips\n * Contributing via Translations\n\n\n\nNote: For those wanting to contribute financially, we seriously appreciate it but we're a non-profit organization. We do this to teach, not to make money. If you have some money left over we highly recommend donating it to a charity. Crohn's and Colitis Canada is one we recommend if you have none on mind.\n\n\n# Contributing via Issues\n\nContributing via Issues is pretty simple but there are some rules:\n\n * Keep issues tab dedicated to guides issues only, no personal hackintosh issues. It is not a place to discuss installation issues.\n * If for a typo or better clarification, please indicate what page it was on. Would appreciate not going for a scavenger hunt on where these issues are.\n\nYou can find the bugtracker here: Bugtracker\n\n\n# Contributing via PRs\n\nSome guidelines when contributing via PRs:\n\n * Use your brain (please).\n * Proofread your submissions.\n * Pull Requests can be denied if we feel it does not fit or has inaccurate information. We will generally tell you why it is rejected though or ask for revisions.\n   * We would also appreciate sources for any bigger commits to make it easier on us to verify the info you provide is valid\n * Images must be hosted locally in the repo under the ../images/ folder\n * Your PR must be run through a markdown lint and have all issues fixed.\n * In general, try to avoid using \"non-Acidanthera\" tools when possible. Generally we want to avoid use of third-party tools - though if it's impossible otherwise, then you can link it.\n   * Tools explicitly banned:\n     * UniBeast, MultiBeast and KextBeast\n       * More info can be found here: Tonymacx86-stance\n     * TransMac\n       * Know for creating borked USB drives\n     * Niresh Installers\n       * We'd like to avoid piracy with the guides\n\n\n# How to Contribute\n\nBest way to test your commits and make sure they are formatted correctly is by downloading Node.js then running npm install to install dependencies. When you run npm run dev, it will set up a local webserver which you can connect to view the changes you made. npm test will throw any errors at you about formatting and spellchecking as well. If you want markdownlint to automatically attempt to fix linting, run npm run fix-lint.\n\nSimple step-by-steps:\n\n * Fork this repo\n * Install the required tools:\n   * Node.js\n * Make your changes.\n * Build the site:\n   * npm install (To install all the required plugins)\n   * npm run dev (Preview the site)\n     * Can be found at http://localhost:8080\n * Check linting and spellcheck:\n   * npm test\n   * npm run lint and npm run spellcheck (to run the tests individually)\n   * npm run fix-lint (To fix any potential issues)\n   * For words not supported by the default spellcheck, please add them to the dictionary.txt and run npm run sort-dict\n\n\n# Tips\n\nSome tools that make contributing a bit easier:\n\n * Visual Studio Code\n * Typora for real time markdown rendering.\n * TextMate for easy and powerful mass find/replace.\n * GitHub Desktop for more user friendly GUI.\n\n\n# Contributing via Translations\n\nWhile Dortania's guide are primarily English based, we know there's plenty of other languages in the world and that not everyone is fluent in English. If you want to help translate our guides into different languages, we're more than happy to support you.\n\nMain things to keep in mind:\n\n * Translations must be a dedicated fork and won't be merged into Dortania's guide\n * Forks must indicate they're translations of Dortania and are not official\n * Forks must also comply with our License\n\nIf the above are met, you're free to host your translation without issue! Dortania's sites are built with VuePress using GitHub Actions and finally hosted on GitHub Pages, so there is no cost to hosting your own translation.\n\nIf you have any questions or concerns with either translations or hosting, feel free to reach out on our Bugtracker.\n\nCurrent known translations:\n\n * InyextcionES(Spanish)\n * macOS86(Italian, no longer maintained)\n * Technopat(Turkish)\n * ThrRip(Chinese, no longer maintained)\n * sumingyd(Chinese)\n * Shijuro(Russian)\n * viOpenCore(Vietnamese)\n\nAnd note that these translations are subject to authors preferences, translation changes and human errors. Please keep this in mind when reading as they're no longer official Dortania guides.",normalizedContent:"# supporting the guides\n\nnote: this is a community run guide which is not officially endorsed by acidanthera. please do not bug acidanthera with issues about this guide.\n\nwant to help support the guide? well there's some ways you can help!\n\n\n\n * contributing via issues\n * contributing via prs\n   * how to contribute\n   * tips\n * contributing via translations\n\n\n\nnote: for those wanting to contribute financially, we seriously appreciate it but we're a non-profit organization. we do this to teach, not to make money. if you have some money left over we highly recommend donating it to a charity. crohn's and colitis canada is one we recommend if you have none on mind.\n\n\n# contributing via issues\n\ncontributing via issues is pretty simple but there are some rules:\n\n * keep issues tab dedicated to guides issues only, no personal hackintosh issues. it is not a place to discuss installation issues.\n * if for a typo or better clarification, please indicate what page it was on. would appreciate not going for a scavenger hunt on where these issues are.\n\nyou can find the bugtracker here: bugtracker\n\n\n# contributing via prs\n\nsome guidelines when contributing via prs:\n\n * use your brain (please).\n * proofread your submissions.\n * pull requests can be denied if we feel it does not fit or has inaccurate information. we will generally tell you why it is rejected though or ask for revisions.\n   * we would also appreciate sources for any bigger commits to make it easier on us to verify the info you provide is valid\n * images must be hosted locally in the repo under the ../images/ folder\n * your pr must be run through a markdown lint and have all issues fixed.\n * in general, try to avoid using \"non-acidanthera\" tools when possible. generally we want to avoid use of third-party tools - though if it's impossible otherwise, then you can link it.\n   * tools explicitly banned:\n     * unibeast, multibeast and kextbeast\n       * more info can be found here: tonymacx86-stance\n     * transmac\n       * know for creating borked usb drives\n     * niresh installers\n       * we'd like to avoid piracy with the guides\n\n\n# how to contribute\n\nbest way to test your commits and make sure they are formatted correctly is by downloading node.js then running npm install to install dependencies. when you run npm run dev, it will set up a local webserver which you can connect to view the changes you made. npm test will throw any errors at you about formatting and spellchecking as well. if you want markdownlint to automatically attempt to fix linting, run npm run fix-lint.\n\nsimple step-by-steps:\n\n * fork this repo\n * install the required tools:\n   * node.js\n * make your changes.\n * build the site:\n   * npm install (to install all the required plugins)\n   * npm run dev (preview the site)\n     * can be found at http://localhost:8080\n * check linting and spellcheck:\n   * npm test\n   * npm run lint and npm run spellcheck (to run the tests individually)\n   * npm run fix-lint (to fix any potential issues)\n   * for words not supported by the default spellcheck, please add them to the dictionary.txt and run npm run sort-dict\n\n\n# tips\n\nsome tools that make contributing a bit easier:\n\n * visual studio code\n * typora for real time markdown rendering.\n * textmate for easy and powerful mass find/replace.\n * github desktop for more user friendly gui.\n\n\n# contributing via translations\n\nwhile dortania's guide are primarily english based, we know there's plenty of other languages in the world and that not everyone is fluent in english. if you want to help translate our guides into different languages, we're more than happy to support you.\n\nmain things to keep in mind:\n\n * translations must be a dedicated fork and won't be merged into dortania's guide\n * forks must indicate they're translations of dortania and are not official\n * forks must also comply with our license\n\nif the above are met, you're free to host your translation without issue! dortania's sites are built with vuepress using github actions and finally hosted on github pages, so there is no cost to hosting your own translation.\n\nif you have any questions or concerns with either translations or hosting, feel free to reach out on our bugtracker.\n\ncurrent known translations:\n\n * inyextciones(spanish)\n * macos86(italian, no longer maintained)\n * technopat(turkish)\n * thrrip(chinese, no longer maintained)\n * sumingyd(chinese)\n * shijuro(russian)\n * viopencore(vietnamese)\n\nand note that these translations are subject to authors preferences, translation changes and human errors. please keep this in mind when reading as they're no longer official dortania guides.",charsets:{}},{title:"Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)",frontmatter:{},regularPath:"/LICENSE.html",relativePath:"LICENSE.md",key:"v-534eac26",path:"/LICENSE.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\n\nNote: This is a human-readable version, to find the full license see here: Legal Code\n\nYou are free to:\n\n * Share — copy and redistribute the material in any medium or format\n * Adapt — remix, transform, and build upon the material\n\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nUnder the following terms:\n\n * Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n * NonCommercial — You may not use the material for commercial purposes.\n * ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\n * No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nNotices:\n\n * You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\n * No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.",normalizedContent:"# attribution-noncommercial-sharealike 4.0 international (cc by-nc-sa 4.0)\n\nnote: this is a human-readable version, to find the full license see here: legal code\n\nyou are free to:\n\n * share — copy and redistribute the material in any medium or format\n * adapt — remix, transform, and build upon the material\n\nthe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nunder the following terms:\n\n * attribution — you must give appropriate credit, provide a link to the license, and indicate if changes were made. you may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n * noncommercial — you may not use the material for commercial purposes.\n * sharealike — if you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\n * no additional restrictions — you may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nnotices:\n\n * you do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\n * no warranties are given. the license may not give you all of the permissions necessary for your intended use. for example, other rights such as publicity, privacy, or moral rights may limit how you use the material.",charsets:{}},{title:"Home",frontmatter:{home:!0,heroImage:"/dortania-logo-clear.png",heroText:"OpenCore 的安裝指南",actionText:"準備開始→",actionLink:"prerequisites.md",meta:[{name:"描述",content:"目前支持的版本 0.8.8"}]},regularPath:"/",relativePath:"README.md",key:"v-63ef920e",path:"/",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# OpenCore 是什麼？這個指南是為誰準備的？\n\nOpenCore 就是我們所說的「開機程式」-- 它是一個複雜的軟體，我們用它來準備我們的系統，特別是通過注入新的 macOS 數據，如 SMBIOS、ACPI 表和 kext。這個工具與 Clover 等其他工具的不同之處在於，它在設計時考慮到了安全性和質量，允許我們使用許多在真正的 mac 上可以找到的安全特性，如系統完整性保護和 FileVault。想更深入的了解可以瀏覽：為什麼 OpenCore 超越 Clover 和其他程式\n\n本指南主要關注以下兩點:\n\n * 在 x86 PC 上安裝 macOS 操作系統\n * 如何讓你的黑蘋果正常運行\n\n因此，您需要閱讀、學習甚至使用 Google。這不是一個簡單的一鍵安裝。\n\n請記住，OpenCore 目前仍然是處於測試階段的新產品。雖然它相當穩定，而且可以說在各個方面都比 Clover 穩定得多，但它仍然經常更新，所以功能可能經常改變（即新特性取代舊特性）。\n\n最後，那些有問題的人可以進入 r/Hackintosh subreddit 和 r/Hackintosh Discord 以取得更多幫助。\n\n注意\n\n此翻譯文件不是 Dortania 或 acidanthera 的官方翻譯文件，本文件的内容未必是最新的，如果要了解最新資訊，請瀏覽英文版本。\n\n本文件的翻譯水平受限於作者及貢獻者的個人喜好及個人理解，部分用詞可能與港台習慣有異。部分地方尚未完成翻譯，你可能仍會看到英文原文或簡體中文。",normalizedContent:"# opencore 是什麼？這個指南是為誰準備的？\n\nopencore 就是我們所說的「開機程式」-- 它是一個複雜的軟體，我們用它來準備我們的系統，特別是通過注入新的 macos 數據，如 smbios、acpi 表和 kext。這個工具與 clover 等其他工具的不同之處在於，它在設計時考慮到了安全性和質量，允許我們使用許多在真正的 mac 上可以找到的安全特性，如系統完整性保護和 filevault。想更深入的了解可以瀏覽：為什麼 opencore 超越 clover 和其他程式\n\n本指南主要關注以下兩點:\n\n * 在 x86 pc 上安裝 macos 操作系統\n * 如何讓你的黑蘋果正常運行\n\n因此，您需要閱讀、學習甚至使用 google。這不是一個簡單的一鍵安裝。\n\n請記住，opencore 目前仍然是處於測試階段的新產品。雖然它相當穩定，而且可以說在各個方面都比 clover 穩定得多，但它仍然經常更新，所以功能可能經常改變（即新特性取代舊特性）。\n\n最後，那些有問題的人可以進入 r/hackintosh subreddit 和 r/hackintosh discord 以取得更多幫助。\n\n注意\n\n此翻譯文件不是 dortania 或 acidanthera 的官方翻譯文件，本文件的内容未必是最新的，如果要了解最新資訊，請瀏覽英文版本。\n\n本文件的翻譯水平受限於作者及貢獻者的個人喜好及個人理解，部分用詞可能與港台習慣有異。部分地方尚未完成翻譯，你可能仍會看到英文原文或簡體中文。",charsets:{cjk:!0}},{title:"Clover Boot Arg Conversion",frontmatter:{search:!1},regularPath:"/clover-conversion/Clover-boot-arg.html",relativePath:"clover-conversion/Clover-boot-arg.md",key:"v-2817348d",path:"/clover-conversion/Clover-boot-arg.html",headers:[{level:2,title:"macOS flags",slug:"macos-flags",normalizedTitle:"macos flags",charIndex:442},{level:2,title:"Kexts flags",slug:"kexts-flags",normalizedTitle:"kexts flags",charIndex:1085},{level:2,title:"Chameleon flags",slug:"chameleon-flags",normalizedTitle:"chameleon flags",charIndex:1266}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"macOS flags Kexts flags Chameleon flags",content:"# Clover Boot Arg Conversion\n\nThis section is mainly used for explaining what boot-args are no longer relevant, it's quite common for users to be still carrying legacy args which have little to no real affect in newer versions of macOS or have little use in OpenCore\n\nThis list is based of memory and an annoyed self with seeing these flags keep popping up, got other flags to add then I recommend opening an issue. All help is welcomed!\n\n\n# macOS flags\n\ndart=0:\n\n * Used for disabling VT-D support\n * With Clover, when this flag was present it would also drop your DMAR table from ACPI\n * This flag also requires SIP to be disabled in macOS 10.15 Catalina, so with OpenCore this flag is no longer recommended and instead replaced with Kernel -> Quirks -> DisableIoMapper\n\nkext-dev-mode=1:\n\n * Used for allowing unsigned kexts to be loaded, flag only present in Yosemite\n * CSR_ALLOW_UNSIGNED_KEXTS bit to be flipped in csr-active-config NVRAM variable for newer releases\n * This is not needed on OpenCore due to the kernel injection method used: Attaching to the prelinked kernel\n\n\n# Kexts flags\n\nnvda_drv=1: Used for enabling NVIDIA's Web Drivers, no longer works in macOS 10.12\n\n * This flag was actually turned into nvda_drv_vrl=1 for Sierra and High Sierra\n\n\n# Chameleon flags\n\nFor some reason people kept using these flags into Clover which had no effect, and so we really need to stop the train on this one with OpenCore\n\nPCIRootUID=Value\n\n * This sets the _UID of Device (PCI0) to whatever the value is, supposedly needed on legacy AMD GPUs but this is debatable. Ironically Clover still uses this flag but most users know it from Chameleon. Source\n\nGraphicsEnabler=Yes/No\n\n * InjectAMD/NVIDIA was the Clover equivalent but no feature parity in OpenCore besides running WhateverGreen\n\nIGPEnabler=Yes/No\n\n * Same idea as GraphicsEnabler, Clover equivalent is InjectIntel so feature parity would be WhateverGreen's Framebuffer patching\n\n-f\n\n * Enables cacheless booting on Chameleon and Clover, OpenCore has a slightly different option under Kernel -> Scheme -> KernelCache and set the entry to Cacheless\n   * Currently cacheless booting is only supported on 64-bit kernels from OS X 10.6 to 10.9",normalizedContent:"# clover boot arg conversion\n\nthis section is mainly used for explaining what boot-args are no longer relevant, it's quite common for users to be still carrying legacy args which have little to no real affect in newer versions of macos or have little use in opencore\n\nthis list is based of memory and an annoyed self with seeing these flags keep popping up, got other flags to add then i recommend opening an issue. all help is welcomed!\n\n\n# macos flags\n\ndart=0:\n\n * used for disabling vt-d support\n * with clover, when this flag was present it would also drop your dmar table from acpi\n * this flag also requires sip to be disabled in macos 10.15 catalina, so with opencore this flag is no longer recommended and instead replaced with kernel -> quirks -> disableiomapper\n\nkext-dev-mode=1:\n\n * used for allowing unsigned kexts to be loaded, flag only present in yosemite\n * csr_allow_unsigned_kexts bit to be flipped in csr-active-config nvram variable for newer releases\n * this is not needed on opencore due to the kernel injection method used: attaching to the prelinked kernel\n\n\n# kexts flags\n\nnvda_drv=1: used for enabling nvidia's web drivers, no longer works in macos 10.12\n\n * this flag was actually turned into nvda_drv_vrl=1 for sierra and high sierra\n\n\n# chameleon flags\n\nfor some reason people kept using these flags into clover which had no effect, and so we really need to stop the train on this one with opencore\n\npcirootuid=value\n\n * this sets the _uid of device (pci0) to whatever the value is, supposedly needed on legacy amd gpus but this is debatable. ironically clover still uses this flag but most users know it from chameleon. source\n\ngraphicsenabler=yes/no\n\n * injectamd/nvidia was the clover equivalent but no feature parity in opencore besides running whatevergreen\n\nigpenabler=yes/no\n\n * same idea as graphicsenabler, clover equivalent is injectintel so feature parity would be whatevergreen's framebuffer patching\n\n-f\n\n * enables cacheless booting on chameleon and clover, opencore has a slightly different option under kernel -> scheme -> kernelcache and set the entry to cacheless\n   * currently cacheless booting is only supported on 64-bit kernels from os x 10.6 to 10.9",charsets:{}},{title:"Converting common properties from Clover to OpenCore",frontmatter:{search:!1},regularPath:"/clover-conversion/Clover-config.html",relativePath:"clover-conversion/Clover-config.md",key:"v-05f885ed",path:"/clover-conversion/Clover-config.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# Converting common properties from Clover to OpenCore\n\nSo this little(well not so little as I reread this...) page is for users who are having issues migrating from Clover to OpenCore as some of their legacy quirks are required or the Configuration.pdf isn't well suited for laptop users.\n\n\n# Kexts and Firmware drivers\n\nSee Kexts and Firmware drivers.\n\n\n# Acpi\n\nACPI Renames:\n\nSo with the transition from Clover to OpenCore we should start removing unneeded patches you may have carried along for some time:\n\n * EHCI Patches: Recommended to power off the controller with SSDT-EHCx_OFF. Skylake and newer users do not have an EHCI controller so no need for this.\n   * change EHC1 to EH01\n   * change EHC2 to EH02\n * XHCI Patches: Not needed once an Injector kext is made\n   * change XHCI to XHC\n   * change XHC1 to XHC\n * SATA patches: Purely cosmetic in macOS now\n   * change SAT0 to SATA\n   * change SAT1 to SATA\n * IMEI Patches: Handled by WhateverGreen\n   * change HECI to IMEI\n   * change HEC1 to IMEI\n   * change MEI to IMEI\n   * change IDER to MEID\n * GFX patches: Handled by WhateverGreen\n   * change GFX0 to IGPU\n   * change PEG0 to GFX0\n   * change PEGP to GFX0\n   * change SL01 to PEGP\n * EC Patches: See here on best solution: Getting started with ACPI\n   * change EC0 to EC\n   * change H_EC to EC\n   * change ECDV to EC\n   * change PGEC to EC\n * Audio renames: Handled by AppleALC\n   * change HDAS to HDEF\n   * change CAVS to HDEF\n   * change AZAL to HDEF\n   * change ALZA to HDEF\n   * change B0D3 to HDAU\n * Z390 BIOS RTC bug fix: See here on best solution: Getting started with ACPI(SSDT-AWAC)\n   * change STAS to [Blank]\n   * Fix Z390 BIOS DSDT Device(RTC) bug\n   * Fix 300-series RTC Bug\n * NVMe patches: NVMeFix fixes power management\n   * change PXSX to ANS1\n   * change PXSX to ANS2\n * Airport/WiFi Patches: AirportBrcmFixup\n   * change PXSX to ARPT\n * Other purely cosmetic patches:\n   * change LPC0 to LPCB(use SSDT-SBUS-MCHC for fixing SMBUS support)\n   * change PC00 to PCIO\n   * change FPU to MATH\n   * change TMR to TIMR\n   * change PIC to IPIC\n   * change GBE1 to ETH0\n\nPatches\n\n * TgtBridge patches:\n   \n   * ACPI -> Patch -> ... -> Base\n\n * DisableASPM:\n   \n   * DeviceProperties -> Add -> PciRoot... -> pci-aspm-default | Data | <00>\n\n * HaltEnabler:\n   \n   * ACPI -> Quirks -> FadtEnableReset -> YES\n\nFixes:\n\n * FixAirport:\n   \n   * AirportBrcmFixup\n\n * FixIPIC:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixSBUS:\n   \n   * SSDT-SBUS-MCHC\n\n * FixShutdown:\n   \n   * FixShutdown-USB-SSDT\n   * _PTS to ZPTS Patch\n   * This will not harm Windows or Linux installs as this is just adding missing methods that should've been there to start with. Blame the firmware writers\n\n * FixDisplay:\n   \n   * Manual framebuffer patching, WhateverGreen does most of the work already\n\n * FixHDA:\n   \n   * Handled by AppleALC\n\n * FixHPET:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixSATA:\n   \n   * Kernel -> Quirks -> ExternalDiskIcons -> YES\n\n * FixADP1:\n   \n   * Renames device AC0_ to ADP1, see Rename-SSDT for an example\n   * Also injects Name (_PRW, Package (0x02) {0x1C,0x03}) into the device if not present. Source\n\n * FixRTC:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixTMR:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * AddPNLF:\n   \n   * See SSDT-PNLF\n\n * AddMCHC:\n   \n   * SSDT-SBUS-MCHC\n\n * AddIMEI:\n   \n   * SSDT-SBUS-MCHC\n   * WhateverGreen will also handle fixing IMEI naming\n   * For Sandy Bridge on Z77 or IvyBridge on Z67, the IMEI will need to be faked: SSDT-IMEI\n\n * FakeLPC:\n   \n   * DeviceProperties -> Add -> PciRoot... -> device-id\n   * You'll want to spoof it to a supported LPC controller already in AppleLPC\n\n * FixIntelGfx:\n   \n   * WhateverGreen handles this\n\n * AddHDMI:\n   \n   * WhateverGreen handles this\n\nDropTables:\n\n * ACPI -> Delete\n\nSSDT:\n\n * PluginType:\n   \n   * SSDT-PLUG\n   * See Getting started with ACPI for more details\n\n * Generate P States: ssdtPRGen.sh(For Sandy Bridge and IvyBridge)\n\n * Generate C States: ssdtPRGen.sh(For Sandy Bridge and IvyBridge)\n\n\n# Boot\n\nBoot Argument:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args\n\nNeverHibernate:\n\n * Misc -> Boot -> HibernateMode -> None\n\nDefault Boot Volume:\n\n * Misc -> Security -> AllowSetDefault -> True\n   * Press Ctrl+Enter in the picker to set default device\n * Alternative is Startup Disk in macOS's System Preferences, just like on real Macs\n\n\n# Boot Graphics\n\nDefaultBackgroundColor:\n\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> DefaultBackgroundColor\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n   * To calculate your own, convert an RGB value to HEX\n\nEFILoginHiDPI:\n\n * Clover only flag, for OpenCore UI scaling see UIScale and UEFI -> Output\n\nflagstate:\n\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> flagstate | Data | <>\n   * 0 -> <00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000(dumped from a mac)\n   * NVRAM location needs to be double checked for this one\n\nUIScale:\n\n * UEFI -> Quirks -> UIScale | Integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to HiDPI displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\n\n# CPU\n\nType:\n\n * PlatformInfo -> Generic -> ProcessorType\n * See AppleSmBios.h for all supported values\n\nHWPEnable: Better alternative is to properly manage MSR 0x770 with HWPEnable\n\nQEMU: Proper VM/KVM support is implemented in OpenCore\n\nTurboDisable: Better alternative is to control your frequencies with CPUFriend or ssdtPRGen\n\n\n# Devices\n\nUSB:\n\n * FixOwnership: UEFI -> Quirk -> ReleaseUsbOwnership\n   * You should also enable XHCI Hand-off in your BIOS\n * ClockID: DeviceProperties -> Add -> PciRoot... -> AAPL,clock-id\n * HighCurrent: DeviceProperties -> Add -> PciRoot... -> AAPL, HighCurrent\n   * Irrelevant for OS X 10.11 and newer\n   * Newer variant is either PowerProperties defined in IOUSBHostFamily.kext -> AppleUSBHostPlatformProperties or added with a USBX SSDT for Skylake SMBIOS and newer\n\nAudio:\n\nFor the following, you will need to know your PciRoot for your audio controller and its name(commonly known as HDEF but also HDAS, HDAU and such), this can be found with gfxutil:\n\npath/to/gfxutil -f HDEF\n\n\n * Inject: DeviceProperties -> Add -> PciRoot... -> layout-id\n * AFGLowPowerState: DeviceProperties -> Add -> PciRoot... -> AFGLowPowerState -> <01000000>\n * ResetHDA: UEFI -> Audio -> ResetTrafficClass\n   * Optionally there's also AppleALC's alctsel=1 boot-arg or JackFix\n\nAdd Properties:\n\n * No equivalent, need to specify with a PciRoot path\n\nProperties:\n\n * DeviceProperties -> Add\n\nFakeID: For the following, you will need to know your PciRoot for your device and apply their properties with DeviceProperties -> Add, PciRoot can be found with gfxutil\n\n * USB\n   \n   * device-id\n   * device_type\n   * device_type\n\n * IMEI\n   \n   * device-id\n   * vendor-id\n\n * WIFI\n   \n   * name\n   * compatible\n\n * LAN\n   \n   * device-id\n   * compatible\n   * vendor-id\n\n * XHCI\n   \n   * device-id\n   * device_type: UHCI\n   * device_type: OHCI\n\ndevice_type: EHCI\n\n * device-id\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-in-sleep\n * built-in\n\ndevice_type: XHCI\n\n * device-id\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-available\n * AAPL,current-in-sleep\n * built-in\n\nForceHPET:\n\n * UEFI -> Quirks -> ActivateHpetSupport\n\n\n# Disable Drivers\n\nJust don't add your drivers to UEFI -> Drivers, alternatively add # in-front of the driver in your config.plist for OpenCore to skip it.\n\n\n# Gui\n\n\n# Graphics\n\n * Note: PciRoot... should be replaced with\n\nInjectIntel:\n\n * GMA Patching\n\nInjectAti:\n\n * DeviceProperties -> Add -> PciRoot... -> device-id\n   * ie: <B0670000> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> @0,connector-type\n   * You may need to add additional Connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. See here for the list of connector types:\n\nLVDS                    <02 00 00 00>\nDVI (Dual Link)         <04 00 00 00>\nDVI (Single Link)       <00 02 00 00>\nVGA                     <10 00 00 00>\nS-Video                 <80 00 00 00>\nDP                      <00 04 00 00>\nHDMI                    <00 08 00 00>\nDUMMY                   <01 00 00 00>\n\n\nInjectNVIDIA:\n\n * NVIDIA Patching\n\nFakeIntel:\n\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> device-id\n   * ie. 66010003 for the HD 4000\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> vendor-id -> <86800000>\n\nFakeAti:\n\n * DeviceProperties -> Add -> PciRoot... -> device-id\n   * ie: <B0670000> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> ATY,DeviceID\n   * ie: <B067> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> @0,compatible\n   * ie. ATY,Elodea for HD 6970M\n * DeviceProperties -> Add -> PciRoot... -> vendor-id-> <02100000>\n * DeviceProperties -> Add -> PciRoot... -> ATY,VendorID -> <0210>\n\nNote: See here on making an SSDT for GPU Spoofing, DeviceProperties injection via OpenCore seems to fail sometimes when trying to spoof a GPU: Renaming GPUs For others like InjectAti, see the Sample.dsl in the WhateverGreen docs\n\nCustom EDID\n\n * WhateverGreen's EDID docs\n\nDual Link:\n\n * DeviceProperties -> Add -> PciRoot... -> AAPL00,DualLink\n   * 1 -> <01000000>\n   * 0 -> <00000000>\n\nNVCAP\n\n * NVIDIA Patching\n\ndisplay-cfg:\n\n * DeviceProperties -> Add -> PciRoot... -> @0,display-cfg\n * See fassl's post on the matter: NVIDIA injection\n\nLoadVBios:\n\n * See sample.dsl for more info on custom VBIOS injection\n\nPatchVBios: See LoadVBIOS\n\nNVIDIAGeneric:\n\n * DeviceProperties -> Add -> PciRoot... -> model | string | Add the GPU name\n\nNVIDIASingle: See disabling unsupported GPUs\n\nNVIDIANoEFI:\n\n * DeviceProperties -> Add -> PciRoot... -> NVDA,noEFI | Boolean | True\n * See FredWst' comment for more info: GT 640 scramble\n\nig-platform-id:\n\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> APPL,ig-platform-id\n\nBootDisplay:\n\n * DeviceProperties -> Add -> PciRoot... -> @0,AAPL,boot-display\n\nRadeonDeInit:\n\nIn most cases it is advisable to use WhateverGreen, which handles this automatically. This SSDT is not needed if WhateverGreen is used.\n\n * Radeon-DeInit-SSDT\n   * Do note that this is meant for GFX0, adjust for your system\n\n\n# Kernel and Kext Patches\n\nKernelPm:\n\n * Kernel -> Quirks -> AppleXcpmCfgLock -> YES\n * Note that Clover will auto-apply this patch without setting it if the MSR E2 was locked, so you may actually need AppleXcpmCfgLock even if Clover didn't\n\nAppleIntelCPUPM:\n\n * Kernel -> Quirks -> AppleCpuPmCfgLock -> YES\n\nDellSMBIOSPatch:\n\nAn odd quirk for Dell systems running APTIO V\n\n * Kernel -> Quirks -> CustomSMBIOSGuid -> YES\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\nKextsToPatch:\n\n * Kernel -> Patch\n * See Common Kernel and Kext patch conversions for common patch conversions\n\nKernelToPatch:\n\n * Kernel -> Patch\n * See Common Kernel and Kext patch conversions for common patch conversions\n\nForceKextsToLoad:\n\n * Kernel -> Force\n\nKernel LAPIC:\n\n * Kernel -> Quirks -> LapicKernelPanic -> YES\n\nKernelXCPM:\n\n * Kernel -> Quirks -> AppleXcpmExtraMsrs -> YES\n\nFor an extensive list of patches, please compare OpenCore's CommonPatches.c with Clover's kernel_patcher.c. Some patches are not transferred over so if you're having issues this is the section to check, example is converting the KernelIvyBridgeXCPM() to OpenCore:\n\nBase: _xcpm_bootstrap\nComment: _xcpm_bootstrap (Ivy Bridge) 10.15\nCount: 1\nEnabled: YES\nFind: 8D43C43C22\nIdentifier: kernel\nLimit: 0\nMask: FFFF00FFFF\nMinKernel: 19.\nMaxKernel: 19.99.99\nReplace: 8D43C63C22\nReplaceMask: 0000FF0000\nSkip: 0\n\n\nSource\n\nFor Low end Haswell+ like Celerons, please see here for recommended patches: Bugtracker Issues 365\n\nUSB Port Limit Patches:\n\n * Kernel -> Quirks -> XhciPortLimit -> YES\n\nExternal Icons Patch:\n\n * Kernel -> Quirks -> ExternalDiskIcons -> YES\n * Used for when you internal disk are seen as external on macOS\n\nAppleRTC\n\nIssue with AppleRTC, quite a simple fix:\n\n * config.plist -> Kernel -> Quirks -> DisableRtcChecksum -> true\n\nFor some versions of MacOS (e.g. Catalina), boot.efi may write to the RTC. To prevent this, the below needs to be added as well:\n\n * config.plist -> NVRAM -> Add -> 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:rtc-blacklist = <58 59>\n\nNote: If you still have issues, you'll need to use RTCMemoryFixup and exclude ranges. See here for more info, and here for a guide.\n\nFakeCPUID:\n\n * Kernel -> Emulate:\n   * Cpuid1Mask: <Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00\n     * ex(0x0306A9): A9060300 00000000 00000000 00000000\n   * Cpuid1Data(Swap 00 for FF if needing to swap with a longer value)\n     * ex: FFFFFFFF 00000000 00000000 00000000\n\nNote: Finding CPUID's for Intel can be a bit harder than looking at Intel ARK, easiest way to find it is via Microsoft's Intel microcode update notes\n\n\n# Rt Variables\n\nROM:\n\n * No direct translation for UseMacAddr0 as you need to provide your hardware ROM, can be found in System Preferences -> Network -> Advanced -> Hardware\n * Also verify your En0 is still built-in when running OpenCore, this can break iMessage and iCloud when there's no built-in property.\n\nMLB:\n\n * PlatformInfo -> Generic -> MLB\n\nBooterConfig:\n\n * UEFI -> Quirks -> UIScale | Integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to HiDPI displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\nCsrActiveConfig:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config:\n   \n   * 0x0: 00000000\n   * 0x3: 03000000\n   * 0x67: 67000000\n   * 0x3E7: E7030000\n\n\n# SMBIOS\n\nProduct Name:\n\n * PlatformInfo -> Generic -> SystemProductName\n\nSerial Number:\n\n * PlatformInfo -> Generic -> SystemSerialNumber\n\nBoard Serial Number:\n\n * PlatformInfo -> Generic -> MLB\n\nSmUUID:\n\n * PlatformInfo -> Generic -> SystemUUID\n\nMemory:\n\n * PlatformInfo -> CustomMemory -> True\n * PlatformInfo -> Memory\n   * See Configuration.pdf for more info\n\nSlots AAPL Injection:\n\n * DeviceProperties -> Add -> PciRoot... -> APPL,slot-name | string | Add slot\n\n\n# System Parameters\n\nCustomUUID:\n\n * Heavily deprecated and not recommended even on Clover, no equivalent on OpenCore\n * More info on why: Hardware UUID injection for OpenCore #711\n\nInjectSystemID:\n\n * Also legacy as it's used for replicating Chameleon user's UUIDs\n\nBacklightLevel:\n\n * Property set in NVRAM\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> backlight-level | Data | <Insert value>\n   * 0x0101 -> <0101>\n\nInjectKexts:\n\n * No equivalent but you really have no excuse to keep FakeSMC inside macOS\n\nNoCaches:\n\n * This only works up to 10.7 on Clover, and OpenCore requires an OS that supports a prelinked(10.7) so there can't be an equivalent\n\nExposeSysVariables:\n\n * Just add your SMBIOS properties under PlatformInfo\n * Confusing quirk tbh, it's not even mentioned in more recent versions of the Clover docs on AppleLife\n\nNVIDIAWeb:\n\n * What this does is apply sudo nvram nvda_drv=1 on every boot. To get a similar effect you can find it under the following path:\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> nvda_drv: <31>\n\n\n# Status\n\nSection finished 100%:\n\n * Boot Graphics\n * Disable Drivers\n * KernelAndKextPatches\n * RTVariables\n * SMBIOS\n * SystemParameters\n\nSection mostly finished:\n\n * Acpi\n * Boot\n * CPU\n * Device\n\nSection missing:\n\n * GUI",normalizedContent:"# converting common properties from clover to opencore\n\nso this little(well not so little as i reread this...) page is for users who are having issues migrating from clover to opencore as some of their legacy quirks are required or the configuration.pdf isn't well suited for laptop users.\n\n\n# kexts and firmware drivers\n\nsee kexts and firmware drivers.\n\n\n# acpi\n\nacpi renames:\n\nso with the transition from clover to opencore we should start removing unneeded patches you may have carried along for some time:\n\n * ehci patches: recommended to power off the controller with ssdt-ehcx_off. skylake and newer users do not have an ehci controller so no need for this.\n   * change ehc1 to eh01\n   * change ehc2 to eh02\n * xhci patches: not needed once an injector kext is made\n   * change xhci to xhc\n   * change xhc1 to xhc\n * sata patches: purely cosmetic in macos now\n   * change sat0 to sata\n   * change sat1 to sata\n * imei patches: handled by whatevergreen\n   * change heci to imei\n   * change hec1 to imei\n   * change mei to imei\n   * change ider to meid\n * gfx patches: handled by whatevergreen\n   * change gfx0 to igpu\n   * change peg0 to gfx0\n   * change pegp to gfx0\n   * change sl01 to pegp\n * ec patches: see here on best solution: getting started with acpi\n   * change ec0 to ec\n   * change h_ec to ec\n   * change ecdv to ec\n   * change pgec to ec\n * audio renames: handled by applealc\n   * change hdas to hdef\n   * change cavs to hdef\n   * change azal to hdef\n   * change alza to hdef\n   * change b0d3 to hdau\n * z390 bios rtc bug fix: see here on best solution: getting started with acpi(ssdt-awac)\n   * change stas to [blank]\n   * fix z390 bios dsdt device(rtc) bug\n   * fix 300-series rtc bug\n * nvme patches: nvmefix fixes power management\n   * change pxsx to ans1\n   * change pxsx to ans2\n * airport/wifi patches: airportbrcmfixup\n   * change pxsx to arpt\n * other purely cosmetic patches:\n   * change lpc0 to lpcb(use ssdt-sbus-mchc for fixing smbus support)\n   * change pc00 to pcio\n   * change fpu to math\n   * change tmr to timr\n   * change pic to ipic\n   * change gbe1 to eth0\n\npatches\n\n * tgtbridge patches:\n   \n   * acpi -> patch -> ... -> base\n\n * disableaspm:\n   \n   * deviceproperties -> add -> pciroot... -> pci-aspm-default | data | <00>\n\n * haltenabler:\n   \n   * acpi -> quirks -> fadtenablereset -> yes\n\nfixes:\n\n * fixairport:\n   \n   * airportbrcmfixup\n\n * fixipic:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixsbus:\n   \n   * ssdt-sbus-mchc\n\n * fixshutdown:\n   \n   * fixshutdown-usb-ssdt\n   * _pts to zpts patch\n   * this will not harm windows or linux installs as this is just adding missing methods that should've been there to start with. blame the firmware writers\n\n * fixdisplay:\n   \n   * manual framebuffer patching, whatevergreen does most of the work already\n\n * fixhda:\n   \n   * handled by applealc\n\n * fixhpet:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixsata:\n   \n   * kernel -> quirks -> externaldiskicons -> yes\n\n * fixadp1:\n   \n   * renames device ac0_ to adp1, see rename-ssdt for an example\n   * also injects name (_prw, package (0x02) {0x1c,0x03}) into the device if not present. source\n\n * fixrtc:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixtmr:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * addpnlf:\n   \n   * see ssdt-pnlf\n\n * addmchc:\n   \n   * ssdt-sbus-mchc\n\n * addimei:\n   \n   * ssdt-sbus-mchc\n   * whatevergreen will also handle fixing imei naming\n   * for sandy bridge on z77 or ivybridge on z67, the imei will need to be faked: ssdt-imei\n\n * fakelpc:\n   \n   * deviceproperties -> add -> pciroot... -> device-id\n   * you'll want to spoof it to a supported lpc controller already in applelpc\n\n * fixintelgfx:\n   \n   * whatevergreen handles this\n\n * addhdmi:\n   \n   * whatevergreen handles this\n\ndroptables:\n\n * acpi -> delete\n\nssdt:\n\n * plugintype:\n   \n   * ssdt-plug\n   * see getting started with acpi for more details\n\n * generate p states: ssdtprgen.sh(for sandy bridge and ivybridge)\n\n * generate c states: ssdtprgen.sh(for sandy bridge and ivybridge)\n\n\n# boot\n\nboot argument:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> boot-args\n\nneverhibernate:\n\n * misc -> boot -> hibernatemode -> none\n\ndefault boot volume:\n\n * misc -> security -> allowsetdefault -> true\n   * press ctrl+enter in the picker to set default device\n * alternative is startup disk in macos's system preferences, just like on real macs\n\n\n# boot graphics\n\ndefaultbackgroundcolor:\n\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14 -> defaultbackgroundcolor\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n   * to calculate your own, convert an rgb value to hex\n\nefiloginhidpi:\n\n * clover only flag, for opencore ui scaling see uiscale and uefi -> output\n\nflagstate:\n\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14 -> flagstate | data | <>\n   * 0 -> <00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000(dumped from a mac)\n   * nvram location needs to be double checked for this one\n\nuiscale:\n\n * uefi -> quirks -> uiscale | integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to hidpi displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\n\n# cpu\n\ntype:\n\n * platforminfo -> generic -> processortype\n * see applesmbios.h for all supported values\n\nhwpenable: better alternative is to properly manage msr 0x770 with hwpenable\n\nqemu: proper vm/kvm support is implemented in opencore\n\nturbodisable: better alternative is to control your frequencies with cpufriend or ssdtprgen\n\n\n# devices\n\nusb:\n\n * fixownership: uefi -> quirk -> releaseusbownership\n   * you should also enable xhci hand-off in your bios\n * clockid: deviceproperties -> add -> pciroot... -> aapl,clock-id\n * highcurrent: deviceproperties -> add -> pciroot... -> aapl, highcurrent\n   * irrelevant for os x 10.11 and newer\n   * newer variant is either powerproperties defined in iousbhostfamily.kext -> appleusbhostplatformproperties or added with a usbx ssdt for skylake smbios and newer\n\naudio:\n\nfor the following, you will need to know your pciroot for your audio controller and its name(commonly known as hdef but also hdas, hdau and such), this can be found with gfxutil:\n\npath/to/gfxutil -f hdef\n\n\n * inject: deviceproperties -> add -> pciroot... -> layout-id\n * afglowpowerstate: deviceproperties -> add -> pciroot... -> afglowpowerstate -> <01000000>\n * resethda: uefi -> audio -> resettrafficclass\n   * optionally there's also applealc's alctsel=1 boot-arg or jackfix\n\nadd properties:\n\n * no equivalent, need to specify with a pciroot path\n\nproperties:\n\n * deviceproperties -> add\n\nfakeid: for the following, you will need to know your pciroot for your device and apply their properties with deviceproperties -> add, pciroot can be found with gfxutil\n\n * usb\n   \n   * device-id\n   * device_type\n   * device_type\n\n * imei\n   \n   * device-id\n   * vendor-id\n\n * wifi\n   \n   * name\n   * compatible\n\n * lan\n   \n   * device-id\n   * compatible\n   * vendor-id\n\n * xhci\n   \n   * device-id\n   * device_type: uhci\n   * device_type: ohci\n\ndevice_type: ehci\n\n * device-id\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-in-sleep\n * built-in\n\ndevice_type: xhci\n\n * device-id\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-available\n * aapl,current-in-sleep\n * built-in\n\nforcehpet:\n\n * uefi -> quirks -> activatehpetsupport\n\n\n# disable drivers\n\njust don't add your drivers to uefi -> drivers, alternatively add # in-front of the driver in your config.plist for opencore to skip it.\n\n\n# gui\n\n\n# graphics\n\n * note: pciroot... should be replaced with\n\ninjectintel:\n\n * gma patching\n\ninjectati:\n\n * deviceproperties -> add -> pciroot... -> device-id\n   * ie: <b0670000> for the r9 390x\n * deviceproperties -> add -> pciroot... -> @0,connector-type\n   * you may need to add additional connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. see here for the list of connector types:\n\nlvds                    <02 00 00 00>\ndvi (dual link)         <04 00 00 00>\ndvi (single link)       <00 02 00 00>\nvga                     <10 00 00 00>\ns-video                 <80 00 00 00>\ndp                      <00 04 00 00>\nhdmi                    <00 08 00 00>\ndummy                   <01 00 00 00>\n\n\ninjectnvidia:\n\n * nvidia patching\n\nfakeintel:\n\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> device-id\n   * ie. 66010003 for the hd 4000\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> vendor-id -> <86800000>\n\nfakeati:\n\n * deviceproperties -> add -> pciroot... -> device-id\n   * ie: <b0670000> for the r9 390x\n * deviceproperties -> add -> pciroot... -> aty,deviceid\n   * ie: <b067> for the r9 390x\n * deviceproperties -> add -> pciroot... -> @0,compatible\n   * ie. aty,elodea for hd 6970m\n * deviceproperties -> add -> pciroot... -> vendor-id-> <02100000>\n * deviceproperties -> add -> pciroot... -> aty,vendorid -> <0210>\n\nnote: see here on making an ssdt for gpu spoofing, deviceproperties injection via opencore seems to fail sometimes when trying to spoof a gpu: renaming gpus for others like injectati, see the sample.dsl in the whatevergreen docs\n\ncustom edid\n\n * whatevergreen's edid docs\n\ndual link:\n\n * deviceproperties -> add -> pciroot... -> aapl00,duallink\n   * 1 -> <01000000>\n   * 0 -> <00000000>\n\nnvcap\n\n * nvidia patching\n\ndisplay-cfg:\n\n * deviceproperties -> add -> pciroot... -> @0,display-cfg\n * see fassl's post on the matter: nvidia injection\n\nloadvbios:\n\n * see sample.dsl for more info on custom vbios injection\n\npatchvbios: see loadvbios\n\nnvidiageneric:\n\n * deviceproperties -> add -> pciroot... -> model | string | add the gpu name\n\nnvidiasingle: see disabling unsupported gpus\n\nnvidianoefi:\n\n * deviceproperties -> add -> pciroot... -> nvda,noefi | boolean | true\n * see fredwst' comment for more info: gt 640 scramble\n\nig-platform-id:\n\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> appl,ig-platform-id\n\nbootdisplay:\n\n * deviceproperties -> add -> pciroot... -> @0,aapl,boot-display\n\nradeondeinit:\n\nin most cases it is advisable to use whatevergreen, which handles this automatically. this ssdt is not needed if whatevergreen is used.\n\n * radeon-deinit-ssdt\n   * do note that this is meant for gfx0, adjust for your system\n\n\n# kernel and kext patches\n\nkernelpm:\n\n * kernel -> quirks -> applexcpmcfglock -> yes\n * note that clover will auto-apply this patch without setting it if the msr e2 was locked, so you may actually need applexcpmcfglock even if clover didn't\n\nappleintelcpupm:\n\n * kernel -> quirks -> applecpupmcfglock -> yes\n\ndellsmbiospatch:\n\nan odd quirk for dell systems running aptio v\n\n * kernel -> quirks -> customsmbiosguid -> yes\n * platforminfo -> updatesmbiosmode -> custom\n\nkextstopatch:\n\n * kernel -> patch\n * see common kernel and kext patch conversions for common patch conversions\n\nkerneltopatch:\n\n * kernel -> patch\n * see common kernel and kext patch conversions for common patch conversions\n\nforcekextstoload:\n\n * kernel -> force\n\nkernel lapic:\n\n * kernel -> quirks -> lapickernelpanic -> yes\n\nkernelxcpm:\n\n * kernel -> quirks -> applexcpmextramsrs -> yes\n\nfor an extensive list of patches, please compare opencore's commonpatches.c with clover's kernel_patcher.c. some patches are not transferred over so if you're having issues this is the section to check, example is converting the kernelivybridgexcpm() to opencore:\n\nbase: _xcpm_bootstrap\ncomment: _xcpm_bootstrap (ivy bridge) 10.15\ncount: 1\nenabled: yes\nfind: 8d43c43c22\nidentifier: kernel\nlimit: 0\nmask: ffff00ffff\nminkernel: 19.\nmaxkernel: 19.99.99\nreplace: 8d43c63c22\nreplacemask: 0000ff0000\nskip: 0\n\n\nsource\n\nfor low end haswell+ like celerons, please see here for recommended patches: bugtracker issues 365\n\nusb port limit patches:\n\n * kernel -> quirks -> xhciportlimit -> yes\n\nexternal icons patch:\n\n * kernel -> quirks -> externaldiskicons -> yes\n * used for when you internal disk are seen as external on macos\n\napplertc\n\nissue with applertc, quite a simple fix:\n\n * config.plist -> kernel -> quirks -> disablertcchecksum -> true\n\nfor some versions of macos (e.g. catalina), boot.efi may write to the rtc. to prevent this, the below needs to be added as well:\n\n * config.plist -> nvram -> add -> 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102:rtc-blacklist = <58 59>\n\nnote: if you still have issues, you'll need to use rtcmemoryfixup and exclude ranges. see here for more info, and here for a guide.\n\nfakecpuid:\n\n * kernel -> emulate:\n   * cpuid1mask: <clover_fcpuid_extended_to_4_bytes_swapped_bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00\n     * ex(0x0306a9): a9060300 00000000 00000000 00000000\n   * cpuid1data(swap 00 for ff if needing to swap with a longer value)\n     * ex: ffffffff 00000000 00000000 00000000\n\nnote: finding cpuid's for intel can be a bit harder than looking at intel ark, easiest way to find it is via microsoft's intel microcode update notes\n\n\n# rt variables\n\nrom:\n\n * no direct translation for usemacaddr0 as you need to provide your hardware rom, can be found in system preferences -> network -> advanced -> hardware\n * also verify your en0 is still built-in when running opencore, this can break imessage and icloud when there's no built-in property.\n\nmlb:\n\n * platforminfo -> generic -> mlb\n\nbooterconfig:\n\n * uefi -> quirks -> uiscale | integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to hidpi displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\ncsractiveconfig:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config:\n   \n   * 0x0: 00000000\n   * 0x3: 03000000\n   * 0x67: 67000000\n   * 0x3e7: e7030000\n\n\n# smbios\n\nproduct name:\n\n * platforminfo -> generic -> systemproductname\n\nserial number:\n\n * platforminfo -> generic -> systemserialnumber\n\nboard serial number:\n\n * platforminfo -> generic -> mlb\n\nsmuuid:\n\n * platforminfo -> generic -> systemuuid\n\nmemory:\n\n * platforminfo -> custommemory -> true\n * platforminfo -> memory\n   * see configuration.pdf for more info\n\nslots aapl injection:\n\n * deviceproperties -> add -> pciroot... -> appl,slot-name | string | add slot\n\n\n# system parameters\n\ncustomuuid:\n\n * heavily deprecated and not recommended even on clover, no equivalent on opencore\n * more info on why: hardware uuid injection for opencore #711\n\ninjectsystemid:\n\n * also legacy as it's used for replicating chameleon user's uuids\n\nbacklightlevel:\n\n * property set in nvram\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> backlight-level | data | <insert value>\n   * 0x0101 -> <0101>\n\ninjectkexts:\n\n * no equivalent but you really have no excuse to keep fakesmc inside macos\n\nnocaches:\n\n * this only works up to 10.7 on clover, and opencore requires an os that supports a prelinked(10.7) so there can't be an equivalent\n\nexposesysvariables:\n\n * just add your smbios properties under platforminfo\n * confusing quirk tbh, it's not even mentioned in more recent versions of the clover docs on applelife\n\nnvidiaweb:\n\n * what this does is apply sudo nvram nvda_drv=1 on every boot. to get a similar effect you can find it under the following path:\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> nvda_drv: <31>\n\n\n# status\n\nsection finished 100%:\n\n * boot graphics\n * disable drivers\n * kernelandkextpatches\n * rtvariables\n * smbios\n * systemparameters\n\nsection mostly finished:\n\n * acpi\n * boot\n * cpu\n * device\n\nsection missing:\n\n * gui",charsets:{cjk:!0}},{title:"Converting from Clover to OpenCore",frontmatter:{search:!1},regularPath:"/clover-conversion/",relativePath:"clover-conversion/README.md",key:"v-30c73b20",path:"/clover-conversion/",headers:[{level:2,title:"Cleaning the Clover Junk in macOS",slug:"cleaning-the-clover-junk-in-macos",normalizedTitle:"cleaning the clover junk in macos",charIndex:509},{level:2,title:"Removing kexts from macOS(S/L/E and L/E)",slug:"removing-kexts-from-macos-s-l-e-and-l-e",normalizedTitle:"removing kexts from macos(s/l/e and l/e)",charIndex:1345},{level:2,title:"Cleaning the Clover Junk in your hardware",slug:"cleaning-the-clover-junk-in-your-hardware",normalizedTitle:"cleaning the clover junk in your hardware",charIndex:2272},{level:2,title:"Optional: Avoiding SMBIOS injection into other OSes",slug:"optional-avoiding-smbios-injection-into-other-oses",normalizedTitle:"optional: avoiding smbios injection into other oses",charIndex:2953}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Cleaning the Clover Junk in macOS Removing kexts from macOS(S/L/E and L/E) Cleaning the Clover Junk in your hardware Optional: Avoiding SMBIOS injection into other OSes",content:"# Converting from Clover to OpenCore\n\nSo you see the new fancy OpenCore bootloader and just dying to try it out, well you've come to the right place! Many things in Clover have feature parity with OpenCore but many do not, here we'll be going over what you can bring over and what you cannot.\n\nTo get started, we have some resources that will aid you:\n\n * Config.plist conversion\n * Kexts and Firmware driver conversion(.kext, .efi)\n * Boot Argument conversion\n * Common Kernel and Kext patch conversions\n\n\n# Cleaning the Clover Junk in macOS\n\nSo to start, Clover would like to give a big F*** You if you're using emulated NVRAM. Why? Well it likely installed some trash that's a pain in the arse to get rid of. You will need to have SIP disabled to clean it up.\n\nThings to check for:\n\n * /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi\n * /Volumes/EFI/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_ESP.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nIf folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\nUsers of Clover's Preference Pane will also need to remove these:\n\n * /Library/PreferencePanes/Clover.prefPane\n * /Library/Application\\ Support/clover\n\n\n# Removing kexts from macOS(S/L/E and L/E)\n\nA common tradition with Clover was to install kexts into macOS, specifically System/Library/Extensions and Library/Extensions. Reasoning being that Clover's kext injection system was known to fail either with OS updates or just spontaneously. Thankfully with OpenCore, a much more robust and stable injection mechanism's been made that is far harder to break. So time to do a bit of spring cleaning.\n\nNote: OpenCore will fail to inject kexts already in your kernelcache so cleaning this out will also resolve those issues\n\nNow open up terminal and run the following:\n\nsudo kextcache -i /\n\n\nThis command will yell at you about any kexts that shouldn't be in either S/L/E or L/E.\n\nRemove all hack kexts:\n\nsudo -s\ntouch /Library/Extensions /System/Library/Extensions​\nkextcache -i /​\n\n\n * Note, macOS Catalina will need the mount -uw / command to mount the system drive as Read/Write\n\n\n# Cleaning the Clover Junk in your hardware\n\nThe other thing that Clover may have hidden from you is NVRAM variables, this is bad as OpenCore won't overwrite variables unless explicitly told via the Delete feature found under NVRAM -> Delete. To fix this, we'll need to clear then via OpenCore's ClearNvram feature.\n\nIn you config.plist:\n\n * Misc -> Security -> AllowNvramReset -> True\n\nAnd on your initial boot of OpenCore, select Reset NVRAM boot option. This will wipe everything and reboot the system when finished.\n\n * Note: Thinkpad laptops are known to be semi-bricked after an NVRAM reset in OpenCore, we recommend resetting NVRAM by updating the BIOS on these machines.\n\n\n# Optional: Avoiding SMBIOS injection into other OSes\n\nBy default OpenCore will inject SMBIOS data into all OSes, the reason for this is 2 parts:\n\n * This allows for proper multiboot support like with BootCamp\n * Avoids edge cases where info is injected several times, commonly seen with Clover\n\nHowever, there are quirks in OpenCore that allow for SMBIOS injection to be macOS limited by patching where macOS reads SMBIOS info from. These quirks can break in the future and so we only recommend this option in the event of certain software breaking in other OSes. For best stability, please avoid\n\nTo enable macOS-only SMBIOS injection:\n\n * Kernel -> Quirks -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom",normalizedContent:"# converting from clover to opencore\n\nso you see the new fancy opencore bootloader and just dying to try it out, well you've come to the right place! many things in clover have feature parity with opencore but many do not, here we'll be going over what you can bring over and what you cannot.\n\nto get started, we have some resources that will aid you:\n\n * config.plist conversion\n * kexts and firmware driver conversion(.kext, .efi)\n * boot argument conversion\n * common kernel and kext patch conversions\n\n\n# cleaning the clover junk in macos\n\nso to start, clover would like to give a big f*** you if you're using emulated nvram. why? well it likely installed some trash that's a pain in the arse to get rid of. you will need to have sip disabled to clean it up.\n\nthings to check for:\n\n * /volumes/efi/efi/clover/drivers64uefi/emuvariableuefi-64.efi\n * /volumes/efi/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_esp.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nif folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\nusers of clover's preference pane will also need to remove these:\n\n * /library/preferencepanes/clover.prefpane\n * /library/application\\ support/clover\n\n\n# removing kexts from macos(s/l/e and l/e)\n\na common tradition with clover was to install kexts into macos, specifically system/library/extensions and library/extensions. reasoning being that clover's kext injection system was known to fail either with os updates or just spontaneously. thankfully with opencore, a much more robust and stable injection mechanism's been made that is far harder to break. so time to do a bit of spring cleaning.\n\nnote: opencore will fail to inject kexts already in your kernelcache so cleaning this out will also resolve those issues\n\nnow open up terminal and run the following:\n\nsudo kextcache -i /\n\n\nthis command will yell at you about any kexts that shouldn't be in either s/l/e or l/e.\n\nremove all hack kexts:\n\nsudo -s\ntouch /library/extensions /system/library/extensions​\nkextcache -i /​\n\n\n * note, macos catalina will need the mount -uw / command to mount the system drive as read/write\n\n\n# cleaning the clover junk in your hardware\n\nthe other thing that clover may have hidden from you is nvram variables, this is bad as opencore won't overwrite variables unless explicitly told via the delete feature found under nvram -> delete. to fix this, we'll need to clear then via opencore's clearnvram feature.\n\nin you config.plist:\n\n * misc -> security -> allownvramreset -> true\n\nand on your initial boot of opencore, select reset nvram boot option. this will wipe everything and reboot the system when finished.\n\n * note: thinkpad laptops are known to be semi-bricked after an nvram reset in opencore, we recommend resetting nvram by updating the bios on these machines.\n\n\n# optional: avoiding smbios injection into other oses\n\nby default opencore will inject smbios data into all oses, the reason for this is 2 parts:\n\n * this allows for proper multiboot support like with bootcamp\n * avoids edge cases where info is injected several times, commonly seen with clover\n\nhowever, there are quirks in opencore that allow for smbios injection to be macos limited by patching where macos reads smbios info from. these quirks can break in the future and so we only recommend this option in the event of certain software breaking in other oses. for best stability, please avoid\n\nto enable macos-only smbios injection:\n\n * kernel -> quirks -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom",charsets:{}},{title:"Clover Kexts and Firmware driver conversion(.kext, .efi)",frontmatter:{search:!1},regularPath:"/clover-conversion/clover-efi.html",relativePath:"clover-conversion/clover-efi.md",key:"v-c594cb12",path:"/clover-conversion/clover-efi.html",headers:[{level:2,title:"Kexts",slug:"kexts",normalizedTitle:"kexts",charIndex:9},{level:2,title:"Firmware Drivers",slug:"firmware-drivers",normalizedTitle:"firmware drivers",charIndex:430},{level:3,title:"AptioMemoryFix Note",slug:"aptiomemoryfix-note",normalizedTitle:"aptiomemoryfix note",charIndex:2252}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Kexts Firmware Drivers AptioMemoryFix Note",content:"# Clover Kexts and Firmware driver conversion(.kext, .efi)\n\nMain thing to note is that you must specify your kexts and firmware drivers in your config.plist, or else they will not load. All kexts that are currently supported on Clover will work on OpenCore, however many have been deprecated with better variants being integrated into OpenCore. Firmware drivers are a bit different as they can in-fact break booting.\n\n * Kexts\n * Firmware Drivers\n\n\n# Kexts\n\nFor the most part, all kexts are supported in OpenCore. However there are a few integrated\n\nIntegrated Kexts:\n\n * NullCPUPowerManagement.kext\n   * Integrated into DummyPowerManagement under Kernel -> Emulate\n * BT4LEContinuityFixup.kext\n   * Integrated into ExtendBTFeatureFlags under Kernel -> Quirks\n\n\n# Firmware Drivers\n\nSupported ones:\n\n * AudioDxe.efi (Make sure this is from OpenCorePkg and not Goldfish64's or Clover's repo)\n * CsmVideoDxe.efi (Note that BiosVideo.efi may be preferred)\n * EnhancedFatDxe.efi\n * ExFatDxeLegacy.efi\n * ExFatDxe.efi\n * GrubEXFAT.efi\n * GrubISO9660.efi\n * GrubNTFS.efi\n * GrubUDF.efi\n * HiiDatabase.efi\n * HfsPlus.efi\n * HfsPlusLegacy.efi\n * NTFS.efi\n * NvmExpressDxe.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi\n * OsxFatBinaryDrv.efi\n * Ps2MouseDxe.efi\n * TbtForcePower.efi\n * UsbMouseDxe.efi\n * VBoxExt2.efi\n * VBoxExt4.efi\n * VBoxHfs.efi\n * VBoxIso9600.efi\n * XhciDxe.efi\n\nDrivers provided/merged into OpenCore and so are no longer needed:\n\n * APFS.efi\n * ApfsDriverLoader.efi\n * AppleEvent.efi\n * AppleGenericInput.efi\n * AppleImageCodec.efi\n * AppleKeyMapAggregator.efi\n * AppleUiSupport.efi\n * AppleUITheme.efi\n * AptioInputFix.efi\n * AptioMemoryFix.efi\n * AudioDxe.efi(well kinda, see AudioDxe shipped with OpenCorePkg)\n * BootChimeDxe.efi\n * DataHubDxe.efi\n * EmuVariableUEFI.efi\n * EnglishDxe.efi\n * FirmwareVolume.efi\n * HashServiceFix.efi\n * SMCHelper.efi\n * OcQuirks.efi\n * VirtualSMC.efi\n\nExplicitly unsupported drivers:\n\n * AppleUsbKbDxe.efi(replaced with OpenUsbKbDxe.efi)\n * FSInject.efi\n * FwRuntimeServices.efi(replaced with OpenRuntime.efi)\n * osxaptiofix2drv-free2000.efi\n * osxaptiofix2drv.efi\n * osxaptiofix3drv.efi\n * osxaptiofixdrv.efi\n * OsxFatBinaryDrv.efi\n * OsxLowMemFixDrv.efi\n * UsbKbDxe.efi(replaced with OpenUsbKbDxe.efi)\n\n\n# AptioMemoryFix Note\n\nWell before we actually get started on converting the Clover config, we must first talk about converting from AptioMemoryFix. The main thing to note is that it's inside of OpenCore with OpenRuntime being an extension, this means that AptioMemoryFix and that there's also a lot more settings to choose from. Please see the hardware specific sections of the OpenCore guide to know what Booter settings your system may require(HEDT like X99 and X299 should look to the closest CPU like Skylake-X should refer to Skylake guide and read the comments as they mention specifics for your system).",normalizedContent:"# clover kexts and firmware driver conversion(.kext, .efi)\n\nmain thing to note is that you must specify your kexts and firmware drivers in your config.plist, or else they will not load. all kexts that are currently supported on clover will work on opencore, however many have been deprecated with better variants being integrated into opencore. firmware drivers are a bit different as they can in-fact break booting.\n\n * kexts\n * firmware drivers\n\n\n# kexts\n\nfor the most part, all kexts are supported in opencore. however there are a few integrated\n\nintegrated kexts:\n\n * nullcpupowermanagement.kext\n   * integrated into dummypowermanagement under kernel -> emulate\n * bt4lecontinuityfixup.kext\n   * integrated into extendbtfeatureflags under kernel -> quirks\n\n\n# firmware drivers\n\nsupported ones:\n\n * audiodxe.efi (make sure this is from opencorepkg and not goldfish64's or clover's repo)\n * csmvideodxe.efi (note that biosvideo.efi may be preferred)\n * enhancedfatdxe.efi\n * exfatdxelegacy.efi\n * exfatdxe.efi\n * grubexfat.efi\n * grubiso9660.efi\n * grubntfs.efi\n * grubudf.efi\n * hiidatabase.efi\n * hfsplus.efi\n * hfspluslegacy.efi\n * ntfs.efi\n * nvmexpressdxe.efi\n * openruntime.efi\n * openusbkbdxe.efi\n * osxfatbinarydrv.efi\n * ps2mousedxe.efi\n * tbtforcepower.efi\n * usbmousedxe.efi\n * vboxext2.efi\n * vboxext4.efi\n * vboxhfs.efi\n * vboxiso9600.efi\n * xhcidxe.efi\n\ndrivers provided/merged into opencore and so are no longer needed:\n\n * apfs.efi\n * apfsdriverloader.efi\n * appleevent.efi\n * applegenericinput.efi\n * appleimagecodec.efi\n * applekeymapaggregator.efi\n * appleuisupport.efi\n * appleuitheme.efi\n * aptioinputfix.efi\n * aptiomemoryfix.efi\n * audiodxe.efi(well kinda, see audiodxe shipped with opencorepkg)\n * bootchimedxe.efi\n * datahubdxe.efi\n * emuvariableuefi.efi\n * englishdxe.efi\n * firmwarevolume.efi\n * hashservicefix.efi\n * smchelper.efi\n * ocquirks.efi\n * virtualsmc.efi\n\nexplicitly unsupported drivers:\n\n * appleusbkbdxe.efi(replaced with openusbkbdxe.efi)\n * fsinject.efi\n * fwruntimeservices.efi(replaced with openruntime.efi)\n * osxaptiofix2drv-free2000.efi\n * osxaptiofix2drv.efi\n * osxaptiofix3drv.efi\n * osxaptiofixdrv.efi\n * osxfatbinarydrv.efi\n * osxlowmemfixdrv.efi\n * usbkbdxe.efi(replaced with openusbkbdxe.efi)\n\n\n# aptiomemoryfix note\n\nwell before we actually get started on converting the clover config, we must first talk about converting from aptiomemoryfix. the main thing to note is that it's inside of opencore with openruntime being an extension, this means that aptiomemoryfix and that there's also a lot more settings to choose from. please see the hardware specific sections of the opencore guide to know what booter settings your system may require(hedt like x99 and x299 should look to the closest cpu like skylake-x should refer to skylake guide and read the comments as they mention specifics for your system).",charsets:{}},{title:"開始建構 config.plist",frontmatter:{},regularPath:"/config.plist/",relativePath:"config.plist/README.md",key:"v-5a347704",path:"/config.plist/",headers:[{level:2,title:"建立你的 config.plist",slug:"建立你的-config-plist",normalizedTitle:"建立你的 config.plist",charIndex:144},{level:2,title:"加入你需要的 SSDT、Kexts 和韌體驅動程式",slug:"加入你需要的-ssdt、kexts-和韌體驅動程式",normalizedTitle:"加入你需要的 ssdt、kexts 和韌體驅動程式",charIndex:306},{level:2,title:"編輯以前",slug:"編輯以前",normalizedTitle:"編輯以前",charIndex:1428}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"建立你的 config.plist 加入你需要的 SSDT、Kexts 和韌體驅動程式 編輯以前",content:'# 開始建構 config.plist\n\n現在，我們收集了所有需要的 Kext (.kext)、SSDT (.aml) 和韌體驅動程式 (.efi)，你的 USB 隨身碟應該開始看起來像這樣：\n\n\n\n * 注意：你的隨身碟看起來可能會與上圖有所不同，不同的系統都會有不同的需求。\n\n\n# 建立你的 config.plist\n\n首先，我們要取得 Sample.plist，這個檔案在 OpenCorePkg的 Docs 資料夾之下：\n\n\n\n接下來，我們將它移動到隨身碟的 EFI 磁碟區（在 Windows 上稱為 BOOT）under EFI/OC/, 並將其重新命名為 config.plist：\n\n\n\n\n# 加入你需要的 SSDT、Kexts 和韌體驅動程式\n\n在本指南接下來的部分，你需要某種形式的 plist 編輯。在本指南中，我們將使用 ProperTree 和 GenSMBIOS 來幫助自動化一些乏味的工作：\n\n * ProperTree\n   * 通用的 plist 編輯器\n * GenSMBIOS\n   * 用於生成 SMBIOS 資料\n\n接下來，打開 ProperTree 並編輯我們的 config.plist：\n\n * ProperTree.command\n   * 適用於 macOS\n   * 提示：在 Scripts 資料夾中有一個 buildapp.command 工具程式，可讓你在 macOS 中將 ProperTree 轉換為獨立的應用程式\n * ProperTree.bat\n   * 適用於 Windows\n\n當 ProperTree 運行後, 通過按下 Cmd/Ctrl + O 開啟在隨身碟的的 config.plist。\n\n在配置檔案打開後，按 Cmd/Ctrl + Shift + R 並將其指向你的 EFI/OC 資料夾來執行「清理快照」：\n\n * 這將從 config.plist 中刪除所有條目，然後將所有 SSDT、kext 和韌體驅動程式的條目新增至配置檔案中\n * 另一個做法是 Cmd/Ctrl + R，它也會將你所有的檔案條目新增至配置檔案，但如果它們之前已被停用，則會維持原狀。這對你進行故障排除很有用，但對我們目前來說並不需要\n\n\n\n完成後，你會看到你的 SSDT、kext 和韌體驅動程式已經加入到你的 config.plist 中：\n\n\n\n * **注意：**如果程式彈出了 "Disable the following kexts with Duplicate CFBundleIdentifiers?" 的快顯通知，請按「Yes」。這是為了確保你沒有注入重複的 kext，因為一些 kext 可能內附一些相同的插件（例如：VoodooInput 同時存在於 VoodooPS2 和 VoodooI2C 的插件資料夾中)\n\n\n\n如果你想稍微清理一下檔案，你可以刪除 #WARNING 條目。這取決於你的個人喜好，因為保留他們不會造成任何問題。\n\nDANGER\n\nconfig.plist 必須 與 EFI 資料夾的內容相匹配. 如果您刪除了一個檔案，卻將其保留在 config.plist, OpenCore 將出錯並停止啟動。\n\n如果你做了任何修改，你可以在 ProperTree 中使用 OC 快照工具（Cmd/Ctrl + R）來更新 config.plist。\n\n\n# 編輯以前\n\n編輯 config.plist 看起來可能很難，其實不然，只是需要一些時間。本指南將告訴您如何設定所有內容，您不會被冷落。這也意味著如果你有問題，你需要檢查你的配置設定以確保它們是正確的。設定 OpenCore 時需要注意的主要事項：\n\n * 所有屬性均必須定義，OpenCore 不設任何預設的回退值，因此除非明確地告訴你可以刪除，否則不要刪除任何章節。如果指南沒有提到該選項，請將其保留為預設值。\n * Sample.plist 不能按原樣使用，你必須根據自己的系統進行配置\n * 避免使用配置器, 這些配置器很少遵守 OpenCore 的配置設定，甚至一些像 Mackie 製作的配置器還會增加 Clover 屬性和破壞 plist！\n\n現在，我們來快速回顧一下我們需要的工具\n\n * ProperTree\n   * 通用的 plist 編輯器\n * GenSMBIOS\n   * 用於生成 SMBIOS 資料\n * Sample/config.plist\n   * 參閱上一章節了解如何取得：config.plist 設定\n\nWARNING\n\n在設定 OpenCore 之前，請多次閱讀本指南，並確保你已正確設定。請注意，圖片並不總是最新的，所以請閱讀圖片下面的文字，如果沒有提到，那麼請將其保持為預設值。\n\n提醒你：你需要根據你使用的平台進行配置。每個平台都有自己的選項值（Quirk）需要你的注意，所以了解你的硬體是非常重要的。\n\n\n# 現在，這些步驟都完成了，你可以開始編輯 config.plist',normalizedContent:'# 開始建構 config.plist\n\n現在，我們收集了所有需要的 kext (.kext)、ssdt (.aml) 和韌體驅動程式 (.efi)，你的 usb 隨身碟應該開始看起來像這樣：\n\n\n\n * 注意：你的隨身碟看起來可能會與上圖有所不同，不同的系統都會有不同的需求。\n\n\n# 建立你的 config.plist\n\n首先，我們要取得 sample.plist，這個檔案在 opencorepkg的 docs 資料夾之下：\n\n\n\n接下來，我們將它移動到隨身碟的 efi 磁碟區（在 windows 上稱為 boot）under efi/oc/, 並將其重新命名為 config.plist：\n\n\n\n\n# 加入你需要的 ssdt、kexts 和韌體驅動程式\n\n在本指南接下來的部分，你需要某種形式的 plist 編輯。在本指南中，我們將使用 propertree 和 gensmbios 來幫助自動化一些乏味的工作：\n\n * propertree\n   * 通用的 plist 編輯器\n * gensmbios\n   * 用於生成 smbios 資料\n\n接下來，打開 propertree 並編輯我們的 config.plist：\n\n * propertree.command\n   * 適用於 macos\n   * 提示：在 scripts 資料夾中有一個 buildapp.command 工具程式，可讓你在 macos 中將 propertree 轉換為獨立的應用程式\n * propertree.bat\n   * 適用於 windows\n\n當 propertree 運行後, 通過按下 cmd/ctrl + o 開啟在隨身碟的的 config.plist。\n\n在配置檔案打開後，按 cmd/ctrl + shift + r 並將其指向你的 efi/oc 資料夾來執行「清理快照」：\n\n * 這將從 config.plist 中刪除所有條目，然後將所有 ssdt、kext 和韌體驅動程式的條目新增至配置檔案中\n * 另一個做法是 cmd/ctrl + r，它也會將你所有的檔案條目新增至配置檔案，但如果它們之前已被停用，則會維持原狀。這對你進行故障排除很有用，但對我們目前來說並不需要\n\n\n\n完成後，你會看到你的 ssdt、kext 和韌體驅動程式已經加入到你的 config.plist 中：\n\n\n\n * **注意：**如果程式彈出了 "disable the following kexts with duplicate cfbundleidentifiers?" 的快顯通知，請按「yes」。這是為了確保你沒有注入重複的 kext，因為一些 kext 可能內附一些相同的插件（例如：voodooinput 同時存在於 voodoops2 和 voodooi2c 的插件資料夾中)\n\n\n\n如果你想稍微清理一下檔案，你可以刪除 #warning 條目。這取決於你的個人喜好，因為保留他們不會造成任何問題。\n\ndanger\n\nconfig.plist 必須 與 efi 資料夾的內容相匹配. 如果您刪除了一個檔案，卻將其保留在 config.plist, opencore 將出錯並停止啟動。\n\n如果你做了任何修改，你可以在 propertree 中使用 oc 快照工具（cmd/ctrl + r）來更新 config.plist。\n\n\n# 編輯以前\n\n編輯 config.plist 看起來可能很難，其實不然，只是需要一些時間。本指南將告訴您如何設定所有內容，您不會被冷落。這也意味著如果你有問題，你需要檢查你的配置設定以確保它們是正確的。設定 opencore 時需要注意的主要事項：\n\n * 所有屬性均必須定義，opencore 不設任何預設的回退值，因此除非明確地告訴你可以刪除，否則不要刪除任何章節。如果指南沒有提到該選項，請將其保留為預設值。\n * sample.plist 不能按原樣使用，你必須根據自己的系統進行配置\n * 避免使用配置器, 這些配置器很少遵守 opencore 的配置設定，甚至一些像 mackie 製作的配置器還會增加 clover 屬性和破壞 plist！\n\n現在，我們來快速回顧一下我們需要的工具\n\n * propertree\n   * 通用的 plist 編輯器\n * gensmbios\n   * 用於生成 smbios 資料\n * sample/config.plist\n   * 參閱上一章節了解如何取得：config.plist 設定\n\nwarning\n\n在設定 opencore 之前，請多次閱讀本指南，並確保你已正確設定。請注意，圖片並不總是最新的，所以請閱讀圖片下面的文字，如果沒有提到，那麼請將其保持為預設值。\n\n提醒你：你需要根據你使用的平台進行配置。每個平台都有自己的選項值（quirk）需要你的注意，所以了解你的硬體是非常重要的。\n\n\n# 現在，這些步驟都完成了，你可以開始編輯 config.plist',charsets:{cjk:!0}},{title:"Converting common Kernel and Kext patches",frontmatter:{search:!1},regularPath:"/clover-conversion/clover-patch.html",relativePath:"clover-conversion/clover-patch.md",key:"v-b3d44012",path:"/clover-conversion/clover-patch.html",headers:[{level:2,title:"Manually converting a patch",slug:"manually-converting-a-patch",normalizedTitle:"manually converting a patch",charIndex:48},{level:2,title:"Common patches in OpenCore and co",slug:"common-patches-in-opencore-and-co",normalizedTitle:"common patches in opencore and co",charIndex:2241},{level:3,title:"Kernel Patches",slug:"kernel-patches",normalizedTitle:"kernel patches",charIndex:2524},{level:3,title:"Kext Patches",slug:"kext-patches",normalizedTitle:"kext patches",charIndex:3223}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Manually converting a patch Common patches in OpenCore and co Kernel Patches Kext Patches",content:"# Converting common Kernel and Kext patches\n\n\n# Manually converting a patch\n\nWhen converting a kernel/kext patch into one for OpenCore, you'll need to remember a few things\n\n * InfoPlistPatch has no feature parity\n * MatchOS is replaced with MinKernel and MaxKernel\n * Both kernel and kext patches go under Kernel -> Patch, and you use Identifier to say whether it's the kernel or a specific kext you want to patch\n\nNow lets look at this example:\n\nKernelToPatch:\n\nKEY          TYPE      VALUE\nComment      String    cpuid_set_cpufamily - force CPUFAMILY_INTEL_PENRYN\nDisabled     Boolean   False\nMatchBuild   String    18G95,18G103\nMatchOS      String    10.14.6\nFind         Data      31db803d4869980006755c\nReplace      Data      bbbc4fea78e95d00000090\n\nSo to convert this patch, see below:\n\n * Comment: Available both on Clover and OpenCore\n * Disabled: OpenCore uses Enabled instead\n * MatchBuild: OpenCore uses MinKernel and MaxKernel, see below for more info\n * MatchOS: OpenCore uses MinKernel and MaxKernel, see below for more info\n * Find: Available both on Clover and OpenCore\n * Replace: Available both on Clover and OpenCore\n * MaskFind: OpenCore uses Mask instead\n * MaskReplace: Available both on Clover and OpenCore\n\nSo the above patch would become:\n\nKernel -> Patch:\n\nKEY           TYPE      VALUE\nComment       String    cpuid_set_cpufamily - force CPUFAMILY_INTEL_PENRYN\nEnabled       Boolean   True\nMinKernel     String    18.7.0\nMaxKernel     String    18.7.0\nFind          Data      31db803d4869980006755c\nReplace       Data      bbbc4fea78e95d00000090\nIdentifier    String    kernel\nLimit         Number    0\nCount         Number    0\nSkip          Number    0\nMask          Data      \nReplaceMask   Data      \n\nFor Min and MaxKernel, we can use the below as for info, so 18G95 has the kernel version 18.7.0 and 18G103 has 18.7.0(both being the same kernel):\n\n * macOS Mojave: Release history\n\nFor Identifier, you'll either define kernel or the kext you want to patch(ie. com.apple.iokit.IOGraphicsFamily )\n\nRegarding Limit, Count and Skip, they are set to 0 so they apply to all instances. Mask and ReplaceMask can be left as blank as Clover doesn't support masking(until very recently but won't be covered here).\n\n\n# Common patches in OpenCore and co\n\nLittle section mentioning common Kernel and Kexts patches that have been absorbed into OpenCore or other kexts. This list is not complete so any that may have been forgotten can be mentioned by opening a new issue. Any help is much appreciated\n\n\n# Kernel Patches\n\nFor a full list of patches OpenCore supports, see /Library/OcAppleKernelLib/CommonPatches.c\n\nGeneral Patches:\n\n * MSR 0xE2 _xcpm_idle instant reboot (c) Pike R. Alpha\n   * Kernel -> Quirks -> AppleXcpmCfgLock\n\nHEDT Specific Patches:\n\nAll of the following patches are inside the Kernel -> Quirk -> AppleXcpmExtraMsrs\n\n * _xcpm_bootstrap © Pike R. Alpha\n * xcpm_pkg_scope_msrs © Pike R. Alpha\n * _xcpm_SMT_scope_msrs 1 © Pike R. Alpha\n * _xcpm_SMT_scope_msrs #2 (c) Pike R. Alpha\n * _xcpm_core_scope_msrs © Pike R. Alpha\n * _xcpm_ performance_patch © Pike R. Alpha\n * xcpm MSR Patch 1 and 2 @Pike R. Alpha\n * /0x82D390/MSR_PP0_POLICY 0x63a xcpm support patch 1 and 2 Pike R. Alpha\n\n\n# Kext Patches\n\n * Disable Panic Kext logging\n   * Kernel -> Quirks -> PanicNoKextDump\n * AppleAHCIPort External Icon Patch1\n   * Kernel -> Quirks -> ExternalDiskIcons\n * SSD Trim Enabler\n   * Kernel -> Quirks -> ThirdPartyDrives\n * USB Port Limit Patches\n   * Kernel -> Quirks -> XhciPortLimit\n * FredWst DP/HDMI patch\n   * AppleALC + WhateverGreen\n * IOPCIFamily Patch\n   * Kernel -> Quirks -> IncreasePciBarSize\n * Disable board-ID check\n   * WhateverGreen\n * AppleHDA Patch\n   * AppleALC\n * IONVMe Patches\n   * Not required anymore on High Sierra and newer\n   * For power management on Mojave and newer: NVMeFix",normalizedContent:"# converting common kernel and kext patches\n\n\n# manually converting a patch\n\nwhen converting a kernel/kext patch into one for opencore, you'll need to remember a few things\n\n * infoplistpatch has no feature parity\n * matchos is replaced with minkernel and maxkernel\n * both kernel and kext patches go under kernel -> patch, and you use identifier to say whether it's the kernel or a specific kext you want to patch\n\nnow lets look at this example:\n\nkerneltopatch:\n\nkey          type      value\ncomment      string    cpuid_set_cpufamily - force cpufamily_intel_penryn\ndisabled     boolean   false\nmatchbuild   string    18g95,18g103\nmatchos      string    10.14.6\nfind         data      31db803d4869980006755c\nreplace      data      bbbc4fea78e95d00000090\n\nso to convert this patch, see below:\n\n * comment: available both on clover and opencore\n * disabled: opencore uses enabled instead\n * matchbuild: opencore uses minkernel and maxkernel, see below for more info\n * matchos: opencore uses minkernel and maxkernel, see below for more info\n * find: available both on clover and opencore\n * replace: available both on clover and opencore\n * maskfind: opencore uses mask instead\n * maskreplace: available both on clover and opencore\n\nso the above patch would become:\n\nkernel -> patch:\n\nkey           type      value\ncomment       string    cpuid_set_cpufamily - force cpufamily_intel_penryn\nenabled       boolean   true\nminkernel     string    18.7.0\nmaxkernel     string    18.7.0\nfind          data      31db803d4869980006755c\nreplace       data      bbbc4fea78e95d00000090\nidentifier    string    kernel\nlimit         number    0\ncount         number    0\nskip          number    0\nmask          data      \nreplacemask   data      \n\nfor min and maxkernel, we can use the below as for info, so 18g95 has the kernel version 18.7.0 and 18g103 has 18.7.0(both being the same kernel):\n\n * macos mojave: release history\n\nfor identifier, you'll either define kernel or the kext you want to patch(ie. com.apple.iokit.iographicsfamily )\n\nregarding limit, count and skip, they are set to 0 so they apply to all instances. mask and replacemask can be left as blank as clover doesn't support masking(until very recently but won't be covered here).\n\n\n# common patches in opencore and co\n\nlittle section mentioning common kernel and kexts patches that have been absorbed into opencore or other kexts. this list is not complete so any that may have been forgotten can be mentioned by opening a new issue. any help is much appreciated\n\n\n# kernel patches\n\nfor a full list of patches opencore supports, see /library/ocapplekernellib/commonpatches.c\n\ngeneral patches:\n\n * msr 0xe2 _xcpm_idle instant reboot (c) pike r. alpha\n   * kernel -> quirks -> applexcpmcfglock\n\nhedt specific patches:\n\nall of the following patches are inside the kernel -> quirk -> applexcpmextramsrs\n\n * _xcpm_bootstrap © pike r. alpha\n * xcpm_pkg_scope_msrs © pike r. alpha\n * _xcpm_smt_scope_msrs 1 © pike r. alpha\n * _xcpm_smt_scope_msrs #2 (c) pike r. alpha\n * _xcpm_core_scope_msrs © pike r. alpha\n * _xcpm_ performance_patch © pike r. alpha\n * xcpm msr patch 1 and 2 @pike r. alpha\n * /0x82d390/msr_pp0_policy 0x63a xcpm support patch 1 and 2 pike r. alpha\n\n\n# kext patches\n\n * disable panic kext logging\n   * kernel -> quirks -> panicnokextdump\n * appleahciport external icon patch1\n   * kernel -> quirks -> externaldiskicons\n * ssd trim enabler\n   * kernel -> quirks -> thirdpartydrives\n * usb port limit patches\n   * kernel -> quirks -> xhciportlimit\n * fredwst dp/hdmi patch\n   * applealc + whatevergreen\n * iopcifamily patch\n   * kernel -> quirks -> increasepcibarsize\n * disable board-id check\n   * whatevergreen\n * applehda patch\n   * applealc\n * ionvme patches\n   * not required anymore on high sierra and newer\n   * for power management on mojave and newer: nvmefix",charsets:{}},{title:"ACPI",frontmatter:{},regularPath:"/config.plist/acpi.html",relativePath:"config.plist/acpi.md",key:"v-6ff798cd",path:"/config.plist/acpi.html",headers:[{level:3,title:"桌面電腦",slug:"桌面電腦",normalizedTitle:"桌面電腦",charIndex:714},{level:3,title:"高端桌面電腦（HEDT）",slug:"高端桌面電腦-hedt",normalizedTitle:"高端桌面電腦（hedt）",charIndex:1748},{level:3,title:"筆記型電腦",slug:"筆記型電腦",normalizedTitle:"筆記型電腦",charIndex:2150},{level:3,title:"筆記型電腦（續）",slug:"筆記型電腦-續",normalizedTitle:"筆記型電腦（續）",charIndex:2859}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"桌面電腦 高端桌面電腦（HEDT） 筆記型電腦 筆記型電腦（續）",content:"# ACPI\n\nACPI（進階組態與電源介面，Advanced Configuration and Power Interface）是用於發現和設定電腦硬體的開放標準。ACPI 規範 定義了標準的表（如：DSDT, SSDT, FACS, DMAR）和多種用於執行的方法（如：_DSM, _PRW）。現代硬體只需進行少量更改即可保持 ACPI 相容性，並 OpenCore 提供了一些用於此類更改的選項。\n\n要編譯和反彙編 ACPI 表，可以使用 ACPICA 開發的 iASL compiler。iASL 編譯器的 GUI 軟體可以從 Acidanthera/MaciASL 下載。\n\nACPI 修改（在所有操作系統）會循以下順序執行：\n\n * 處理 Delete\n * 處理 Quirks\n * 處理 Patch\n * 處理 Add\n\n在所有操作系統套用修改可以解決操作系統檢測不正確（與 ACPI 規範一致，在操作系統啟動之前不可能）、多操作系統開機和困難的 ACPI 除錯等問題。 因此，在寫入“_OSI”更改時可能需要更多注意。\n\n提早套用修補可以編寫所謂的「代理」修補，其中原始方法在原始表中進行修補，並在修補後的表中執行。\n\n\n# Add\n\n資訊\n\n這裡是你將為系統加入 SSDT 的地方，它們對啟動 macOS 非常重要，且有許多用途，如 USB 映射、停用不支援的 GPU 等。在我們的系統中, 甚至需要這些才可以啟動. 你可以在 ACPI 入門教學了解如何製作 SSDT\n\n對於我們來說，我們需要一些 SSDT 來帶回 Clover 提供的功能。現在，我們來快速回顧一下不同平台所需要的 SSDT：\n\n\n# 桌面電腦\n\n平台                        CPU                           EC             AWAC        NVRAM      USB         IMEI\nPenryn                    N/A                           SSDT-EC        N/A         N/A        N/A         N/A\nLynnfield and Clarkdale\nSandyBridge               CPU-PM (安裝完畢後執行)                                                                SSDT-IMEI\nIvy Bridge                                                                                                SSDT-IMEI\nHaswell                   SSDT-PLUG                                                                       N/A\nBroadwell\nSkylake                                                 SSDT-EC-USBX\nKaby Lake\nCoffee Lake                                                            SSDT-AWAC   SSDT-PMC\nComet Lake                                                                         N/A        SSDT-RHUB\nAMD (15/16h)              N/A                                          N/A                    N/A\nAMD (17/19h)              SSDT-CPUR for B550 and A520\n\n\n# 高端桌面電腦（HEDT）\n\n平台                     CPU         EC             RTC               PCI\nNehalem and Westmere   N/A         SSDT-EC        N/A               N/A\nSandy Bridge-E                                                      SSDT-UNC\nIvy Bridge-E\nHaswell-E              SSDT-PLUG   SSDT-EC-USBX   SSDT-RTC0-RANGE\nBroadwell-E\nSkylake-X                                                           N/A\n\n\n# 筆記型電腦\n\n平台                                       CPU                            EC             BACKLIGHT   I2C TRACKPAD   AWAC\nClarksfield and Arrandale                N/A                            SSDT-EC        SSDT-PNLF   N/A            N/A\nSandyBridge                              CPU-PM (Run in Post-Install)\nIvy Bridge\nHaswell                                  SSDT-PLUG                                                 SSDT-GPI0\nBroadwell\nSkylake                                                                 SSDT-EC-USBX\nKaby Lake\nCoffee Lake (8th Gen) and Whiskey Lake                                                 SSDT-PNLF                  SSDT-AWAC\nCoffee Lake (9th Gen)\nComet Lake\nIce Lake\n\n\n# 筆記型電腦（續）\n\n平台                                       USB         IRQ        NVRAM      IMEI\nClarksfield and Arrandale                N/A         IRQ SSDT   N/A        N/A\nSandy Bridge                                         N/A                   SSDT-IMEI\nIvy Bridge\nHaswell                                                                    N/A\nBroadwell\nSkylake\nKaby Lake\nCoffee Lake (8th Gen) and Whiskey Lake\nCoffee Lake (9th Gen)                                           SSDT-PMC\nComet Lake                                                      N/A\nIce Lake                                 SSDT-RHUB\n\n請注意，你不應該在這裡加入您生成的 DSDT.aml，它已經在你的韌體中了。因此，如果存在的話，請刪除 config plist 和 EFI/OC/ACPI 下的相關條目。\n\n對於那些想要更深入地傾印你的 DSDT、如何製作這些 SSDT 及編譯它們的人，請參閱 ACPI 入門教學頁面。編譯後的 SSDT 會有一個 .aml 副檔名（已編譯）並會放入 EFI/OC/ACPI 資料夾，且必須在你的配置檔案裡的 ACPI -> Add 下指定。\n\n\n# Delete\n\n這裡將阻止載入某些 ACPI 表。\n\n * 大部分非 Sandy Bridge 和 Ivy Bridge 的電腦不需要設定這一部分。\n\n資訊\n\nSandy Bridge 和 Ivy Bridge 的電腦需要設定這一部分。這是由於蘋果的 XCPM 對 Sandy Bridge 和 Ivy Bridge 的支援不太好，會導致開機時令 AppleIntelCPUPowerManagement 出現錯誤。要避免這種情況，我們要在 安裝後 建立我們自己的 PM SSDT，並「刪除」原有的表（注意：這是暫時性的，直至我們建立了自己的 SSDT-PM，我們稍後會重新啟用這些表）。\n\n刪除 CpuPm：\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\n刪除 Cpu0Ist：\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\n這個章節允許我們通過 OpenCore 動態修改 ACPI 部分内容（DSDT、SSDT 等）。對我們來說，我們的修補程式將由我們的 SSDT 處理。這是一個更簡潔的解決方案，因為這將允許我們使用 OpenCore 啟動 Windows 和其他操作系統。\n\n資訊\n\n * 重新命名 OSI\n   * 筆記型電腦可能需要進行這個設定。\n   * 這個設定在使用 SSDT-XOSI 時是必需的，因為我們會將所有的 OSI 調用重定向到這個 SSDT，如果你使用 SSDT-GPIO 則不需要\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\n與 ACPI 相關的設定，請將所有內容保留為預設值，我們不需要這些選項值。\n\n\n# 完成此部分後，請編輯 Booter 部分",normalizedContent:"# acpi\n\nacpi（進階組態與電源介面，advanced configuration and power interface）是用於發現和設定電腦硬體的開放標準。acpi 規範 定義了標準的表（如：dsdt, ssdt, facs, dmar）和多種用於執行的方法（如：_dsm, _prw）。現代硬體只需進行少量更改即可保持 acpi 相容性，並 opencore 提供了一些用於此類更改的選項。\n\n要編譯和反彙編 acpi 表，可以使用 acpica 開發的 iasl compiler。iasl 編譯器的 gui 軟體可以從 acidanthera/maciasl 下載。\n\nacpi 修改（在所有操作系統）會循以下順序執行：\n\n * 處理 delete\n * 處理 quirks\n * 處理 patch\n * 處理 add\n\n在所有操作系統套用修改可以解決操作系統檢測不正確（與 acpi 規範一致，在操作系統啟動之前不可能）、多操作系統開機和困難的 acpi 除錯等問題。 因此，在寫入“_osi”更改時可能需要更多注意。\n\n提早套用修補可以編寫所謂的「代理」修補，其中原始方法在原始表中進行修補，並在修補後的表中執行。\n\n\n# add\n\n資訊\n\n這裡是你將為系統加入 ssdt 的地方，它們對啟動 macos 非常重要，且有許多用途，如 usb 映射、停用不支援的 gpu 等。在我們的系統中, 甚至需要這些才可以啟動. 你可以在 acpi 入門教學了解如何製作 ssdt\n\n對於我們來說，我們需要一些 ssdt 來帶回 clover 提供的功能。現在，我們來快速回顧一下不同平台所需要的 ssdt：\n\n\n# 桌面電腦\n\n平台                        cpu                           ec             awac        nvram      usb         imei\npenryn                    n/a                           ssdt-ec        n/a         n/a        n/a         n/a\nlynnfield and clarkdale\nsandybridge               cpu-pm (安裝完畢後執行)                                                                ssdt-imei\nivy bridge                                                                                                ssdt-imei\nhaswell                   ssdt-plug                                                                       n/a\nbroadwell\nskylake                                                 ssdt-ec-usbx\nkaby lake\ncoffee lake                                                            ssdt-awac   ssdt-pmc\ncomet lake                                                                         n/a        ssdt-rhub\namd (15/16h)              n/a                                          n/a                    n/a\namd (17/19h)              ssdt-cpur for b550 and a520\n\n\n# 高端桌面電腦（hedt）\n\n平台                     cpu         ec             rtc               pci\nnehalem and westmere   n/a         ssdt-ec        n/a               n/a\nsandy bridge-e                                                      ssdt-unc\nivy bridge-e\nhaswell-e              ssdt-plug   ssdt-ec-usbx   ssdt-rtc0-range\nbroadwell-e\nskylake-x                                                           n/a\n\n\n# 筆記型電腦\n\n平台                                       cpu                            ec             backlight   i2c trackpad   awac\nclarksfield and arrandale                n/a                            ssdt-ec        ssdt-pnlf   n/a            n/a\nsandybridge                              cpu-pm (run in post-install)\nivy bridge\nhaswell                                  ssdt-plug                                                 ssdt-gpi0\nbroadwell\nskylake                                                                 ssdt-ec-usbx\nkaby lake\ncoffee lake (8th gen) and whiskey lake                                                 ssdt-pnlf                  ssdt-awac\ncoffee lake (9th gen)\ncomet lake\nice lake\n\n\n# 筆記型電腦（續）\n\n平台                                       usb         irq        nvram      imei\nclarksfield and arrandale                n/a         irq ssdt   n/a        n/a\nsandy bridge                                         n/a                   ssdt-imei\nivy bridge\nhaswell                                                                    n/a\nbroadwell\nskylake\nkaby lake\ncoffee lake (8th gen) and whiskey lake\ncoffee lake (9th gen)                                           ssdt-pmc\ncomet lake                                                      n/a\nice lake                                 ssdt-rhub\n\n請注意，你不應該在這裡加入您生成的 dsdt.aml，它已經在你的韌體中了。因此，如果存在的話，請刪除 config plist 和 efi/oc/acpi 下的相關條目。\n\n對於那些想要更深入地傾印你的 dsdt、如何製作這些 ssdt 及編譯它們的人，請參閱 acpi 入門教學頁面。編譯後的 ssdt 會有一個 .aml 副檔名（已編譯）並會放入 efi/oc/acpi 資料夾，且必須在你的配置檔案裡的 acpi -> add 下指定。\n\n\n# delete\n\n這裡將阻止載入某些 acpi 表。\n\n * 大部分非 sandy bridge 和 ivy bridge 的電腦不需要設定這一部分。\n\n資訊\n\nsandy bridge 和 ivy bridge 的電腦需要設定這一部分。這是由於蘋果的 xcpm 對 sandy bridge 和 ivy bridge 的支援不太好，會導致開機時令 appleintelcpupowermanagement 出現錯誤。要避免這種情況，我們要在 安裝後 建立我們自己的 pm ssdt，並「刪除」原有的表（注意：這是暫時性的，直至我們建立了自己的 ssdt-pm，我們稍後會重新啟用這些表）。\n\n刪除 cpupm：\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\n刪除 cpu0ist：\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\n這個章節允許我們通過 opencore 動態修改 acpi 部分内容（dsdt、ssdt 等）。對我們來說，我們的修補程式將由我們的 ssdt 處理。這是一個更簡潔的解決方案，因為這將允許我們使用 opencore 啟動 windows 和其他操作系統。\n\n資訊\n\n * 重新命名 osi\n   * 筆記型電腦可能需要進行這個設定。\n   * 這個設定在使用 ssdt-xosi 時是必需的，因為我們會將所有的 osi 調用重定向到這個 ssdt，如果你使用 ssdt-gpio 則不需要\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\n與 acpi 相關的設定，請將所有內容保留為預設值，我們不需要這些選項值。\n\n\n# 完成此部分後，請編輯 booter 部分",charsets:{cjk:!0}},{title:"BIOS 設定",frontmatter:{},regularPath:"/config.plist/bios-settings.html",relativePath:"config.plist/bios-settings.md",key:"v-2dbdfc6e",path:"/config.plist/bios-settings.html",headers:[{level:2,title:"Intel 主板",slug:"intel-主板",normalizedTitle:"intel 主板",charIndex:159},{level:3,title:"停用",slug:"停用",normalizedTitle:"停用",charIndex:172},{level:3,title:"啟用",slug:"啟用",normalizedTitle:"啟用",charIndex:266},{level:2,title:"AMD 主板",slug:"amd-主板",normalizedTitle:"amd 主板",charIndex:839},{level:3,title:"停用",slug:"停用-2",normalizedTitle:"停用",charIndex:172},{level:3,title:"啟用",slug:"啟用-2",normalizedTitle:"啟用",charIndex:266}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Intel 主板 停用 啟用 AMD 主板 停用 啟用",content:"# BIOS 設定\n\n你已經完成建構 config.plist。在你開始安裝 macOS 前，請進入 BIOS 設定選單，並將韌體設定為與 hackintosh 相容的設置。\n\n * 注意：並不是所有選項都能在你的韌體中找到，我們建議設定應儘可能匹配。如果這些選項在你的 BIOS 中沒有出現，你亦不要太擔心\n\n\n# Intel 主板\n\n\n# 停用\n\n * 快速啟動\n * 安全開機\n * Serial/COM 連接埠\n * Parallel 連接埠\n * VT-d（如果你已將 DisableIoMapper 設為 YES，則可以啟用）\n * Compatibility Support Module（CSM）（在大多數情況下，你必須關閉此選項，當該選項啟用時，像 gIO 等等的 GPU 錯誤或停頓會很常見）\n * Thunderbolt（在初始安裝的時候需要停用，因為一旦設定不當會造成 Thunderbolt 出現問題）\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock（MSR 0xE2 寫入保護）（必須關閉這個功能，如果你無法在 BIOS 找到這個功能，請在 Kernel -> Quirks 啟用 AppleCpuPmCfgLock。你的系統無法在 CFG Lock 啟用的情況下啟動）\n\n\n# 啟用\n\n * VT-x\n * Above 4G Decoding（這是必須啟用的選項。如果你找不到這個選項，請在 boot-args 加入 npci=0x3000 參數。但請不要既啟用這個選項，又加入 npci 參數。）\n * 超線程\n * 執行禁用位元\n * EHCI/XHCI 切換（Hand-off）\n * 操作系統類型：Windows 8.1/10 UEFI 模式（某些主板可能需要選用「其他操作系統」）\n * 預先分配的 DVMT（iGPU 記憶體）：32MB 或更多\n * SATA 模式：AHCI\n\n\n# AMD 主板\n\n\n# 停用\n\n * 快速啟動\n * 安全開機\n * Serial/COM 連接埠\n * Parallel 連接埠\n * Compatibility Support Module（CSM）（在大多數情況下，你必須關閉此選項，當該選項啟用時，像 gIO 等等的 GPU 錯誤或停頓會很常見）\n * IOMMU\n\n\n# 啟用\n\n * Above 4G Decoding（這是必須啟用的選項。如果你找不到這個選項，請在 boot-args 加入 npci=0x3000 參數。但請不要既啟用這個選項，又加入 npci 參數。）\n   * 如果你使用的是 Gigabyte/Aorus 或 AsRock 主板，啟用這個選項可能會破壞某些驅動程式(如：以太網）和／或導致其他操作系統無法啟動，如果發生了這種情況，請停用這個選項並改為加入 npci 參數。\n   * 2020 或以後的 BIOS 請注意：當啟用這個選項時，, 一些 X570 和更新的主板上可能會提供可調整的 BAR 的支援，如果啓用的話，請確保 Booter -> Quirks -> ResizeAppleGpuBars 已設定為 0。\n * 超線程\n   * 3990X 用戶請特别注意：macOS 内核目前不支援超過 64 個線程，如果内核發現線程超過 64 個會導致內核錯誤。3990X CPU 共有 128 個線程，因此需要停用其中的一半。對於這種情況，我們建議在 BIOS 中停用超線程。\n * EHCI/XHCI 切換（Hand-off）\n * 操作系統類型：Windows 8.1/10 UEFI 模式（某些主板可能需要選用「其他操作系統」）\n * iGPU 記憶體：512MB 或更多\n * SATA 模式：AHCI\n\n\n# 現在，你已完成所有開機前的設定，請開始安裝 macOS",normalizedContent:"# bios 設定\n\n你已經完成建構 config.plist。在你開始安裝 macos 前，請進入 bios 設定選單，並將韌體設定為與 hackintosh 相容的設置。\n\n * 注意：並不是所有選項都能在你的韌體中找到，我們建議設定應儘可能匹配。如果這些選項在你的 bios 中沒有出現，你亦不要太擔心\n\n\n# intel 主板\n\n\n# 停用\n\n * 快速啟動\n * 安全開機\n * serial/com 連接埠\n * parallel 連接埠\n * vt-d（如果你已將 disableiomapper 設為 yes，則可以啟用）\n * compatibility support module（csm）（在大多數情況下，你必須關閉此選項，當該選項啟用時，像 gio 等等的 gpu 錯誤或停頓會很常見）\n * thunderbolt（在初始安裝的時候需要停用，因為一旦設定不當會造成 thunderbolt 出現問題）\n * intel sgx\n * intel platform trust\n * cfg lock（msr 0xe2 寫入保護）（必須關閉這個功能，如果你無法在 bios 找到這個功能，請在 kernel -> quirks 啟用 applecpupmcfglock。你的系統無法在 cfg lock 啟用的情況下啟動）\n\n\n# 啟用\n\n * vt-x\n * above 4g decoding（這是必須啟用的選項。如果你找不到這個選項，請在 boot-args 加入 npci=0x3000 參數。但請不要既啟用這個選項，又加入 npci 參數。）\n * 超線程\n * 執行禁用位元\n * ehci/xhci 切換（hand-off）\n * 操作系統類型：windows 8.1/10 uefi 模式（某些主板可能需要選用「其他操作系統」）\n * 預先分配的 dvmt（igpu 記憶體）：32mb 或更多\n * sata 模式：ahci\n\n\n# amd 主板\n\n\n# 停用\n\n * 快速啟動\n * 安全開機\n * serial/com 連接埠\n * parallel 連接埠\n * compatibility support module（csm）（在大多數情況下，你必須關閉此選項，當該選項啟用時，像 gio 等等的 gpu 錯誤或停頓會很常見）\n * iommu\n\n\n# 啟用\n\n * above 4g decoding（這是必須啟用的選項。如果你找不到這個選項，請在 boot-args 加入 npci=0x3000 參數。但請不要既啟用這個選項，又加入 npci 參數。）\n   * 如果你使用的是 gigabyte/aorus 或 asrock 主板，啟用這個選項可能會破壞某些驅動程式(如：以太網）和／或導致其他操作系統無法啟動，如果發生了這種情況，請停用這個選項並改為加入 npci 參數。\n   * 2020 或以後的 bios 請注意：當啟用這個選項時，, 一些 x570 和更新的主板上可能會提供可調整的 bar 的支援，如果啓用的話，請確保 booter -> quirks -> resizeapplegpubars 已設定為 0。\n * 超線程\n   * 3990x 用戶請特别注意：macos 内核目前不支援超過 64 個線程，如果内核發現線程超過 64 個會導致內核錯誤。3990x cpu 共有 128 個線程，因此需要停用其中的一半。對於這種情況，我們建議在 bios 中停用超線程。\n * ehci/xhci 切換（hand-off）\n * 操作系統類型：windows 8.1/10 uefi 模式（某些主板可能需要選用「其他操作系統」）\n * igpu 記憶體：512mb 或更多\n * sata 模式：ahci\n\n\n# 現在，你已完成所有開機前的設定，請開始安裝 macos",charsets:{cjk:!0}},{title:"Booter",frontmatter:{},regularPath:"/config.plist/booter.html",relativePath:"config.plist/booter.md",key:"v-7bb6e866",path:"/config.plist/booter.html",headers:[{level:2,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:200},{level:2,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:168},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:2045},{level:3,title:"Intel 桌面平台",slug:"intel-桌面平台",normalizedTitle:"intel 桌面平台",charIndex:2311},{level:3,title:"Intel 高端桌面平台（HEDT）",slug:"intel-高端桌面平台-hedt",normalizedTitle:"intel 高端桌面平台（hedt）",charIndex:3313},{level:3,title:"Intel 筆記型電腦平台",slug:"intel-筆記型電腦平台",normalizedTitle:"intel 筆記型電腦平台",charIndex:3872},{level:3,title:"AMD 平台",slug:"amd-平台",normalizedTitle:"amd 平台",charIndex:4605}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"MmioWhitelist Quirks 通用 Intel 桌面平台 Intel 高端桌面平台（HEDT） Intel 筆記型電腦平台 AMD 平台",content:"# Booter\n\n此部分允許對操作系統開機程式（主要是 Apple 開機程式 (boot.efi)）套用不同類型的 UEFI 修改。這些修改目前為不同的韌體類型提供了各種修補和環境更改。其中一些功能最初是作為現已不再維護的 AptioMemoryFix.efi 的一部分實現的。\n\nBooter 修改會循以下順序執行：\n\n * 處理 Quirks\n * 處理 Patch\n\n請注意，大多數情況下，“MmioWhitelist” 允許將通常被忽略的空間傳遞到 macOS，與 “DevirtualiseMmio” 配合使用時非常有用。詳細訊息請參閱閱這裡\n\n\n# MmioWhitelist\n\n這個章節允許將通常被忽略的空間傳送予 macOS，與 DevirtualiseMmio 配合使用時會很有用。\n\n\n# Quirks\n\n資訊\n\n * AvoidRuntimeDefrag: YES\n   * 修復 UEFI 執行期服務，如日期、時間、NVRAM、電源控制等\n   * 使用傳統 BIOS 的電腦應該停用這個選項\n * DevirtualiseMmio: YES\n   * 減少被盜記憶體佔用，擴展 slide=N 值的選項，並對修復 Z390 上的記憶體分配問題非常有幫助。需要 Icelake 和 Z390 Coffee Lake 系統，並啟用 ProtectUefiServices。\n * EnableSafeModeSlide: YES\n   * 允許 Slide 變量在安全模式下使用。但這個選項只適用於使用 UEFI 的電腦。\n * EnableWriteUnprotector: YES\n   * 需要從 UEFI 平台的 CR0 寄存器中移除寫入保護。\n   * 在 Coffee Lake 和更新的平台中，你應啟用 RebuildAppleMemoryMap 選項而停用本選項，因為兩個選項在新平台中經常有衝突。\n   * 然而，由於 OEM 沒有使用最新的 EDKII 版本，您可能會發現上述組合將導致早期啟動失敗。這是由於缺少 MEMORY_ATTRIBUTE_TABLE 而引起。如發生這種情況，我们建議停用 RebuildAppleMemoryMap 並啟用 EnableWriteUnprotector。更多訊息請參見故障診斷部分。\n * ProtectMemoryRegions: NO\n   * 修補錯誤映射的 CSM/MMIO 區域的記憶體區域類型。\n   * 所有使用 coreboot UEFI 韌體的 Chromebook 都需要啟用這個選項。\n * ProtectUefiServices: NO\n   * 保護 UEFI 服務不被韌體覆蓋，主要與 VM、Icelake 和 Z390 系統有關。\n   * 在 Z390 系統中，請啟用這個選項。\n * ProvideCustomSlide: YES\n   * 用於 Slide 變量計算。然而，這個選項的必要性取決於除錯日誌中是否出現 OCABC: Only N/256 slide values are usable! 訊息。如果在日誌中顯示 OCABC: All slides are usable! You can disable ProvideCustomSlide! 訊息，你可以停用 ProvideCustomSlide。\n * RebuildAppleMemoryMap: YES\n   * 生成與 macOS 相容的記憶體映射，可能會在一些筆記型電腦 OEM 韌體上崩潰，如果你因此而收到早期開機失敗，請停用此功能。\n   * 在 Kaby Lake 和更舊的平台中，你應啟用 EnableWriteUnprotector 選項而停用本選項。\n * ResizeAppleGpuBars: -1\n   * 啟動 macOS 時，如果設定為 0，將減少 GPU PCI 條的大小，設定為 -1 則停用\n   * 使用此選項可以設定其他 PCI Bar 值，但可能導致不穩定\n   * 只有在韌體中啟用了對 Resizable BAR 的支援時，才需要將此屬性設定為 0。\n * SetupVirtualMap: YES\n   * 修復了 SetVirtualAddresses 對虛擬地址的調用問題，Gigabyte 主板需要啟用這個選項來解決早期內核錯誤\n   * 但是，此選項在 Comet Lake 因其記憶體保護而無法工作。ASUS，Gigabyte 和 AsRock 主板無法在本選項啟用的情況下開機。\n * SyncRuntimePermissions: YES\n   * 修正了與 MAT 表的對齊，並要求使用 MAT 表啟動 Windows 和 Linux，也推薦用於 macOS。主要適用於重建蘋果記憶體映射用戶。\n\n接下來，請根據平台進行設定。\n\n\n# 通用\n\n# 啟動 OS X 10.4 至 10.6 的系統\n\n請進行以下設定：\n\n選項值                     是否啟用\nRebuildAppleMemoryMap   YES\n\n# 使用 coreboot UEFI 韌體的 Chromebook\n\n請進行以下設定：\n\n選項值                    是否啟用   說明\nProtectMemoryRegions   YES    修復了某些 Chromebook 上的關機／重新啟動問題，否則會導致 AppleEFINVRAM 內核錯誤。\n\n\n# Intel 桌面平台\n\n傳統 BIOS   UEFI\n          \n\n# 傳統 BIOS 系統（Yonah, Conroe, Penryn）\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nAvoidRuntimeDefrag       NO     Big Sur 可能需要啟用這個選項值\nEnableSafeModeSlide      NO     \nEnableWriteUnprotector   NO     \nProvideCustomSlide       NO     \nSetupVirtualMap          NO     \n\n# Coffee Lake\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nDevirtualiseMmio         YES    \nEnableWriteUnprotector   NO     \nProtectUefiServices      YES    在 Z390 系統上需要啟用\nRebuildAppleMemoryMap    YES    \nResizeAppleGpuBars       -1     如果你的韌體支援增加 GPU Bar 大小（可調整大小的 BAR 的支援），請將其設定為 0\nSyncRuntimePermissions   YES    \n\n# Comet Lake\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nDevirtualiseMmio         YES    \nEnableWriteUnprotector   NO     \nProtectUefiServices      YES    \nRebuildAppleMemoryMap    YES    \nResizeAppleGpuBars       -1     如果你的韌體支援增加 GPU Bar 大小（可調整大小的 BAR 的支援），請將其設定為 0\nSetupVirtualMap          NO     \nSyncRuntimePermissions   YES    \n\n# 其他（未列出的）系統\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n\n# Intel 高端桌面平台（HEDT）\n\n# Nehalem 和 Westmere\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nAvoidRuntimeDefrag       NO     Big Sur 可能需要啟用這個選項值\nEnableSafeModeSlide      NO     \nEnableWriteUnprotector   NO     \nProvideCustomSlide       NO     \nSetupVirtualMap          NO     \n\n# Skylake-X/W 和 Cascade Lake-X/W\n\n\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nDevirtualiseMmio         YES    \nEnableWriteUnprotector   NO     \nRebuildAppleMemoryMap    YES    \nSetupVirtualMap          YES    \nSyncRuntimePermissions   YES    \n\n# 其他（未列出的）系統\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n\n# Intel 筆記型電腦平台\n\n# Clarksfield 和 Arrandale\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nAvoidRuntimeDefrag       NO     Big Sur 可能需要啟用這個選項值\nEnableSafeModeSlide      NO     \nEnableWriteUnprotector   NO     \nProvideCustomSlide       NO     \nSetupVirtualMap          NO     \n\n# Coffee Lake 和 Whiskey Lake\n\n\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nEnableWriteUnprotector   NO     \nRebuildAppleMemoryMap    YES    \nSyncRuntimePermissions   YES    \n\n# Coffee Lake Plus 和 Comet Lake\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nDevirtualiseMmio         YES    \nEnableWriteUnprotector   NO     \nProtectUefiServices      YES    \nRebuildAppleMemoryMap    YES    \nSyncRuntimePermissions   YES    \n\n# 其他（未列出的）系統\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n\n# AMD 平台\n\n# Bulldozer(15h) 和 Jaguar(16h)\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n# Ryzen 和 Threadripper（17h and 19h）\n\n\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nDevirtualiseMmio         NO     如果你使用的是 TRx40 系統，請啟用這個選項並參閱這個指南\nEnableWriteUnprotector   NO     \nRebuildAppleMemoryMap    YES    \nResizeAppleGpuBars       -1     如果你的韌體支援增加 GPU Bar 大小（可調整大小的 BAR 的支援），請將其設定為 0\nSetupVirtualMap          YES    X570、B550、A520、TRx40，及更新至 2020 年度後期 BIOS 的 X470、B450\n                                主板則可能需要停用\nSyncRuntimePermissions   YES    \n\n\n# 完成此部分後，請編輯 DeviceProperties 部分",normalizedContent:"# booter\n\n此部分允許對操作系統開機程式（主要是 apple 開機程式 (boot.efi)）套用不同類型的 uefi 修改。這些修改目前為不同的韌體類型提供了各種修補和環境更改。其中一些功能最初是作為現已不再維護的 aptiomemoryfix.efi 的一部分實現的。\n\nbooter 修改會循以下順序執行：\n\n * 處理 quirks\n * 處理 patch\n\n請注意，大多數情況下，“mmiowhitelist” 允許將通常被忽略的空間傳遞到 macos，與 “devirtualisemmio” 配合使用時非常有用。詳細訊息請參閱閱這裡\n\n\n# mmiowhitelist\n\n這個章節允許將通常被忽略的空間傳送予 macos，與 devirtualisemmio 配合使用時會很有用。\n\n\n# quirks\n\n資訊\n\n * avoidruntimedefrag: yes\n   * 修復 uefi 執行期服務，如日期、時間、nvram、電源控制等\n   * 使用傳統 bios 的電腦應該停用這個選項\n * devirtualisemmio: yes\n   * 減少被盜記憶體佔用，擴展 slide=n 值的選項，並對修復 z390 上的記憶體分配問題非常有幫助。需要 icelake 和 z390 coffee lake 系統，並啟用 protectuefiservices。\n * enablesafemodeslide: yes\n   * 允許 slide 變量在安全模式下使用。但這個選項只適用於使用 uefi 的電腦。\n * enablewriteunprotector: yes\n   * 需要從 uefi 平台的 cr0 寄存器中移除寫入保護。\n   * 在 coffee lake 和更新的平台中，你應啟用 rebuildapplememorymap 選項而停用本選項，因為兩個選項在新平台中經常有衝突。\n   * 然而，由於 oem 沒有使用最新的 edkii 版本，您可能會發現上述組合將導致早期啟動失敗。這是由於缺少 memory_attribute_table 而引起。如發生這種情況，我们建議停用 rebuildapplememorymap 並啟用 enablewriteunprotector。更多訊息請參見故障診斷部分。\n * protectmemoryregions: no\n   * 修補錯誤映射的 csm/mmio 區域的記憶體區域類型。\n   * 所有使用 coreboot uefi 韌體的 chromebook 都需要啟用這個選項。\n * protectuefiservices: no\n   * 保護 uefi 服務不被韌體覆蓋，主要與 vm、icelake 和 z390 系統有關。\n   * 在 z390 系統中，請啟用這個選項。\n * providecustomslide: yes\n   * 用於 slide 變量計算。然而，這個選項的必要性取決於除錯日誌中是否出現 ocabc: only n/256 slide values are usable! 訊息。如果在日誌中顯示 ocabc: all slides are usable! you can disable providecustomslide! 訊息，你可以停用 providecustomslide。\n * rebuildapplememorymap: yes\n   * 生成與 macos 相容的記憶體映射，可能會在一些筆記型電腦 oem 韌體上崩潰，如果你因此而收到早期開機失敗，請停用此功能。\n   * 在 kaby lake 和更舊的平台中，你應啟用 enablewriteunprotector 選項而停用本選項。\n * resizeapplegpubars: -1\n   * 啟動 macos 時，如果設定為 0，將減少 gpu pci 條的大小，設定為 -1 則停用\n   * 使用此選項可以設定其他 pci bar 值，但可能導致不穩定\n   * 只有在韌體中啟用了對 resizable bar 的支援時，才需要將此屬性設定為 0。\n * setupvirtualmap: yes\n   * 修復了 setvirtualaddresses 對虛擬地址的調用問題，gigabyte 主板需要啟用這個選項來解決早期內核錯誤\n   * 但是，此選項在 comet lake 因其記憶體保護而無法工作。asus，gigabyte 和 asrock 主板無法在本選項啟用的情況下開機。\n * syncruntimepermissions: yes\n   * 修正了與 mat 表的對齊，並要求使用 mat 表啟動 windows 和 linux，也推薦用於 macos。主要適用於重建蘋果記憶體映射用戶。\n\n接下來，請根據平台進行設定。\n\n\n# 通用\n\n# 啟動 os x 10.4 至 10.6 的系統\n\n請進行以下設定：\n\n選項值                     是否啟用\nrebuildapplememorymap   yes\n\n# 使用 coreboot uefi 韌體的 chromebook\n\n請進行以下設定：\n\n選項值                    是否啟用   說明\nprotectmemoryregions   yes    修復了某些 chromebook 上的關機／重新啟動問題，否則會導致 appleefinvram 內核錯誤。\n\n\n# intel 桌面平台\n\n傳統 bios   uefi\n          \n\n# 傳統 bios 系統（yonah, conroe, penryn）\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\navoidruntimedefrag       no     big sur 可能需要啟用這個選項值\nenablesafemodeslide      no     \nenablewriteunprotector   no     \nprovidecustomslide       no     \nsetupvirtualmap          no     \n\n# coffee lake\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\ndevirtualisemmio         yes    \nenablewriteunprotector   no     \nprotectuefiservices      yes    在 z390 系統上需要啟用\nrebuildapplememorymap    yes    \nresizeapplegpubars       -1     如果你的韌體支援增加 gpu bar 大小（可調整大小的 bar 的支援），請將其設定為 0\nsyncruntimepermissions   yes    \n\n# comet lake\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\ndevirtualisemmio         yes    \nenablewriteunprotector   no     \nprotectuefiservices      yes    \nrebuildapplememorymap    yes    \nresizeapplegpubars       -1     如果你的韌體支援增加 gpu bar 大小（可調整大小的 bar 的支援），請將其設定為 0\nsetupvirtualmap          no     \nsyncruntimepermissions   yes    \n\n# 其他（未列出的）系統\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n\n# intel 高端桌面平台（hedt）\n\n# nehalem 和 westmere\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\navoidruntimedefrag       no     big sur 可能需要啟用這個選項值\nenablesafemodeslide      no     \nenablewriteunprotector   no     \nprovidecustomslide       no     \nsetupvirtualmap          no     \n\n# skylake-x/w 和 cascade lake-x/w\n\n\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\ndevirtualisemmio         yes    \nenablewriteunprotector   no     \nrebuildapplememorymap    yes    \nsetupvirtualmap          yes    \nsyncruntimepermissions   yes    \n\n# 其他（未列出的）系統\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n\n# intel 筆記型電腦平台\n\n# clarksfield 和 arrandale\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\navoidruntimedefrag       no     big sur 可能需要啟用這個選項值\nenablesafemodeslide      no     \nenablewriteunprotector   no     \nprovidecustomslide       no     \nsetupvirtualmap          no     \n\n# coffee lake 和 whiskey lake\n\n\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\nenablewriteunprotector   no     \nrebuildapplememorymap    yes    \nsyncruntimepermissions   yes    \n\n# coffee lake plus 和 comet lake\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\ndevirtualisemmio         yes    \nenablewriteunprotector   no     \nprotectuefiservices      yes    \nrebuildapplememorymap    yes    \nsyncruntimepermissions   yes    \n\n# 其他（未列出的）系統\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n\n# amd 平台\n\n# bulldozer(15h) 和 jaguar(16h)\n\n這些選項對這些系統沒有作用，請保留預設值。\n\n# ryzen 和 threadripper（17h and 19h）\n\n\n\n請進行以下設定：\n\n選項值                      是否啟用   說明\ndevirtualisemmio         no     如果你使用的是 trx40 系統，請啟用這個選項並參閱這個指南\nenablewriteunprotector   no     \nrebuildapplememorymap    yes    \nresizeapplegpubars       -1     如果你的韌體支援增加 gpu bar 大小（可調整大小的 bar 的支援），請將其設定為 0\nsetupvirtualmap          yes    x570、b550、a520、trx40，及更新至 2020 年度後期 bios 的 x470、b450\n                                主板則可能需要停用\nsyncruntimepermissions   yes    \n\n\n# 完成此部分後，請編輯 deviceproperties 部分",charsets:{cjk:!0}},{title:"DeviceProperties",frontmatter:{},regularPath:"/config.plist/device-properties.html",relativePath:"config.plist/device-properties.md",key:"v-441d1fbf",path:"/config.plist/device-properties.html",headers:[{level:2,title:"Add",slug:"add",normalizedTitle:"add",charIndex:593},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:602},{level:3,title:"Intel 桌面平台",slug:"intel-桌面平台",normalizedTitle:"intel 桌面平台",charIndex:610},{level:3,title:"Intel 高端桌面平台（HEDT）",slug:"intel-高端桌面平台-hedt",normalizedTitle:"intel 高端桌面平台（hedt）",charIndex:626},{level:3,title:"Intel 筆記型電腦平台",slug:"intel-筆記型電腦平台",normalizedTitle:"intel 筆記型電腦平台",charIndex:650},{level:3,title:"AMD 平台",slug:"amd-平台",normalizedTitle:"amd 平台",charIndex:669},{level:2,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:679}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Add 通用 Intel 桌面平台 Intel 高端桌面平台（HEDT） Intel 筆記型電腦平台 AMD 平台 Delete",content:'# DeviceProperties\n\n裝置配置通過一個名為 EfiDevicePathPropertyDatabase 的專用緩衝區提供給 macOS。此緩衝區是 DevicePaths 到屬性名稱及其值的映射的序列化映射。\n\n裝置屬性是 macOS I/O 註冊表的 IODeviceTree (gIODT) 平面的一部分。此平面有幾個與平台初始化相關的建造階段。雖然早期構建階段是由 XNU 內核在 IODeviceTreeAlloc 方法中執行的，但大部分構建是由平台專家執行的，並在 AppleACPIPlatformExpert.kext 中實現。\n\n目前，我們將主要使用此部分來修補 Intel CPU 的 iGPU。請不要嘗試注入你不知道的值。\n\n注意\n\n下面列出的大多數影格緩衝修補是讓 iGPU 和硬體加速正常工作的最低配置。如果你的顯示輸出無法正常工作，你可能需要更改 AAPL,ig-platform-id 和／或使用 Hackintool 加入顯示連接器數據並遵循一般的影格緩衝修補指南。\n\n有關更多影格緩衝選項，請參閱 WhateverGreen 的 Intel HD 常見問題解答。但請注意，這些常見問題解答中的影格緩衝資料是以 Big Endian 形式提供的，你不能按原樣使用它 – 因為你必須首先將其轉換為 Little Endian！\n\n\n\n * Add\n   * 通用\n   * Intel 桌面平台\n   * Intel 高端桌面平台（HEDT）\n   * Intel 筆記型電腦平台\n   * AMD 平台\n * Delete\n\n\n\n\n# Add\n\n從映射中設定裝置屬性。請根據你使用的平台進行設定。\n\n當你設定 iGPU 參數時，請參閱下面對一些參數的解釋:\n\n * AAPL,ig-platform-id\n   * 這是用於在系統內設定 iGPU\n   * 在 Sandy Bridge 中，你應該設定 AAPL,snb-platform-id\n * 類型\n   * 表示該值是否推薦用於筆記型電腦（有內置顯示器）或英特爾 NUC（一個盒子，類似 Mac mini）\n\n註：如果你在啟動後沒有圖形加速（7MB VRAM 和底座的純色背景），那麼您可能需要嘗試不同的 AAPL,ig-platform-id 參數，加入圖形記憶體修補，甚至加入 device-id 屬性。\n\n注意\n\nVGA 在一般情況下都是 不支援 的。（除非它是通過內置 DP 轉 VGA 適配器運行的，顯然只有極少數裝置會將其視為 DP 而不是 VGA，這完全是在碰運氣。）\n\n\n# 通用\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * 用於 AppleALC 的音訊硬體資訊的注入，你需要找出你的主板使用的編解碼器，並將其與 AppleALC 的佈局匹配。查看 AppleALC 支援的編解碼器.\n * 現在，我們會使用開機參數 alcid=xxx 來完成此操作。alcid 將覆蓋這個 layout-ID 屬性。\n * 因此，你可以直接刪除這個屬性，我們還沒有需要使用它。\n\n更多訊息請參閱安裝後完善指南\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nmacOS 需要至少 64MB 的 DVMT 才能正常開機。許多電腦的預設 DVMT 只有 32MB，在這種情況下，系統可能會出現內核錯誤。如果你的系統無法從 UEFI BIOS 設定中更改 iGPU 圖形記憶體和 DVMT 等相關設定，你需要在這個屬性中加入 framebuffer-patch-enable、framebuffer-stolenmem 和 framebuffer-fbmem 參數（但不是所有電腦都需要加入全部參數）。詳情請見下表：\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n * 注意：Headless framebuffer（使用 dGPU 驅動顯示器）便不需要設定這些參數。\n\n示例：\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   00001219\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\ndevice-id                  Data   1B190000\n\n（這是一個桌面平台的 HD P530，沒有使用 dGPU，和未在 BIOS 設定 iGPU 記憶體的例子）\n\n\n# Intel 桌面平台\n\n# Yonah, Conroe 和 Penryn\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n這些平台的 iGPU 設定由另一個指南指供。這些用戶應該暫時略過這裡。\n\n# Lynnfield 和 Clarkdale\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n不幸地，macOS 不支援這些平台使用的 Iron Lake iGPU。這些用戶應該略過這裡。\n\n# Sandy Bridge\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nmacOS 於此平台使用 AAPL,snb-platform-id 來確定 iGPU 驅動程式如何與我們的系統交互，可以選擇的兩個值如下：\n\nAAPL,SNB-PLATFORM-ID   說明\n10000300               以桌面 iGPU 來驅動顯示器時使用\n00000500               以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n我們還需要一個支援的 device-id，就像上面的表一樣，你需要與你的硬體配置匹配：\n\nDEVICE-ID   說明\n26010000    以桌面 iGPU 來驅動顯示器時使用\n02010000    以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n最後，你應該有類似下表的內容：\n\nKEY                    TYPE   VALUE\nAAPL,snb-platform-id   Data   00000500\ndevice-id              Data   26010000\n\n（這是一個桌面平台的 HD 3000，並使用 dGPU 作為輸出的例子）\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\n如果你在 7 系列主板（如：B75, Q75, Z75, H77, Q77, Z77）使用 Sandy Bridge CPU 的話便需要設定這個屬性。因為需要利用 IMEI 裝置來欺騙系統，使你的硬體組合可被支援。無論有沒有 SSDT-IMEI，你也必須要設定本屬性。\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\n註：如果你使用 6 系列主板（如：H61, B65, Q65, P67, H67, Q67, Z68）則無需加入\n\n# Ivy Bridge\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   說明\n0A006601              以桌面 iGPU 來驅動顯示器時使用\n07006201              以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n示例：\n\nKEY                   TYPE   VALUE\nAAPL,ig-platform-id   Data   0A006601\n\n（這是一個桌面平台的 HD 4000，而沒有使用 dGPU 的例子）\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\n如果你在 6 系列主板（如：H61, B65, Q65, P67, H67, Q67, Z68）使用 Ivy Bridge CPU 的話便需要設定這個屬性。因為需要利用 IMEI 裝置來欺騙系統，使你的硬體組合可被支援。無論有沒有 SSDT-IMEI，你也必須要設定本屬性。\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1E0000\n\n註：如果你使用 7 系列主板（如：B75, Q75, Z75, H77, Q77, Z77）則無需加入\n\n# Haswell 和 Broadwell\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們可以按需要，使用以下其中一個的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   說明\n0300220D              以桌面 Haswell iGPU 來驅動顯示器時使用\n04001204              以桌面 Haswell iGPU 來進行計算任務而不驅動顯示器時使用\n07002216              以桌面 Broadwell iGPU 來驅動顯示器時使用\n\n對於使用 macOS 不支援的 HD 4600 用戶，你需要加入以下 device-id：\n\nDEVICE-ID   說明\n12040000    使用 macOS 不支援的 HD 4600 時使用\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n# Skylake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們可以按需要，使用以下其中一個的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   說明\n00001219              以桌面 iGPU 來驅動顯示器時使用\n01001219              以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n對於使用 macOS 不支援的 P530 用戶，你需要加入以下 device-id：\n\nDEVICE-ID   說明\n1B190000    使用 macOS 不支援的 P530 時使用\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n# Kaby Lake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們可以按需要，使用以下其中一個的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   說明\n00001259              以桌面 iGPU 來驅動顯示器時使用\n03001259              以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n * 註：在本系統中，你無需設定 framebuffer-fbmem 參數。\n\n# Coffee Lake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n如果你使用的是帶 -F 後綴的 CPU，則你的 CPU 沒有 iGPU。因此，你可以略過這裡。\n\n我們可以按需要，使用以下其中一個的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   說明\n07009B3E              以桌面 iGPU 來驅動顯示器時使用\n00009B3E              07009B3E 無法正常工作時的替代\n0300913E              以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n * Note: 在 macOS 10.15.5 和更新版本中，07009B3E 可能會導致黑畫面問題，如果你遇到相似問題，則可以嘗試轉用 00009B3E\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n * 註：在本系統中，你無需設定 framebuffer-fbmem 參數。\n\n# Comet Lake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n如果你使用的是帶 -F 後綴的 CPU，則你的 CPU 沒有 iGPU。因此，你可以略過這裡。\n\n我們可以按需要，使用以下其中一個的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   說明\n07009B3E              以桌面 iGPU 來驅動顯示器時使用\n00009B3E              07009B3E 無法正常工作時的替代\n0300913E              以桌面 iGPU 來進行計算任務而不驅動顯示器時使用\n\n * Note: 在 macOS 10.15.5 和更新版本中，07009B3E 可能會導致黑畫面問題，如果你遇到相似問題，則可以嘗試轉用 00009B3E\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n * 註：在本系統中，你無需設定 framebuffer-fbmem 參數。\n\n\n# Intel 高端桌面平台（HEDT）\n\n\n\n# Sandy Bridge-E 和 Ivy Bridge-E\n\nPciRoot(0x0)/Pci(0x1,0x1)/Pci(0x0,0x0)\n\n這一條目是關於可在許多 Intel 和 Supermicro 服務器主板，以及一些 Intel 服務器 PCIe 適配器找到的 Intel I350 控制器。這裡我們要做的就是讓蘋果的 I210 驅動程式支援我們的 I350 網絡控制器：\n\nKEY         TYPE   VALUE\ndevice-id   Data   33150000\n\n * 備註 1：如果你的主板沒有內置I350 NIC，則不需要加入此條目。\n * 備註 2：如果 AppleIntelI210Ethernet kext 出現內核錯誤，或者不是所有的適配器都顯示出來，你可能需要為每個適配器編輯或加入額外的 PciRoot 屬性。\n\n# 其他（未列出的）系統\n\n這些屬性目前對這些系統沒有作用，你應該刪除這裡的所有屬性。\n\n\n# Intel 筆記型電腦平台\n\n# Clarksfield 和 Arrandale\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的值：\n\nPROPERTY                   TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-singlelink     Data   01000000\n\n * 注意: 蘋果的 Iron Lake 驅動程式只支援 LVDS 顯示，不支援 eDP\n\n# Sandy Bridge\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nmacOS 於此平台使用 AAPL,snb-platform-id 來確定 iGPU 驅動程式如何與我們的系統交互，可以選擇的兩個值如下：\n\nAAPL,SNB-PLATFORM-ID   類型      說明\n00000100               筆記型電腦   用於筆記型電腦\n10000300               NUC     用於 Intel NUC\n\n * 注意: 不支援 HD 2000 系列\n\n對於解析度為 1600x900 或更高的筆記型電腦顯示屏，有必要增加一個額外條目，讓 macOS 知道我們正在使用 DualLink 顯示屏。\n\nKEY               TYPE   VALUE\nAAPL00,DualLink   Data   01000000\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\n這個時代的一些筆記型電腦配備了混合芯片組，例如使用 Sandy Bridge CPU 和 Ivy Bridge 芯片組，這會導致 macOS 出現問題，因為它需要某個 IMEI ID，如果系統找不到，則會在啟動時卡住（因為蘋果的 iGPU 驅動程式需要 IMEI 裝置），要解決此問題，我們需要為這些型號偽造 IMEI ID。\n\n * 註：如要知道你是否受影響，你可以在一些如 AIDA64 的工具程式中檢查你的 CPU 是否為 Intel Core ix-3xxx，而芯片組卻是 Hx6x（如：一部配備 HM65 或 HM67 芯片組和 Core i3-3110M CPU 的筆記型電腦）。\n\n現在，請在你的配置中加入一個名為 PciRoot(0x0)/Pci(0x16,0x0) 的新 PciRoot 設備。\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\n# Ivy Bridge\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   類型      說明\n03006601              筆記型電腦   適用於 1366 by 768 或以下解析度的顯示屏\n04006601              筆記型電腦   適用於 1600 by 900 或以上解析度的顯示屏\n                              你需要加入下面的額外修補部分\n09006601              筆記型電腦   適用於連接至 eDP 顯示器的裝置（有別於傳統的 LVDS）\n                              在使用這個值前，必須先測試 03006601 和 04006601。\n0B006601              NUC     適用於 Intel NUC\n\n額外修補\n\n如果你打算使用 04006601 作為 ig-platform-id，你可能需要加入以下參數。這些是用於修正外置顯示的問題，否則你只會有一個輸出。（感謝 Rehabman）\n\nKEY                        TYPE     VALUE                                                   說明\nframebuffer-patch-enable   Number   1                                                       原理上啟用語義修補（來自 WhateverGreen 手冊）\nframebuffer-memorycount    Number   2                                                       將 FBMemoryCount 匹配到 03006601 上的值（04 為 1，03 為 2）\nframebuffer-pipecount      Number   2                                                       將 PipeCount 匹配到 03006601 上的值（04 為 3，03 為 2）\nframebuffer-portcount      Number   4                                                       將 PortCount 匹配到 03006601 上的端口（04 為 1，03 為 4）\nframebuffer-stolenmem      Data     00000004                                                將圖形記憶體設定為 64MB（0x04000000，從十六進制到十進制字節）並匹配到 03006601 的記憶體\n                                                                                            查看這裡了解更多資訊。\nframebuffer-con1-enable    Number   1                                                       在驅動程式的 連接器 1 上啟用修補。(指 con0 以後的第二個連接器，一般是 eDP/LVDS 連接器)\nframebuffer-con1-alldata   Data     02050000 00040000 07040000 03040000 00040000 81000000   當使用連接器的 all data\n                                    04060000 00040000 81000000                              時，要麼提供該連接器的所有資訊（port-bused-type-flag），要麼提供該連接埠及其後面的資訊，就像本例一樣。\n                                                                                            這種情况下，04 中的連接埠被限制為 1:\n                                                                                            05030000 02000000 30020000（對應連接埠 5，即 LVDS）\n                                                                                            但是在 03 上有 3 個額外的連接埠:\n                                                                                            05030000 02000000 30000000 (LVDS, con0，類似於 04)\n                                                                                            02050000 00040000 07040000 (DP, con1)\n                                                                                            03040000 00040000 81000000 (DP, con2)\n                                                                                            04060000 00040000 81000000 (DP, con3)\n                                                                                            由於我們要將平台上 PortCount 的數量從只有 1 更改為 4，這意味著我們需要定義其他 3 個（要從 con1\n                                                                                            開始直到結束)。\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\n這個時代的一些筆記型電腦配備了混合芯片組，例如使用 Sandy Bridge CPU 和 Ivy Bridge 芯片組，這會導致 macOS 出現問題，因為它需要某個 IMEI ID，如果系統找不到，則會在啟動時卡住（因為蘋果的 iGPU 驅動程式需要 IMEI 裝置），要解決此問題，我們需要為這些型號偽造 IMEI ID。\n\n * 註：如要知道你是否受影響，你可以在一些如 AIDA64 的工具程式中檢查你的 CPU 是否為 Intel Core ix-3xxx，而芯片組卻是 Hx6x（如：一部配備 HM65 或 HM67 芯片組和 Core i3-3110M CPU 的筆記型電腦）。\n\n現在，請在你的配置中加入一個名為 PciRoot(0x0)/Pci(0x16,0x0) 的新 PciRoot 設備。\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\n# Haswell\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   TYPE    COMMENT\n0500260A              筆記型電腦   主要用於 HD 5000, HD 5100 and HD 5200\n0600260A              筆記型電腦   主要用於 HD 4200, HD 4400 and HD 4600\n                              請同時參閱下面 device-id 部分\n0300220D              NUC     主要用於所有 Haswell NUC\n                              HD 4200/4400/4600 用戶請同時參閱下面 device-id 部分\n\n除了 AAPL,ig-platform-id，你可能需要加入游標位元組大小的修補（從 6MB (00006000) 到 9MB），用來解決一些故障：\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-cursormem      Data   00009000\n\n * HD 4200, HD 4400 和 HD 4600 的用戶需要加入以下 device-id：\n\nKEY         TYPE   VALUE\ndevice-id   Data   12040000\n\n# Broadwell\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   TYPE    COMMENT\n06002616              筆記型電腦   用於 Broadwell 筆記型電腦的建議值\n02001616              NUC     用於 Broadwell NUC 的建議值\n\n * HD 5600 的用戶需要加入以下 device-id：\n\nKEY         TYPE   VALUE\ndevice-id   data   26160000\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n# Skylake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   TYPE    說明\n00001619              筆記型電腦   用於 HD 515, HD 520, HD 530, HD 540, HD 550 和 P530 的建議值\n00001E19              筆記型電腦   用於 HD 515 的替代值（如上面的值會造成問題）\n00001B19              筆記型電腦   用於 HD 510 的建議值\n00001E19              NUC     用於 HD 515 的建議值\n02001619              NUC     用於 20/530 的建議值\n02002619              NUC     用於 HD 540/550 的建議值\n05003B19              NUC     用於 HD 580 的建議值\n\n * HD 510 的用戶需要加入以下 device-id：\n\nKEY         TYPE   VALUE\ndevice-id   Data   02190000\n\n * HD 550 和 P530 的用戶需要加入以下 device-id：\n   * 所有 HD P 系列 iGPU 的用戶都可能需要。\n\nKEY         TYPE   VALUE\ndevice-id   Data   16190000\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n# Kaby Lake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   TYPE    說明\n00001B59              筆記型電腦   用於 HD 615, HD 620, HD 630, HD 640 and HD 650 的建議值\n00001659              筆記型電腦   00001B59 的替代值（如果有硬體加速問題）\n                              用於 HD 和 UHD 620 NUC 的建議值\n0000C087              筆記型電腦   用於 Amber Lake 的 UHD 617 和 Kaby Lake-R 的 UHD 620 的建議值\n00001E59              NUC     用於 HD 615 的建議值\n00001B59              NUC     用於 HD 630 的建議值\n02002659              NUC     用於 HD 640/650 的建議值\n\n * UHD 620（Kaby Lake-R）的用戶需要加入以下 device-id：\n\nKEY         TYPE   VALUE\ndevice-id   Data   16590000\n\n * HD 6xx 用戶（不包括 UHD 6xx）可能會遇到一些輸出問題，其中插入外置顯示器可能导致電腦當機（發生內核錯誤）；這裡有一些修補可以緩解這種情況（感謝 RehabMan）。如果你遇到相關的當機問題，可以试试下面的修補方法（兩種都要試，但一次只能嘗試一組）：\n   \n   * con1 as 105, con2 as 204, both HDMI\n     \n     KEY                        TYPE   VALUE\n     framebuffer-con1-enable    Data   01000000\n     framebuffer-con1-alldata   Data   01050A00 00080000 87010000\n     framebuffer-con2-enable    Data   01000000\n     framebuffer-con2-alldata   Data   02040A00 00080000 87010000\n   \n   * con1 as 105, con2 as 306, HDMI and DP\n     \n     KEY                        TYPE   VALUE\n     framebuffer-con1-enable    Data   01000000\n     framebuffer-con1-alldata   Data   01050A00 00080000 87010000\n     framebuffer-con2-enable    Data   01000000\n     framebuffer-con2-alldata   Data   03060A00 00040000 87010000\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n詳細解釋\n\n讓我們考慮這兩個常見的 framebuffer：\n\n * 00001B59 包含以下 BusID 資訊：\n   \n   [0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n   [2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n   [3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n   00000800 02000000 98000000\n   02040A00 00080000 87010000\n   03060A00 00040000 87010000\n   \n\n * 00001659 包含以下 BusID 資訊：\n   \n   [0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n   [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n   [2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n   00000800 02000000 98000000\n   01050900 00040000 87010000\n   02040A00 00080000 87010000\n   \n\n它們乍看之下很相似，直到您看到像 Port ID 這樣的小細節（每個十六進制列的前 2 位數字）。這兩個 framebuffer 都是有效的，但不是所有 OEM 在所有筆記型電腦上都提供相同的連接埠配置(有些電腦的內置顯示使用了 eDP，有些則配置 HDMI 而不是 DP 連接埠，有些則有 VGA 等等)。\n\n對於任何一個 framebuffer，第一個連接埠（連接埠 00）都是 ConnectorLVDS（表示內部顯示器），這在兩種配置上是相同的，這就是在 macOS 取得顯示的方式。不同之處在於其他兩個連接埠:\n\n * 00001B59\n\n02040A00 00080000 87010000 --\x3e\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n\n03060A00 00040000 87010000 --\x3e\n[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n\n\n * 00001659\n\n01050900 00040000 87010000 --\x3e\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n\n02040A00 00080000 87010000 --\x3e\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n\n\n這些修補會帶來以下效果：\n\n * 修補組合 1：\n   * 將連接埠的第二個連接器轉換為 0105，這是 HDMI 連接器的類型\n   * 將連接埠的第三個連接器轉換為 0204，這是 HDMI 連接器的類型\n * 修補組合 2：\n   * 將連接埠的第二個連接器轉換為 0105，這是 HDMI 連接器的類型\n   * 將連接埠的第三個連接器轉換為 0306，這是 DP 連接器的類型\n\n根據你的實際硬體配置，你可能要改變上述參數，但通常對於大多數筆記型電腦來說，你可能需要使用兩個修補組合的其中一個，如果你的輸出可以正常使用，且沒有問題或崩潰，那麼你就不需要這些修補。\n\n如何讀取 BusID\n\n十六進制字串的位元值會按以下方式讀取：\n\n（以 01050900 00040000 87010000 為例）\n\nBIT        名稱               值\nBit 1      Port             01\nBit 2      Bus ID           05\nBit 3-4    Pipe Number      0900\nBit 5-8    Connector Type   00040000\nBit 9-12   Flags            87010000\n\n# Coffee Lake 和 Whiskey Lake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   TYPE    說明\n0900A53E              筆記型電腦   用於 UHD 630\n00009B3E              筆記型電腦   用於 UHD 620\n07009B3E              NUC     用於 620/630\n0000A53E              NUC     用於 UHD 655\n\n內置 UHD 620 的 Coffee Lake CPU，或者硬體 ID 不是 0x3E9B 的 UHD 630 需要加入以下 device-id：\n\n * 如果你不肯定你的 iGPU 型號，可以在 Windows 的裝置管理員中檢查。開啟「內容」頁面，按 "詳情" 標籤頁，再按 "硬體 ID" 欄位來查閱。\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n# Coffee Lake Plus 和 Comet Lake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   類型      說明\n0900A53E              筆記型電腦   用於 UHD 630\n00009B3E              筆記型電腦   用於 UHD 620\n07009B3E              NUC     用於 UHD 620/630\n0000A53E              NUC     用於 UHD 655\n\n內置 UHD 620 的 Comet Lake CPU，或者硬體 ID 不是 0x3E9B 的 UHD 630 需要加入以下 device-id：\n\n * 如果你不肯定你的 iGPU 型號，可以在 Windows 的裝置管理員中檢查。開啟「內容」頁面，按 "詳情" 標籤頁，再按 "硬體 ID" 欄位來查閱。\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n# Icelake\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\n我們會使用以下的 AAPL,ig-platform-id：\n\nAAPL,IG-PLATFORM-ID   PORT COUNT   說明\n0000528A              6            建議用於的 G4/G7 的值\n\n另外，你需要在 UEFI BIOS 設定中將預分配的 DVMT 更改為 64MB，如果你無法更改，請參閱這個教學。\n\n\n# AMD 平台\n\n這些屬性目前對 AMD 平台沒有作用，你應該刪除這裡的所有屬性。\n\n\n# Delete\n\n這裡將移除某些裝置屬性。我們會略過這部分。\n\n\n# 完成此部分後，請編輯 Kernel 部分',normalizedContent:'# deviceproperties\n\n裝置配置通過一個名為 efidevicepathpropertydatabase 的專用緩衝區提供給 macos。此緩衝區是 devicepaths 到屬性名稱及其值的映射的序列化映射。\n\n裝置屬性是 macos i/o 註冊表的 iodevicetree (giodt) 平面的一部分。此平面有幾個與平台初始化相關的建造階段。雖然早期構建階段是由 xnu 內核在 iodevicetreealloc 方法中執行的，但大部分構建是由平台專家執行的，並在 appleacpiplatformexpert.kext 中實現。\n\n目前，我們將主要使用此部分來修補 intel cpu 的 igpu。請不要嘗試注入你不知道的值。\n\n注意\n\n下面列出的大多數影格緩衝修補是讓 igpu 和硬體加速正常工作的最低配置。如果你的顯示輸出無法正常工作，你可能需要更改 aapl,ig-platform-id 和／或使用 hackintool 加入顯示連接器數據並遵循一般的影格緩衝修補指南。\n\n有關更多影格緩衝選項，請參閱 whatevergreen 的 intel hd 常見問題解答。但請注意，這些常見問題解答中的影格緩衝資料是以 big endian 形式提供的，你不能按原樣使用它 – 因為你必須首先將其轉換為 little endian！\n\n\n\n * add\n   * 通用\n   * intel 桌面平台\n   * intel 高端桌面平台（hedt）\n   * intel 筆記型電腦平台\n   * amd 平台\n * delete\n\n\n\n\n# add\n\n從映射中設定裝置屬性。請根據你使用的平台進行設定。\n\n當你設定 igpu 參數時，請參閱下面對一些參數的解釋:\n\n * aapl,ig-platform-id\n   * 這是用於在系統內設定 igpu\n   * 在 sandy bridge 中，你應該設定 aapl,snb-platform-id\n * 類型\n   * 表示該值是否推薦用於筆記型電腦（有內置顯示器）或英特爾 nuc（一個盒子，類似 mac mini）\n\n註：如果你在啟動後沒有圖形加速（7mb vram 和底座的純色背景），那麼您可能需要嘗試不同的 aapl,ig-platform-id 參數，加入圖形記憶體修補，甚至加入 device-id 屬性。\n\n注意\n\nvga 在一般情況下都是 不支援 的。（除非它是通過內置 dp 轉 vga 適配器運行的，顯然只有極少數裝置會將其視為 dp 而不是 vga，這完全是在碰運氣。）\n\n\n# 通用\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * 用於 applealc 的音訊硬體資訊的注入，你需要找出你的主板使用的編解碼器，並將其與 applealc 的佈局匹配。查看 applealc 支援的編解碼器.\n * 現在，我們會使用開機參數 alcid=xxx 來完成此操作。alcid 將覆蓋這個 layout-id 屬性。\n * 因此，你可以直接刪除這個屬性，我們還沒有需要使用它。\n\n更多訊息請參閱安裝後完善指南\n\npciroot(0x0)/pci(0x2,0x0)\n\nmacos 需要至少 64mb 的 dvmt 才能正常開機。許多電腦的預設 dvmt 只有 32mb，在這種情況下，系統可能會出現內核錯誤。如果你的系統無法從 uefi bios 設定中更改 igpu 圖形記憶體和 dvmt 等相關設定，你需要在這個屬性中加入 framebuffer-patch-enable、framebuffer-stolenmem 和 framebuffer-fbmem 參數（但不是所有電腦都需要加入全部參數）。詳情請見下表：\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n * 注意：headless framebuffer（使用 dgpu 驅動顯示器）便不需要設定這些參數。\n\n示例：\n\nkey                        type   value\naapl,ig-platform-id        data   00001219\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\ndevice-id                  data   1b190000\n\n（這是一個桌面平台的 hd p530，沒有使用 dgpu，和未在 bios 設定 igpu 記憶體的例子）\n\n\n# intel 桌面平台\n\n# yonah, conroe 和 penryn\n\npciroot(0x0)/pci(0x2,0x0)\n\n這些平台的 igpu 設定由另一個指南指供。這些用戶應該暫時略過這裡。\n\n# lynnfield 和 clarkdale\n\npciroot(0x0)/pci(0x2,0x0)\n\n不幸地，macos 不支援這些平台使用的 iron lake igpu。這些用戶應該略過這裡。\n\n# sandy bridge\n\npciroot(0x0)/pci(0x2,0x0)\n\nmacos 於此平台使用 aapl,snb-platform-id 來確定 igpu 驅動程式如何與我們的系統交互，可以選擇的兩個值如下：\n\naapl,snb-platform-id   說明\n10000300               以桌面 igpu 來驅動顯示器時使用\n00000500               以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n我們還需要一個支援的 device-id，就像上面的表一樣，你需要與你的硬體配置匹配：\n\ndevice-id   說明\n26010000    以桌面 igpu 來驅動顯示器時使用\n02010000    以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n最後，你應該有類似下表的內容：\n\nkey                    type   value\naapl,snb-platform-id   data   00000500\ndevice-id              data   26010000\n\n（這是一個桌面平台的 hd 3000，並使用 dgpu 作為輸出的例子）\n\npciroot(0x0)/pci(0x16,0x0)\n\n如果你在 7 系列主板（如：b75, q75, z75, h77, q77, z77）使用 sandy bridge cpu 的話便需要設定這個屬性。因為需要利用 imei 裝置來欺騙系統，使你的硬體組合可被支援。無論有沒有 ssdt-imei，你也必須要設定本屬性。\n\nkey         type   value\ndevice-id   data   3a1c0000\n\n註：如果你使用 6 系列主板（如：h61, b65, q65, p67, h67, q67, z68）則無需加入\n\n# ivy bridge\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   說明\n0a006601              以桌面 igpu 來驅動顯示器時使用\n07006201              以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n示例：\n\nkey                   type   value\naapl,ig-platform-id   data   0a006601\n\n（這是一個桌面平台的 hd 4000，而沒有使用 dgpu 的例子）\n\npciroot(0x0)/pci(0x16,0x0)\n\n如果你在 6 系列主板（如：h61, b65, q65, p67, h67, q67, z68）使用 ivy bridge cpu 的話便需要設定這個屬性。因為需要利用 imei 裝置來欺騙系統，使你的硬體組合可被支援。無論有沒有 ssdt-imei，你也必須要設定本屬性。\n\nkey         type   value\ndevice-id   data   3a1e0000\n\n註：如果你使用 7 系列主板（如：b75, q75, z75, h77, q77, z77）則無需加入\n\n# haswell 和 broadwell\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們可以按需要，使用以下其中一個的 aapl,ig-platform-id：\n\naapl,ig-platform-id   說明\n0300220d              以桌面 haswell igpu 來驅動顯示器時使用\n04001204              以桌面 haswell igpu 來進行計算任務而不驅動顯示器時使用\n07002216              以桌面 broadwell igpu 來驅動顯示器時使用\n\n對於使用 macos 不支援的 hd 4600 用戶，你需要加入以下 device-id：\n\ndevice-id   說明\n12040000    使用 macos 不支援的 hd 4600 時使用\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n# skylake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們可以按需要，使用以下其中一個的 aapl,ig-platform-id：\n\naapl,ig-platform-id   說明\n00001219              以桌面 igpu 來驅動顯示器時使用\n01001219              以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n對於使用 macos 不支援的 p530 用戶，你需要加入以下 device-id：\n\ndevice-id   說明\n1b190000    使用 macos 不支援的 p530 時使用\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n# kaby lake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們可以按需要，使用以下其中一個的 aapl,ig-platform-id：\n\naapl,ig-platform-id   說明\n00001259              以桌面 igpu 來驅動顯示器時使用\n03001259              以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n * 註：在本系統中，你無需設定 framebuffer-fbmem 參數。\n\n# coffee lake\n\npciroot(0x0)/pci(0x2,0x0)\n\n如果你使用的是帶 -f 後綴的 cpu，則你的 cpu 沒有 igpu。因此，你可以略過這裡。\n\n我們可以按需要，使用以下其中一個的 aapl,ig-platform-id：\n\naapl,ig-platform-id   說明\n07009b3e              以桌面 igpu 來驅動顯示器時使用\n00009b3e              07009b3e 無法正常工作時的替代\n0300913e              以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n * note: 在 macos 10.15.5 和更新版本中，07009b3e 可能會導致黑畫面問題，如果你遇到相似問題，則可以嘗試轉用 00009b3e\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n * 註：在本系統中，你無需設定 framebuffer-fbmem 參數。\n\n# comet lake\n\npciroot(0x0)/pci(0x2,0x0)\n\n如果你使用的是帶 -f 後綴的 cpu，則你的 cpu 沒有 igpu。因此，你可以略過這裡。\n\n我們可以按需要，使用以下其中一個的 aapl,ig-platform-id：\n\naapl,ig-platform-id   說明\n07009b3e              以桌面 igpu 來驅動顯示器時使用\n00009b3e              07009b3e 無法正常工作時的替代\n0300913e              以桌面 igpu 來進行計算任務而不驅動顯示器時使用\n\n * note: 在 macos 10.15.5 和更新版本中，07009b3e 可能會導致黑畫面問題，如果你遇到相似問題，則可以嘗試轉用 00009b3e\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n * 註：在本系統中，你無需設定 framebuffer-fbmem 參數。\n\n\n# intel 高端桌面平台（hedt）\n\n\n\n# sandy bridge-e 和 ivy bridge-e\n\npciroot(0x0)/pci(0x1,0x1)/pci(0x0,0x0)\n\n這一條目是關於可在許多 intel 和 supermicro 服務器主板，以及一些 intel 服務器 pcie 適配器找到的 intel i350 控制器。這裡我們要做的就是讓蘋果的 i210 驅動程式支援我們的 i350 網絡控制器：\n\nkey         type   value\ndevice-id   data   33150000\n\n * 備註 1：如果你的主板沒有內置i350 nic，則不需要加入此條目。\n * 備註 2：如果 appleinteli210ethernet kext 出現內核錯誤，或者不是所有的適配器都顯示出來，你可能需要為每個適配器編輯或加入額外的 pciroot 屬性。\n\n# 其他（未列出的）系統\n\n這些屬性目前對這些系統沒有作用，你應該刪除這裡的所有屬性。\n\n\n# intel 筆記型電腦平台\n\n# clarksfield 和 arrandale\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的值：\n\nproperty                   type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-singlelink     data   01000000\n\n * 注意: 蘋果的 iron lake 驅動程式只支援 lvds 顯示，不支援 edp\n\n# sandy bridge\n\npciroot(0x0)/pci(0x2,0x0)\n\nmacos 於此平台使用 aapl,snb-platform-id 來確定 igpu 驅動程式如何與我們的系統交互，可以選擇的兩個值如下：\n\naapl,snb-platform-id   類型      說明\n00000100               筆記型電腦   用於筆記型電腦\n10000300               nuc     用於 intel nuc\n\n * 注意: 不支援 hd 2000 系列\n\n對於解析度為 1600x900 或更高的筆記型電腦顯示屏，有必要增加一個額外條目，讓 macos 知道我們正在使用 duallink 顯示屏。\n\nkey               type   value\naapl00,duallink   data   01000000\n\npciroot(0x0)/pci(0x16,0x0)\n\n這個時代的一些筆記型電腦配備了混合芯片組，例如使用 sandy bridge cpu 和 ivy bridge 芯片組，這會導致 macos 出現問題，因為它需要某個 imei id，如果系統找不到，則會在啟動時卡住（因為蘋果的 igpu 驅動程式需要 imei 裝置），要解決此問題，我們需要為這些型號偽造 imei id。\n\n * 註：如要知道你是否受影響，你可以在一些如 aida64 的工具程式中檢查你的 cpu 是否為 intel core ix-3xxx，而芯片組卻是 hx6x（如：一部配備 hm65 或 hm67 芯片組和 core i3-3110m cpu 的筆記型電腦）。\n\n現在，請在你的配置中加入一個名為 pciroot(0x0)/pci(0x16,0x0) 的新 pciroot 設備。\n\nkey         type   value\ndevice-id   data   3a1c0000\n\n# ivy bridge\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   類型      說明\n03006601              筆記型電腦   適用於 1366 by 768 或以下解析度的顯示屏\n04006601              筆記型電腦   適用於 1600 by 900 或以上解析度的顯示屏\n                              你需要加入下面的額外修補部分\n09006601              筆記型電腦   適用於連接至 edp 顯示器的裝置（有別於傳統的 lvds）\n                              在使用這個值前，必須先測試 03006601 和 04006601。\n0b006601              nuc     適用於 intel nuc\n\n額外修補\n\n如果你打算使用 04006601 作為 ig-platform-id，你可能需要加入以下參數。這些是用於修正外置顯示的問題，否則你只會有一個輸出。（感謝 rehabman）\n\nkey                        type     value                                                   說明\nframebuffer-patch-enable   number   1                                                       原理上啟用語義修補（來自 whatevergreen 手冊）\nframebuffer-memorycount    number   2                                                       將 fbmemorycount 匹配到 03006601 上的值（04 為 1，03 為 2）\nframebuffer-pipecount      number   2                                                       將 pipecount 匹配到 03006601 上的值（04 為 3，03 為 2）\nframebuffer-portcount      number   4                                                       將 portcount 匹配到 03006601 上的端口（04 為 1，03 為 4）\nframebuffer-stolenmem      data     00000004                                                將圖形記憶體設定為 64mb（0x04000000，從十六進制到十進制字節）並匹配到 03006601 的記憶體\n                                                                                            查看這裡了解更多資訊。\nframebuffer-con1-enable    number   1                                                       在驅動程式的 連接器 1 上啟用修補。(指 con0 以後的第二個連接器，一般是 edp/lvds 連接器)\nframebuffer-con1-alldata   data     02050000 00040000 07040000 03040000 00040000 81000000   當使用連接器的 all data\n                                    04060000 00040000 81000000                              時，要麼提供該連接器的所有資訊（port-bused-type-flag），要麼提供該連接埠及其後面的資訊，就像本例一樣。\n                                                                                            這種情况下，04 中的連接埠被限制為 1:\n                                                                                            05030000 02000000 30020000（對應連接埠 5，即 lvds）\n                                                                                            但是在 03 上有 3 個額外的連接埠:\n                                                                                            05030000 02000000 30000000 (lvds, con0，類似於 04)\n                                                                                            02050000 00040000 07040000 (dp, con1)\n                                                                                            03040000 00040000 81000000 (dp, con2)\n                                                                                            04060000 00040000 81000000 (dp, con3)\n                                                                                            由於我們要將平台上 portcount 的數量從只有 1 更改為 4，這意味著我們需要定義其他 3 個（要從 con1\n                                                                                            開始直到結束)。\n\npciroot(0x0)/pci(0x16,0x0)\n\n這個時代的一些筆記型電腦配備了混合芯片組，例如使用 sandy bridge cpu 和 ivy bridge 芯片組，這會導致 macos 出現問題，因為它需要某個 imei id，如果系統找不到，則會在啟動時卡住（因為蘋果的 igpu 驅動程式需要 imei 裝置），要解決此問題，我們需要為這些型號偽造 imei id。\n\n * 註：如要知道你是否受影響，你可以在一些如 aida64 的工具程式中檢查你的 cpu 是否為 intel core ix-3xxx，而芯片組卻是 hx6x（如：一部配備 hm65 或 hm67 芯片組和 core i3-3110m cpu 的筆記型電腦）。\n\n現在，請在你的配置中加入一個名為 pciroot(0x0)/pci(0x16,0x0) 的新 pciroot 設備。\n\nkey         type   value\ndevice-id   data   3a1c0000\n\n# haswell\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   type    comment\n0500260a              筆記型電腦   主要用於 hd 5000, hd 5100 and hd 5200\n0600260a              筆記型電腦   主要用於 hd 4200, hd 4400 and hd 4600\n                              請同時參閱下面 device-id 部分\n0300220d              nuc     主要用於所有 haswell nuc\n                              hd 4200/4400/4600 用戶請同時參閱下面 device-id 部分\n\n除了 aapl,ig-platform-id，你可能需要加入游標位元組大小的修補（從 6mb (00006000) 到 9mb），用來解決一些故障：\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-cursormem      data   00009000\n\n * hd 4200, hd 4400 和 hd 4600 的用戶需要加入以下 device-id：\n\nkey         type   value\ndevice-id   data   12040000\n\n# broadwell\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   type    comment\n06002616              筆記型電腦   用於 broadwell 筆記型電腦的建議值\n02001616              nuc     用於 broadwell nuc 的建議值\n\n * hd 5600 的用戶需要加入以下 device-id：\n\nkey         type   value\ndevice-id   data   26160000\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n# skylake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   type    說明\n00001619              筆記型電腦   用於 hd 515, hd 520, hd 530, hd 540, hd 550 和 p530 的建議值\n00001e19              筆記型電腦   用於 hd 515 的替代值（如上面的值會造成問題）\n00001b19              筆記型電腦   用於 hd 510 的建議值\n00001e19              nuc     用於 hd 515 的建議值\n02001619              nuc     用於 20/530 的建議值\n02002619              nuc     用於 hd 540/550 的建議值\n05003b19              nuc     用於 hd 580 的建議值\n\n * hd 510 的用戶需要加入以下 device-id：\n\nkey         type   value\ndevice-id   data   02190000\n\n * hd 550 和 p530 的用戶需要加入以下 device-id：\n   * 所有 hd p 系列 igpu 的用戶都可能需要。\n\nkey         type   value\ndevice-id   data   16190000\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n# kaby lake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   type    說明\n00001b59              筆記型電腦   用於 hd 615, hd 620, hd 630, hd 640 and hd 650 的建議值\n00001659              筆記型電腦   00001b59 的替代值（如果有硬體加速問題）\n                              用於 hd 和 uhd 620 nuc 的建議值\n0000c087              筆記型電腦   用於 amber lake 的 uhd 617 和 kaby lake-r 的 uhd 620 的建議值\n00001e59              nuc     用於 hd 615 的建議值\n00001b59              nuc     用於 hd 630 的建議值\n02002659              nuc     用於 hd 640/650 的建議值\n\n * uhd 620（kaby lake-r）的用戶需要加入以下 device-id：\n\nkey         type   value\ndevice-id   data   16590000\n\n * hd 6xx 用戶（不包括 uhd 6xx）可能會遇到一些輸出問題，其中插入外置顯示器可能导致電腦當機（發生內核錯誤）；這裡有一些修補可以緩解這種情況（感謝 rehabman）。如果你遇到相關的當機問題，可以试试下面的修補方法（兩種都要試，但一次只能嘗試一組）：\n   \n   * con1 as 105, con2 as 204, both hdmi\n     \n     key                        type   value\n     framebuffer-con1-enable    data   01000000\n     framebuffer-con1-alldata   data   01050a00 00080000 87010000\n     framebuffer-con2-enable    data   01000000\n     framebuffer-con2-alldata   data   02040a00 00080000 87010000\n   \n   * con1 as 105, con2 as 306, hdmi and dp\n     \n     key                        type   value\n     framebuffer-con1-enable    data   01000000\n     framebuffer-con1-alldata   data   01050a00 00080000 87010000\n     framebuffer-con2-enable    data   01000000\n     framebuffer-con2-alldata   data   03060a00 00040000 87010000\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n詳細解釋\n\n讓我們考慮這兩個常見的 framebuffer：\n\n * 00001b59 包含以下 busid 資訊：\n   \n   [0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n   [2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n   [3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n   00000800 02000000 98000000\n   02040a00 00080000 87010000\n   03060a00 00040000 87010000\n   \n\n * 00001659 包含以下 busid 資訊：\n   \n   [0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n   [1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - connectordp\n   [2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n   00000800 02000000 98000000\n   01050900 00040000 87010000\n   02040a00 00080000 87010000\n   \n\n它們乍看之下很相似，直到您看到像 port id 這樣的小細節（每個十六進制列的前 2 位數字）。這兩個 framebuffer 都是有效的，但不是所有 oem 在所有筆記型電腦上都提供相同的連接埠配置(有些電腦的內置顯示使用了 edp，有些則配置 hdmi 而不是 dp 連接埠，有些則有 vga 等等)。\n\n對於任何一個 framebuffer，第一個連接埠（連接埠 00）都是 connectorlvds（表示內部顯示器），這在兩種配置上是相同的，這就是在 macos 取得顯示的方式。不同之處在於其他兩個連接埠:\n\n * 00001b59\n\n02040a00 00080000 87010000 --\x3e\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n\n03060a00 00040000 87010000 --\x3e\n[3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n\n\n * 00001659\n\n01050900 00040000 87010000 --\x3e\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - connectordp\n\n02040a00 00080000 87010000 --\x3e\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n\n\n這些修補會帶來以下效果：\n\n * 修補組合 1：\n   * 將連接埠的第二個連接器轉換為 0105，這是 hdmi 連接器的類型\n   * 將連接埠的第三個連接器轉換為 0204，這是 hdmi 連接器的類型\n * 修補組合 2：\n   * 將連接埠的第二個連接器轉換為 0105，這是 hdmi 連接器的類型\n   * 將連接埠的第三個連接器轉換為 0306，這是 dp 連接器的類型\n\n根據你的實際硬體配置，你可能要改變上述參數，但通常對於大多數筆記型電腦來說，你可能需要使用兩個修補組合的其中一個，如果你的輸出可以正常使用，且沒有問題或崩潰，那麼你就不需要這些修補。\n\n如何讀取 busid\n\n十六進制字串的位元值會按以下方式讀取：\n\n（以 01050900 00040000 87010000 為例）\n\nbit        名稱               值\nbit 1      port             01\nbit 2      bus id           05\nbit 3-4    pipe number      0900\nbit 5-8    connector type   00040000\nbit 9-12   flags            87010000\n\n# coffee lake 和 whiskey lake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   type    說明\n0900a53e              筆記型電腦   用於 uhd 630\n00009b3e              筆記型電腦   用於 uhd 620\n07009b3e              nuc     用於 620/630\n0000a53e              nuc     用於 uhd 655\n\n內置 uhd 620 的 coffee lake cpu，或者硬體 id 不是 0x3e9b 的 uhd 630 需要加入以下 device-id：\n\n * 如果你不肯定你的 igpu 型號，可以在 windows 的裝置管理員中檢查。開啟「內容」頁面，按 "詳情" 標籤頁，再按 "硬體 id" 欄位來查閱。\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n# coffee lake plus 和 comet lake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   類型      說明\n0900a53e              筆記型電腦   用於 uhd 630\n00009b3e              筆記型電腦   用於 uhd 620\n07009b3e              nuc     用於 uhd 620/630\n0000a53e              nuc     用於 uhd 655\n\n內置 uhd 620 的 comet lake cpu，或者硬體 id 不是 0x3e9b 的 uhd 630 需要加入以下 device-id：\n\n * 如果你不肯定你的 igpu 型號，可以在 windows 的裝置管理員中檢查。開啟「內容」頁面，按 "詳情" 標籤頁，再按 "硬體 id" 欄位來查閱。\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n# icelake\n\npciroot(0x0)/pci(0x2,0x0)\n\n我們會使用以下的 aapl,ig-platform-id：\n\naapl,ig-platform-id   port count   說明\n0000528a              6            建議用於的 g4/g7 的值\n\n另外，你需要在 uefi bios 設定中將預分配的 dvmt 更改為 64mb，如果你無法更改，請參閱這個教學。\n\n\n# amd 平台\n\n這些屬性目前對 amd 平台沒有作用，你應該刪除這裡的所有屬性。\n\n\n# delete\n\n這裡將移除某些裝置屬性。我們會略過這部分。\n\n\n# 完成此部分後，請編輯 kernel 部分',charsets:{cjk:!0}},{title:"Kernel",frontmatter:{},regularPath:"/config.plist/kernel.html",relativePath:"config.plist/kernel.md",key:"v-1586d58d",path:"/config.plist/kernel.html",headers:[{level:2,title:"Add",slug:"add",normalizedTitle:"add",charIndex:290},{level:3,title:"::: details Kernel 版本號列表",slug:"details-kernel-版本號列表",normalizedTitle:"::: details kernel 版本號列表",charIndex:1202},{level:2,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:308},{level:3,title:"Intel 桌面平台",slug:"intel-桌面平台",normalizedTitle:"intel 桌面平台",charIndex:1784},{level:3,title:"Intel 筆記型電腦平台",slug:"intel-筆記型電腦平台",normalizedTitle:"intel 筆記型電腦平台",charIndex:1817},{level:3,title:"Intel 高端桌面平台（HEDT）",slug:"intel-高端桌面平台-hedt",normalizedTitle:"intel 高端桌面平台（hedt）",charIndex:2507},{level:3,title:"AMD 平台",slug:"amd-平台",normalizedTitle:"amd 平台",charIndex:2782},{level:2,title:"Force",slug:"force",normalizedTitle:"force",charIndex:296},{level:2,title:"Block",slug:"block",normalizedTitle:"block",charIndex:278},{level:2,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:331},{level:2,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:318},{level:3,title:"Intel Desktop",slug:"intel-desktop",normalizedTitle:"intel desktop",charIndex:4463},{level:3,title:"Intel Laptop",slug:"intel-laptop",normalizedTitle:"intel laptop",charIndex:5673},{level:3,title:"AMD",slug:"amd",normalizedTitle:"amd",charIndex:2782},{level:2,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:8133}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Add ::: details Kernel 版本號列表 Emulate Intel 桌面平台 Intel 筆記型電腦平台 Intel 高端桌面平台（HEDT） AMD 平台 Force Block Patch Quirks Intel Desktop Intel Laptop AMD Scheme",content:'# Kernel\n\nKernel（內核）是指操作系統中首先載入的部分。 它控制和監視記憶體、CPU 處理器分配和磁碟等硬體資源。由於 hackintosh 的性質，我們需要注入 (Kernel Extensions) 來修補 macOS 以確保能正確啟動。\n\n與 ACPI 不同，這些補丁很大程度上只適用於 macOS。\n\n此部分允許在 Apple Kernel (XNU) 上套用不同類型的內核空間修改。目前可用的的修改包括驅動程式 (kext) 注入、內核和驅動程式修補以及阻止驅動程式執行。\n\n內核和 kext 修改會循以下順序執行：\n\n * 處理 Block\n * 處理 Add 和 Force\n * 處理 Emulate 和 Quirks\n * 處理 Patch\n\n\n# Add\n\n在這裡，我們將指定要載入哪些 kext，載入的次序，及 kext 適用的架構。預設情況下，我們建議保留 ProperTree 所做的操作，但對於 32 位元 CPU，請參見以下内容：\n\n更深入的資訊\n\n你需要記住的主要事項：\n\n * 載入次序\n   * 請記住，任何插件都應該在其依賴項以後才載入\n   * 這意味著像 Lilu 這樣的 kext 必須出現在 VirtualSMC、AppleALC、WhateverGreen 等插件之前\n\n提醒：ProperTree 用戶可以執行 Cmd/Ctrl + Shift + R 以正確的次序加入所有 kext 而無需手動輸入。\n\n * Arch\n   * Kext 支援的架構\n   * 目前支援的值包括 Any、i386（32 位元）及 x86_64（64位元）\n * BundlePath\n   * Kext 的名稱\n   * 例：Lilu.kext\n * Enabled\n   * 不必多做解釋了，就是啟用或停用 kext\n * ExecutablePath\n   * 隱藏在 kext 中的實際可執行文件的路徑，您可以通過點擊右鍵並選擇顯示套裝內容來查看 kext 的路徑。它們一般都是 Contents/MacOS/Kext，但有些 kext 將可執行文件隱藏在 Plugin 資料夾下。注意，只包含 plist 的 kext 不需要填寫該屬性。\n   * 例：Contents/MacOS/Lilu\n * MinKernel\n   * Kext 可被注入的最低内核版本，有關可用的值，請參見下表\n   * 例：12.00.00（OS X 10.8）\n * MaxKernel\n   * Kext 可被注入的最高内核版本，有關可用的值，請參見下表\n   * 例：11.99.99（OS X 10.7）\n * PlistPath\n   * 隱藏在 kext 中的 info.Plist 的路徑\n   * 例：Contents/Info.plist\n\n\n# ::: details Kernel 版本號列表\n\nOS X 版本   MINKERNEL   MAXKERNEL\n10.4      8.0.0       8.99.99\n10.5      9.0.0       9.99.99\n10.6      10.0.0      10.99.99\n10.7      11.0.0      11.99.99\n10.8      12.0.0      12.99.99\n10.9      13.0.0      13.99.99\n10.10     14.0.0      14.99.99\n10.11     15.0.0      15.99.99\n10.12     16.0.0      16.99.99\n10.13     17.0.0      17.99.99\n10.14     18.0.0      18.99.99\n10.15     19.0.0      19.99.99\n11        20.0.0      20.99.99\n12        21.0.0      21.99.99\n13        22.0.0      22.99.99\n\n\n# Emulate\n\n用於隱藏不支援的 CPU 的資訊（如：Pentium 和 Celeron）來欺騙系統。\n\n\n# Intel 桌面平台\n\n我們會保留預設值（或不用填寫）。\n\n\n# Intel 筆記型電腦平台\n\n我們要針對以下平台修改一些設定：\n\n# Comet Lake\n\n * Cpuid1Data: EC060800 00000000 00000000 00000000\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n資訊\n\nComet Lake U62 CPU 需要欺騙為 Comet Lake U42，因為 macOS 不支援這些 CPUs。你可以在 Windows 的裝置管理員中檢查你是否使用 Comet Lake U62 CPU：\n\n 1. 瀏覽 "處理器" 部分\n 2. 在其中一個 CPU 按兩下\n 3. 按 "詳情" 標籤頁\n 4. 按 "硬體 ID" 欄位\n 5. 如果是 ACPI\\GenuineIntel_-_Intel64_Family_6_Model_166，你就需要欺騙 CPU。\n\n在 Linux 中，你可以執行 lscpu | grep "Model:"。如果型號是 166，你就需要欺騙 CPU。\n\n另一個方法是檢查 OpenCore 除錯日誌：\n\n> 00:023 00:005 OCCPU: Found Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz\n> \n> 00:028 00:005 OCCPU: Signature A0660 Stepping 0 Model A6 Family 6 Type 0 ExtModel A ExtFamily 0 uCode C6\n\n如果型號是 A6，你就需要欺騙 CPU。\n\n\n# Intel 高端桌面平台（HEDT）\n\n我們要針對以下平台修改一些設定：\n\n# Haswell-E\n\n * Cpuid1Data: C3060300 00000000 00000000 00000000\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n# Broadwell-E\n\n * Cpuid1Data: D4060300 00000000 00000000 00000000\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n\n# AMD 平台\n\n我們要啟用以下選項值：\n\n選項值                    是否啟用\nDummyPowerManagement   YES\n\n更深入的資訊\n * Cpuid1Mask: 不用填寫\n   * 欺騙 CPUID 的遮罩\n * Cpuid1Data: 不用填寫\n   * 欺騙 CPUID 的條目\n * DummyPowerManagement: YES\n   * NullCPUPowerManagement 最新的替代品，所有基於 AMD CPU 的電腦都需要啟用，因為 macOS 沒有針對 AMD CPU 的原生電源管理。\n * MinKernel: 不用填寫\n   * 可被注入的最低内核版本，如果沒有指定任何值則注入至所有 macOS 版本。有關可用的值，請參見此列表\n   * ex. 12.00.00（OS X 10.8）\n * MaxKernel: 不用填寫\n   * 可被注入的最高内核版本，如果沒有指定任何值則注入至所有 macOS 版本。有關可用的值，請參見此列表\n   * ex. 11.99.99（OS X 10.7）\n\n\n# Force\n\n用於從系統磁碟區中載入 kext，只適用於某些在緩存中沒有特定 kext 的老舊操作系統（如：10.16 中的 IONetworkingFamily）。\n\n對於我們來說，我們可以略過它。\n\n\n# Block\n\n這裡將阻止載入某些 kext，而我們目前無需理會這裡。\n\n\n# Patch\n\n同時修補內核和 kext。\n\n * 對於 Intel 平台，我們會保留預設值（或不用填寫）。\n\n * 對於 AMD 平台，這裡就是 AMD 內核修補表演的地方。請注意，如果你從 Clover 轉換至 OpenCore，則 Clover 的 KernelToPatch 和 MatchOS 在 OpenCore 會變為 Kernel 和 MinKernel/MaxKernel。\n\n最新的 AMD 内核修補方案可以在 AMD Vanilla GitHub 儲存庫中找到。\n\n現在，請將儲存庫下載至電腦。你會利用到儲存庫中的 patches.plist 檔案。\n\n修補程序：\n\n * 同時開啟 config.plist 及 patches.plist\n * 刪除原本在 config.plist 的 Kernel -> Patch 部分\n * 從 patches.plist 中複製 Kernel -> Patch 部分\n * 貼上至 config.plist 中原有修補所在的位置\n\n\n\n接下來，你需要還需要修改四個補丁，它們都被命名為 algrey - Force cpuid_cores_per_package。你只需要改變以下 Replace 的值：\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n * BA000000 00 => BA <core count> 0000 00\n\n其中 <core count> 應被替換為十六進制的 CPU 物理核心數量。例如，一個 8 核的 5800X 處理器的數值是：\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n * BA 08 0000 00\n\n核心數量 => 十六進制轉換表\n\n核心數       十六進制值\n2 Core    02\n4 Core    04\n6 Core    06\n8 Core    08\n12 Core   0C\n16 Core   10\n24 Core   18\n32 Core   20\n64 Core   40\n\n\n# Quirks\n\n與內核相關的設定，我們將要根據平台啟用特定選項：\n\n\n# Intel Desktop\n\n# Penryn, Clarkdale\n\n選項值                       是否啟用   說明\nAppleCpuPmCfgLock         NO     \nAppleXcpmCfgLock          NO     \nDisableIoMapper           YES    如果在 BIOS 中停用了 VT-D 則可以停用\nLapicKernelPanic          NO     HP 品牌電腦則需要啟用這個選項\nPanicNoKextDump           YES    10.12 及更新版本則不需要啟用\nPowerTimeoutKernelPanic   YES    10.14 及更新版本則不需要啟用\nXhciPortLimit             YES    如果你的主板沒有 USB 3.0，則可以停用它\n                                 11.3 及更新版本則需要停用\n\n# Sandy Bridge, Ivy Bridge\n\n選項值                       是否啟用   說明\nAppleCpuPmCfgLock         YES    如果在 BIOS 中停用了 CFG-Lock 則可以停用\nDisableIoMapper           YES    如果在 BIOS 中停用了 VT-D 則可以停用\nLapicKernelPanic          NO     HP 品牌電腦則需要啟用這個選項\nPanicNoKextDump           YES    \nPowerTimeoutKernelPanic   YES    \nXhciPortLimit             YES    如果你的主板沒有 USB 3.0，則可以停用它\n                                 11.3 及更新版本則需要停用\n\n# Haswell 或更新平台\n\n選項值                       是否啟用   說明\nAppleXcpmCfgLock          YES    如果在 BIOS 中停用了 CFG-Lock 則可以停用\nDisableIoMapper           YES    如果在 BIOS 中停用了 VT-D 則可以停用\nLapicKernelPanic          NO     HP 品牌電腦則需要啟用這個選項\nPanicNoKextDump           YES    \nPowerTimeoutKernelPanic   YES    \nXhciPortLimit             YES    11.3 及更新版本則需要停用\n\n\n# Intel Laptop\n\n# Clarksfield, Arrandale, Sandy Bridge, Ivy Bridge\n\n選項值                       是否啟用   說明\nAppleCpuPmCfgLock         YES    如果在 BIOS 中停用了 CFG-Lock 則可以停用\nDisableIoMapper           YES    如果在 BIOS 中停用了 VT-D 則可以停用\nLapicKernelPanic          NO     HP 品牌電腦則需要啟用這個選項\nPanicNoKextDump           YES    \nPowerTimeoutKernelPanic   YES    \nXhciPortLimit             YES    如果你的主板沒有 USB 3.0，則可以停用它\n                                 11.3 及更新版本則需要停用\n\n# Haswell 或更新平台\n\n選項值                       是否啟用   說明\nAppleXcpmCfgLock          YES    如果在 BIOS 中停用了 CFG-Lock 則可以停用\nDisableIoMapper           YES    如果在 BIOS 中停用了 VT-D 則可以停用\nLapicKernelPanic          NO     HP 品牌電腦則需要啟用這個選項\nPanicNoKextDump           YES    \nPowerTimeoutKernelPanic   YES    \nXhciPortLimit             YES    11.3 及更新版本則需要停用\n\n\n# AMD\n\n選項值                       是否啟用   說明\nPanicNoKextDump           YES    \nPowerTimeoutKernelPanic   YES    \nProvideCurrentCpuInfo     YES    \nXhciPortLimit             YES    11.3 及更新版本則需要停用\n\n更深入的資訊\n * AppleCpuPmCfgLock: YES\n   * 只有無法從 BIOS 停用 CFG-Lock 的時候才需要\n   * 只適用於 Ivy Bridge 或更老舊平台\n     * 註：Broadwell 或更老舊平台在運行 10.10 或更老舊版本時需要啟用\n * AppleXcpmCfgLock: YES\n   * 只有無法從 BIOS 停用 CFG-Lock 的時候才需要\n   * 只適用於 Haswell 或更新平台\n     * 註：Ivy Bridge-E 平台也包括在內，因為該平台支援 XCPM\n * CustomSMBIOSGuid: NO\n   * 在 UpdateSMBIOSMode 設為 Custom 時進行 GUID 修補。通常與 Dell 筆記型電腦有關\n   * 在 UpdateSMBIOSMode 自訂模式下啟用此選項時，可以同時將 SMBIOS 注入到「非蘋果」操作系統的功能停用，但我們不支持這種方法，因為它會破壞了 Bootcamp 的相容性。使用風險自負\n * DisableIoMapper: YES\n   * 如果在 BIOS 中無法停用或其他操作系統需要啟用 VT-D，則需要繞過 VT-D，這是比 dart=0 更好的替代方案，因為 SIP 可以在 Catalina 維持啟用\n * DisableLinkeditJettison: YES\n   * 允許 Lilu 和其他 kext 在不需要 keepsyms=1 的情況下擁有更可靠的性能\n * DisableRtcChecksum: NO\n   * 防止 AppleRTC 寫入主校驗碼 (0x58-0x59)，這對於接收到 BIOS 重置或在重新開機/關機後進入安全模式的用戶是必需的\n * ExtendBTFeatureFlags NO\n   * 對於那些非蘋果或非 fenvi 卡有連接問題的人很有幫助\n * LapicKernelPanic: NO\n   * 在 AP 核心 lapic 中斷上停用內核錯誤，一般 HP 系統需要啟用。相當於 Clover 的 Kernel LAPIC\n * LegacyCommpage: NO\n   * 解決了 macOS 中 64 位元 CPU 的 SSSE3 要求，主要適用於 64 位元 Pentium 4 CPU（即 Prescott）\n * PanicNoKextDump: YES\n   * 允許在發生內核嚴重故障時讀取內核嚴重故障日誌\n * PowerTimeoutKernelPanic: YES\n   * 幫助修復 macOS Catalina 中與蘋果驅動程式權限變化相關的內核錯誤，尤其是與數字音訊有關的問題。\n * SetApfsTrimTimeout: -1\n   * 為 SSD 上的 APFS 檔案系統設定以微秒為單位的 TRIM 超時時間，只適用於 macOS 10.14 及更新版本和有相關問題的 SSD。\n * XhciPortLimit: YES\n   * 這是 15 個連接埠限制的修補程式，不要依賴它，因為它不是一個保證修復 USB 連接埠的解決方案。如果可以的話，請建立一個USB 映射表。\n   * 在 macOS 11.3 及更新版本中, XhciPortLimit 可能無法正常工作。我們建議用戶在升級前停用此選項值並進行映射，或是從 Windows 映射。你也可以安裝 macOS 11.2.3 或更舊的版本。\n\n\n# Scheme\n\n與傳統 BIOS 開機（如：10.4-10.6）相關的設定，大多數的用戶都可以略過。但對於計劃啟動老舊操作系統的人，你可以查看以下内容：\n\n更深入的資訊\n\n * FuzzyMatch: True\n   \n   * 用於略過 kernelcache 的校驗碼，而不是選擇可用的最新緩存。可以幫助提高許多使用 10.6 系統的電腦的啟動性能\n\n * KernelArch: x86_64\n   \n   * 設定內核的架構類型, 你可以在 Auto, i386（32 位元）和 x86_64（64 位元）之間選擇。\n   * 如果你要啟動需要 32 位元的舊版操作系統（如：10.4 和 10.5），我們建議將其設置為 Auto，讓 macOS 根據您的 SMBIOS 決定。支援的值請見下表：\n     * 10.4-10.5 — x86_64, i386 或 i386-user32\n       * i386-user32 代表 32 位元用戶空間，32 位元（或缺少 SSSE3 支援）的 CPU 必須使用這個\n       * x86_64 仍然使用 32 位元內核空間，但在 10.4/5 中會保留 64 位元用戶空間\n     * 10.6 — i386, i386-user32, 或 x86_64\n     * 10.7 — i386 或 x86_64\n     * 10.8 或更新 — x86_64\n\n * KernelCache: Auto\n   \n   * 設定內核緩存類型，主要用於除錯，因此我們建議使用 Auto 以取得最佳支援\n\n\n# 完成此部分後，請編輯 Misc 部分',normalizedContent:'# kernel\n\nkernel（內核）是指操作系統中首先載入的部分。 它控制和監視記憶體、cpu 處理器分配和磁碟等硬體資源。由於 hackintosh 的性質，我們需要注入 (kernel extensions) 來修補 macos 以確保能正確啟動。\n\n與 acpi 不同，這些補丁很大程度上只適用於 macos。\n\n此部分允許在 apple kernel (xnu) 上套用不同類型的內核空間修改。目前可用的的修改包括驅動程式 (kext) 注入、內核和驅動程式修補以及阻止驅動程式執行。\n\n內核和 kext 修改會循以下順序執行：\n\n * 處理 block\n * 處理 add 和 force\n * 處理 emulate 和 quirks\n * 處理 patch\n\n\n# add\n\n在這裡，我們將指定要載入哪些 kext，載入的次序，及 kext 適用的架構。預設情況下，我們建議保留 propertree 所做的操作，但對於 32 位元 cpu，請參見以下内容：\n\n更深入的資訊\n\n你需要記住的主要事項：\n\n * 載入次序\n   * 請記住，任何插件都應該在其依賴項以後才載入\n   * 這意味著像 lilu 這樣的 kext 必須出現在 virtualsmc、applealc、whatevergreen 等插件之前\n\n提醒：propertree 用戶可以執行 cmd/ctrl + shift + r 以正確的次序加入所有 kext 而無需手動輸入。\n\n * arch\n   * kext 支援的架構\n   * 目前支援的值包括 any、i386（32 位元）及 x86_64（64位元）\n * bundlepath\n   * kext 的名稱\n   * 例：lilu.kext\n * enabled\n   * 不必多做解釋了，就是啟用或停用 kext\n * executablepath\n   * 隱藏在 kext 中的實際可執行文件的路徑，您可以通過點擊右鍵並選擇顯示套裝內容來查看 kext 的路徑。它們一般都是 contents/macos/kext，但有些 kext 將可執行文件隱藏在 plugin 資料夾下。注意，只包含 plist 的 kext 不需要填寫該屬性。\n   * 例：contents/macos/lilu\n * minkernel\n   * kext 可被注入的最低内核版本，有關可用的值，請參見下表\n   * 例：12.00.00（os x 10.8）\n * maxkernel\n   * kext 可被注入的最高内核版本，有關可用的值，請參見下表\n   * 例：11.99.99（os x 10.7）\n * plistpath\n   * 隱藏在 kext 中的 info.plist 的路徑\n   * 例：contents/info.plist\n\n\n# ::: details kernel 版本號列表\n\nos x 版本   minkernel   maxkernel\n10.4      8.0.0       8.99.99\n10.5      9.0.0       9.99.99\n10.6      10.0.0      10.99.99\n10.7      11.0.0      11.99.99\n10.8      12.0.0      12.99.99\n10.9      13.0.0      13.99.99\n10.10     14.0.0      14.99.99\n10.11     15.0.0      15.99.99\n10.12     16.0.0      16.99.99\n10.13     17.0.0      17.99.99\n10.14     18.0.0      18.99.99\n10.15     19.0.0      19.99.99\n11        20.0.0      20.99.99\n12        21.0.0      21.99.99\n13        22.0.0      22.99.99\n\n\n# emulate\n\n用於隱藏不支援的 cpu 的資訊（如：pentium 和 celeron）來欺騙系統。\n\n\n# intel 桌面平台\n\n我們會保留預設值（或不用填寫）。\n\n\n# intel 筆記型電腦平台\n\n我們要針對以下平台修改一些設定：\n\n# comet lake\n\n * cpuid1data: ec060800 00000000 00000000 00000000\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n資訊\n\ncomet lake u62 cpu 需要欺騙為 comet lake u42，因為 macos 不支援這些 cpus。你可以在 windows 的裝置管理員中檢查你是否使用 comet lake u62 cpu：\n\n 1. 瀏覽 "處理器" 部分\n 2. 在其中一個 cpu 按兩下\n 3. 按 "詳情" 標籤頁\n 4. 按 "硬體 id" 欄位\n 5. 如果是 acpi\\genuineintel_-_intel64_family_6_model_166，你就需要欺騙 cpu。\n\n在 linux 中，你可以執行 lscpu | grep "model:"。如果型號是 166，你就需要欺騙 cpu。\n\n另一個方法是檢查 opencore 除錯日誌：\n\n> 00:023 00:005 occpu: found intel(r) core(tm) i5-10210u cpu @ 1.60ghz\n> \n> 00:028 00:005 occpu: signature a0660 stepping 0 model a6 family 6 type 0 extmodel a extfamily 0 ucode c6\n\n如果型號是 a6，你就需要欺騙 cpu。\n\n\n# intel 高端桌面平台（hedt）\n\n我們要針對以下平台修改一些設定：\n\n# haswell-e\n\n * cpuid1data: c3060300 00000000 00000000 00000000\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n# broadwell-e\n\n * cpuid1data: d4060300 00000000 00000000 00000000\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n\n# amd 平台\n\n我們要啟用以下選項值：\n\n選項值                    是否啟用\ndummypowermanagement   yes\n\n更深入的資訊\n * cpuid1mask: 不用填寫\n   * 欺騙 cpuid 的遮罩\n * cpuid1data: 不用填寫\n   * 欺騙 cpuid 的條目\n * dummypowermanagement: yes\n   * nullcpupowermanagement 最新的替代品，所有基於 amd cpu 的電腦都需要啟用，因為 macos 沒有針對 amd cpu 的原生電源管理。\n * minkernel: 不用填寫\n   * 可被注入的最低内核版本，如果沒有指定任何值則注入至所有 macos 版本。有關可用的值，請參見此列表\n   * ex. 12.00.00（os x 10.8）\n * maxkernel: 不用填寫\n   * 可被注入的最高内核版本，如果沒有指定任何值則注入至所有 macos 版本。有關可用的值，請參見此列表\n   * ex. 11.99.99（os x 10.7）\n\n\n# force\n\n用於從系統磁碟區中載入 kext，只適用於某些在緩存中沒有特定 kext 的老舊操作系統（如：10.16 中的 ionetworkingfamily）。\n\n對於我們來說，我們可以略過它。\n\n\n# block\n\n這裡將阻止載入某些 kext，而我們目前無需理會這裡。\n\n\n# patch\n\n同時修補內核和 kext。\n\n * 對於 intel 平台，我們會保留預設值（或不用填寫）。\n\n * 對於 amd 平台，這裡就是 amd 內核修補表演的地方。請注意，如果你從 clover 轉換至 opencore，則 clover 的 kerneltopatch 和 matchos 在 opencore 會變為 kernel 和 minkernel/maxkernel。\n\n最新的 amd 内核修補方案可以在 amd vanilla github 儲存庫中找到。\n\n現在，請將儲存庫下載至電腦。你會利用到儲存庫中的 patches.plist 檔案。\n\n修補程序：\n\n * 同時開啟 config.plist 及 patches.plist\n * 刪除原本在 config.plist 的 kernel -> patch 部分\n * 從 patches.plist 中複製 kernel -> patch 部分\n * 貼上至 config.plist 中原有修補所在的位置\n\n\n\n接下來，你需要還需要修改四個補丁，它們都被命名為 algrey - force cpuid_cores_per_package。你只需要改變以下 replace 的值：\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n * ba000000 00 => ba <core count> 0000 00\n\n其中 <core count> 應被替換為十六進制的 cpu 物理核心數量。例如，一個 8 核的 5800x 處理器的數值是：\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n * ba 08 0000 00\n\n核心數量 => 十六進制轉換表\n\n核心數       十六進制值\n2 core    02\n4 core    04\n6 core    06\n8 core    08\n12 core   0c\n16 core   10\n24 core   18\n32 core   20\n64 core   40\n\n\n# quirks\n\n與內核相關的設定，我們將要根據平台啟用特定選項：\n\n\n# intel desktop\n\n# penryn, clarkdale\n\n選項值                       是否啟用   說明\napplecpupmcfglock         no     \napplexcpmcfglock          no     \ndisableiomapper           yes    如果在 bios 中停用了 vt-d 則可以停用\nlapickernelpanic          no     hp 品牌電腦則需要啟用這個選項\npanicnokextdump           yes    10.12 及更新版本則不需要啟用\npowertimeoutkernelpanic   yes    10.14 及更新版本則不需要啟用\nxhciportlimit             yes    如果你的主板沒有 usb 3.0，則可以停用它\n                                 11.3 及更新版本則需要停用\n\n# sandy bridge, ivy bridge\n\n選項值                       是否啟用   說明\napplecpupmcfglock         yes    如果在 bios 中停用了 cfg-lock 則可以停用\ndisableiomapper           yes    如果在 bios 中停用了 vt-d 則可以停用\nlapickernelpanic          no     hp 品牌電腦則需要啟用這個選項\npanicnokextdump           yes    \npowertimeoutkernelpanic   yes    \nxhciportlimit             yes    如果你的主板沒有 usb 3.0，則可以停用它\n                                 11.3 及更新版本則需要停用\n\n# haswell 或更新平台\n\n選項值                       是否啟用   說明\napplexcpmcfglock          yes    如果在 bios 中停用了 cfg-lock 則可以停用\ndisableiomapper           yes    如果在 bios 中停用了 vt-d 則可以停用\nlapickernelpanic          no     hp 品牌電腦則需要啟用這個選項\npanicnokextdump           yes    \npowertimeoutkernelpanic   yes    \nxhciportlimit             yes    11.3 及更新版本則需要停用\n\n\n# intel laptop\n\n# clarksfield, arrandale, sandy bridge, ivy bridge\n\n選項值                       是否啟用   說明\napplecpupmcfglock         yes    如果在 bios 中停用了 cfg-lock 則可以停用\ndisableiomapper           yes    如果在 bios 中停用了 vt-d 則可以停用\nlapickernelpanic          no     hp 品牌電腦則需要啟用這個選項\npanicnokextdump           yes    \npowertimeoutkernelpanic   yes    \nxhciportlimit             yes    如果你的主板沒有 usb 3.0，則可以停用它\n                                 11.3 及更新版本則需要停用\n\n# haswell 或更新平台\n\n選項值                       是否啟用   說明\napplexcpmcfglock          yes    如果在 bios 中停用了 cfg-lock 則可以停用\ndisableiomapper           yes    如果在 bios 中停用了 vt-d 則可以停用\nlapickernelpanic          no     hp 品牌電腦則需要啟用這個選項\npanicnokextdump           yes    \npowertimeoutkernelpanic   yes    \nxhciportlimit             yes    11.3 及更新版本則需要停用\n\n\n# amd\n\n選項值                       是否啟用   說明\npanicnokextdump           yes    \npowertimeoutkernelpanic   yes    \nprovidecurrentcpuinfo     yes    \nxhciportlimit             yes    11.3 及更新版本則需要停用\n\n更深入的資訊\n * applecpupmcfglock: yes\n   * 只有無法從 bios 停用 cfg-lock 的時候才需要\n   * 只適用於 ivy bridge 或更老舊平台\n     * 註：broadwell 或更老舊平台在運行 10.10 或更老舊版本時需要啟用\n * applexcpmcfglock: yes\n   * 只有無法從 bios 停用 cfg-lock 的時候才需要\n   * 只適用於 haswell 或更新平台\n     * 註：ivy bridge-e 平台也包括在內，因為該平台支援 xcpm\n * customsmbiosguid: no\n   * 在 updatesmbiosmode 設為 custom 時進行 guid 修補。通常與 dell 筆記型電腦有關\n   * 在 updatesmbiosmode 自訂模式下啟用此選項時，可以同時將 smbios 注入到「非蘋果」操作系統的功能停用，但我們不支持這種方法，因為它會破壞了 bootcamp 的相容性。使用風險自負\n * disableiomapper: yes\n   * 如果在 bios 中無法停用或其他操作系統需要啟用 vt-d，則需要繞過 vt-d，這是比 dart=0 更好的替代方案，因為 sip 可以在 catalina 維持啟用\n * disablelinkeditjettison: yes\n   * 允許 lilu 和其他 kext 在不需要 keepsyms=1 的情況下擁有更可靠的性能\n * disablertcchecksum: no\n   * 防止 applertc 寫入主校驗碼 (0x58-0x59)，這對於接收到 bios 重置或在重新開機/關機後進入安全模式的用戶是必需的\n * extendbtfeatureflags no\n   * 對於那些非蘋果或非 fenvi 卡有連接問題的人很有幫助\n * lapickernelpanic: no\n   * 在 ap 核心 lapic 中斷上停用內核錯誤，一般 hp 系統需要啟用。相當於 clover 的 kernel lapic\n * legacycommpage: no\n   * 解決了 macos 中 64 位元 cpu 的 ssse3 要求，主要適用於 64 位元 pentium 4 cpu（即 prescott）\n * panicnokextdump: yes\n   * 允許在發生內核嚴重故障時讀取內核嚴重故障日誌\n * powertimeoutkernelpanic: yes\n   * 幫助修復 macos catalina 中與蘋果驅動程式權限變化相關的內核錯誤，尤其是與數字音訊有關的問題。\n * setapfstrimtimeout: -1\n   * 為 ssd 上的 apfs 檔案系統設定以微秒為單位的 trim 超時時間，只適用於 macos 10.14 及更新版本和有相關問題的 ssd。\n * xhciportlimit: yes\n   * 這是 15 個連接埠限制的修補程式，不要依賴它，因為它不是一個保證修復 usb 連接埠的解決方案。如果可以的話，請建立一個usb 映射表。\n   * 在 macos 11.3 及更新版本中, xhciportlimit 可能無法正常工作。我們建議用戶在升級前停用此選項值並進行映射，或是從 windows 映射。你也可以安裝 macos 11.2.3 或更舊的版本。\n\n\n# scheme\n\n與傳統 bios 開機（如：10.4-10.6）相關的設定，大多數的用戶都可以略過。但對於計劃啟動老舊操作系統的人，你可以查看以下内容：\n\n更深入的資訊\n\n * fuzzymatch: true\n   \n   * 用於略過 kernelcache 的校驗碼，而不是選擇可用的最新緩存。可以幫助提高許多使用 10.6 系統的電腦的啟動性能\n\n * kernelarch: x86_64\n   \n   * 設定內核的架構類型, 你可以在 auto, i386（32 位元）和 x86_64（64 位元）之間選擇。\n   * 如果你要啟動需要 32 位元的舊版操作系統（如：10.4 和 10.5），我們建議將其設置為 auto，讓 macos 根據您的 smbios 決定。支援的值請見下表：\n     * 10.4-10.5 — x86_64, i386 或 i386-user32\n       * i386-user32 代表 32 位元用戶空間，32 位元（或缺少 ssse3 支援）的 cpu 必須使用這個\n       * x86_64 仍然使用 32 位元內核空間，但在 10.4/5 中會保留 64 位元用戶空間\n     * 10.6 — i386, i386-user32, 或 x86_64\n     * 10.7 — i386 或 x86_64\n     * 10.8 或更新 — x86_64\n\n * kernelcache: auto\n   \n   * 設定內核緩存類型，主要用於除錯，因此我們建議使用 auto 以取得最佳支援\n\n\n# 完成此部分後，請編輯 misc 部分',charsets:{cjk:!0}},{title:"Misc",frontmatter:{},regularPath:"/config.plist/misc.html",relativePath:"config.plist/misc.md",key:"v-3d24dfa6",path:"/config.plist/misc.html",headers:[{level:2,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:396},{level:2,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:595},{level:2,title:"Security",slug:"security",normalizedTitle:"security",charIndex:1173},{level:2,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:2418},{level:2,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:2445},{level:2,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:2505}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Boot Debug Security Serial Tools Entries",content:"# Misc\n\n這個部分主要包含一些無法分類而影響 OpenCore 操作系統開機行為的雜項設定。\n\n僅當磁碟分區滿足預定義的掃描策略（Scan Policy）的要求時，OpenCore 才能啟動該磁碟分區。該策略規定了分區必須具有哪些特定的檔案系統，以及分區必須位於哪些特定裝置類型上，以便 OpenCore 將其作為開機選項。有關詳細資訊，請參閱 ScanPolicy 屬性。\n\n掃描過程首先枚舉所有可用分區，並根據掃描策略進行過濾。每個分區可以生成多個主要選項和備用選項。主要選項代表安裝在磁碟分區上的操作系統，而備用選項代表分區上操作系統的恢復選項。\n\n * 可能存在備用選項而沒有主要選項，反之亦然。\n * 選項不一定代表同一分區上的操作系統。\n * 每個主要選項和備用選項都可以是輔助選項，也可以不是。\n   * 有關詳細信息，請參閱 HideAuxiliary 部分。\n\n\n# Boot\n\n資訊\n\n選項值             是否啟用   說明\nHideAuxiliary   YES    按空格鍵來顯示 macOS 恢復模式及其他輔助條目\n\n更深入的資訊\n * HideAuxiliary: YES\n   * 此選項將輔助條目（如：macOS 恢復模式和其他工具）從選擇器中隱藏。隱藏輔助條目可以提高多磁碟系統的啟動性能。你可以在選擇器按空格鍵來顯示輔助條目\n\n\n# Debug\n\n資訊\n\n有助我們對 OpenCore 開機問題進行除錯（除了DisplayDelay，我們將更改所有內容）：\n\n選項值               是否啟用\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\n更深入的資訊\n * AppleDebug: YES\n   * 啟用 boot.efi 的日誌記錄，用於除錯。注意：只有 10.15.4 及更高版本支援這個功能\n * ApplePanic: YES\n   * 嘗試將內核崩潰記錄到磁碟\n * DisableWatchDog: YES\n   * 停用 UEFI watchdog，可以幫助解決早期開機問題\n * DisplayLevel: 2147483650\n   * 顯示更多的除錯訊息，需要 DEBUG 版本的 OpenCore\n * SysReport: NO\n   * 有助我們進行除錯（如：傾印 ACPI 表）\n   * 注意：只限於 DEBUG 版本的 OpenCore\n * Target: 67\n   * 顯示更多的除錯訊息，需要 DEBUG 版本的 OpenCore\n\n這些值是基於在對 OpenCore 進行除錯過程中計算得出的。\n\n\n# Security\n\n資訊\n\n安全性不用多說了吧，不要跳過。我們將修改以下內容：\n\n選項值                    是否啟用       說明\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    將這個值設定為 Default，以便 OpenCore 自動設定為與您的 SMBIOS\n                                  對應的正確值。下一頁將詳細介紹這個設定。\nVault                  Optional   你不能略過這個設定。如果你不把它設定為 Optional，你會後悔的，注意：它是區分大小寫的\n\n更深入的資訊\n * AllowSetDefault: YES\n   * 允許在選擇器中按 CTRL+Enter 和 CTRL+Index 設定預設啟動條目\n * ApECID: 0\n   * 用於獲得個性化的安全啟動標識字符，由於 macOS 安裝程式中的一個 bug，這種方式目前是不可靠的，因此我們強烈建議您保留預設設置。\n * AuthRestart: NO\n   * 為 FileVault 2 啟用身份認證重啟，因此在重新開機時不需要密碼。由於被認為是一個安全風險，因此這是可選的\n * BlacklistAppleUpdate: YES\n   * 用於阻止韌體更新，由於 macOS Big Sur 不再使用 run-efi-updater 變量，這可作為額外的保護\n * DmgLoading: Signed\n   * 確保只加載經過簽名的 DMG\n * ExposeSensitiveData: 6\n   * 顯示更多的除錯訊息，需要 DEBUG 版本的 OpenCore\n * Vault: Optional\n   * 我們目前不會處理 Vault 功能，所以我們可以略過它，如果你現在把這個選項設定為 Secure，你將無法開機\n   * 這是一個字，你不能略過這個設定。如果你不把它設定為 Optional，你會後悔的，注意：它是區分大小寫的\n * ScanPolicy: 0\n   * 0 允許您查看所有可用的磁碟，請參閱安全 部分了解更多詳細訊息。如果保留為預設值，將不能從 USB 裝置啟動\n * SecureBootModel: Default\n   * 控制 macOS 中的蘋果安全啟動功能，請參閱安全部分了解更多詳細訊息。\n   * 注意：用戶可能會發現在已經安裝 macOS 的系統上升級 OpenCore 可能會導致早期開機失敗。要解決這個問題，請參見：卡在 OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\n用於序列除錯。保留為預設值。\n\n\n# Tools\n\n用於執行 OC 除錯工具（如：shell），ProperTree 的快照功能將為您加入這些工具。\n\n\n# Entries\n\n用於指定 OpenCore 無法自然找到的不規則的開機路徑。\n\n這裡不會介紹，更多信息請參見 Configuration.pdf 第 8.6 節\n\n\n# 完成此部分後，請編輯 NVRAM 部分",normalizedContent:"# misc\n\n這個部分主要包含一些無法分類而影響 opencore 操作系統開機行為的雜項設定。\n\n僅當磁碟分區滿足預定義的掃描策略（scan policy）的要求時，opencore 才能啟動該磁碟分區。該策略規定了分區必須具有哪些特定的檔案系統，以及分區必須位於哪些特定裝置類型上，以便 opencore 將其作為開機選項。有關詳細資訊，請參閱 scanpolicy 屬性。\n\n掃描過程首先枚舉所有可用分區，並根據掃描策略進行過濾。每個分區可以生成多個主要選項和備用選項。主要選項代表安裝在磁碟分區上的操作系統，而備用選項代表分區上操作系統的恢復選項。\n\n * 可能存在備用選項而沒有主要選項，反之亦然。\n * 選項不一定代表同一分區上的操作系統。\n * 每個主要選項和備用選項都可以是輔助選項，也可以不是。\n   * 有關詳細信息，請參閱 hideauxiliary 部分。\n\n\n# boot\n\n資訊\n\n選項值             是否啟用   說明\nhideauxiliary   yes    按空格鍵來顯示 macos 恢復模式及其他輔助條目\n\n更深入的資訊\n * hideauxiliary: yes\n   * 此選項將輔助條目（如：macos 恢復模式和其他工具）從選擇器中隱藏。隱藏輔助條目可以提高多磁碟系統的啟動性能。你可以在選擇器按空格鍵來顯示輔助條目\n\n\n# debug\n\n資訊\n\n有助我們對 opencore 開機問題進行除錯（除了displaydelay，我們將更改所有內容）：\n\n選項值               是否啟用\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\n更深入的資訊\n * appledebug: yes\n   * 啟用 boot.efi 的日誌記錄，用於除錯。注意：只有 10.15.4 及更高版本支援這個功能\n * applepanic: yes\n   * 嘗試將內核崩潰記錄到磁碟\n * disablewatchdog: yes\n   * 停用 uefi watchdog，可以幫助解決早期開機問題\n * displaylevel: 2147483650\n   * 顯示更多的除錯訊息，需要 debug 版本的 opencore\n * sysreport: no\n   * 有助我們進行除錯（如：傾印 acpi 表）\n   * 注意：只限於 debug 版本的 opencore\n * target: 67\n   * 顯示更多的除錯訊息，需要 debug 版本的 opencore\n\n這些值是基於在對 opencore 進行除錯過程中計算得出的。\n\n\n# security\n\n資訊\n\n安全性不用多說了吧，不要跳過。我們將修改以下內容：\n\n選項值                    是否啟用       說明\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    將這個值設定為 default，以便 opencore 自動設定為與您的 smbios\n                                  對應的正確值。下一頁將詳細介紹這個設定。\nvault                  optional   你不能略過這個設定。如果你不把它設定為 optional，你會後悔的，注意：它是區分大小寫的\n\n更深入的資訊\n * allowsetdefault: yes\n   * 允許在選擇器中按 ctrl+enter 和 ctrl+index 設定預設啟動條目\n * apecid: 0\n   * 用於獲得個性化的安全啟動標識字符，由於 macos 安裝程式中的一個 bug，這種方式目前是不可靠的，因此我們強烈建議您保留預設設置。\n * authrestart: no\n   * 為 filevault 2 啟用身份認證重啟，因此在重新開機時不需要密碼。由於被認為是一個安全風險，因此這是可選的\n * blacklistappleupdate: yes\n   * 用於阻止韌體更新，由於 macos big sur 不再使用 run-efi-updater 變量，這可作為額外的保護\n * dmgloading: signed\n   * 確保只加載經過簽名的 dmg\n * exposesensitivedata: 6\n   * 顯示更多的除錯訊息，需要 debug 版本的 opencore\n * vault: optional\n   * 我們目前不會處理 vault 功能，所以我們可以略過它，如果你現在把這個選項設定為 secure，你將無法開機\n   * 這是一個字，你不能略過這個設定。如果你不把它設定為 optional，你會後悔的，注意：它是區分大小寫的\n * scanpolicy: 0\n   * 0 允許您查看所有可用的磁碟，請參閱安全 部分了解更多詳細訊息。如果保留為預設值，將不能從 usb 裝置啟動\n * securebootmodel: default\n   * 控制 macos 中的蘋果安全啟動功能，請參閱安全部分了解更多詳細訊息。\n   * 注意：用戶可能會發現在已經安裝 macos 的系統上升級 opencore 可能會導致早期開機失敗。要解決這個問題，請參見：卡在 ocb: loadimage failed - security violation\n\n\n# serial\n\n用於序列除錯。保留為預設值。\n\n\n# tools\n\n用於執行 oc 除錯工具（如：shell），propertree 的快照功能將為您加入這些工具。\n\n\n# entries\n\n用於指定 opencore 無法自然找到的不規則的開機路徑。\n\n這裡不會介紹，更多信息請參見 configuration.pdf 第 8.6 節\n\n\n# 完成此部分後，請編輯 nvram 部分",charsets:{cjk:!0}},{title:"NVRAM",frontmatter:{},regularPath:"/config.plist/nvram.html",relativePath:"config.plist/nvram.md",key:"v-330d09a7",path:"/config.plist/nvram.html",headers:[{level:2,title:"Add",slug:"add",normalizedTitle:"add",charIndex:322},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3095}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Add Delete",content:"# NVRAM\n\n此部分允許設置非易失性 UEFI 變量（通常稱為 NVRAM 變量）。 macOS 操作系統廣泛使用 NVRAM 變量來實現操作系統 - 開機程式 - 韌體間的相互通信。因此，為了 macOS 的正常運行，我們需要提供多個 NVRAM 變量。OpenCore 使用 NVRAM 進行某些設定，例如 UI 縮放和啟動參數。\n\n每個 NVRAM 變量由其名稱、值、屬性及其 GUID 組成，代表 NVRAM 變量屬於哪個“部分”。\n\n注意：某些變量可能要加入到 PlatformInfo 章節的 PlatformNVRAM 或 General 子章節。請確保本節中設定的變量不會與這些子章節中的項目衝突，否則會造成問題。\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\n用於 OpenCore 的 UI 縮放，保留預設值就可以了。更多訊息請參閱下方的更深入資訊\n\n更深入的資訊\n\n開機程式路徑，主要用於修改 UI\n\n * DefaultBackgroundColor：boot.efi 使用的背景顏色\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore 的 NVRAM GUID，主要針對 RTCMemoryFixup 用戶\n\n更深入的資訊\n * rtc-blacklist: <>\n   * 與 RTCMemoryFixup 一起使用，請參閱這裡以取得更多訊息：修復 RTC 寫入問題\n   * 大多數用戶可以略過這一節\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\n系統完整性保護位元遮罩碼\n\n * 一般的 boot-arg：\n\nBOOT-ARGS     說明\n-v            啟用詳細模式，在你啟動時以滾動方式顯示所有後台文字，而不是蘋果 logo\n              和進度條。它對任何黑蘋果用戶來說都是無價的，因為它可以讓你深入了解開機過程，並可以幫助你識別問題、找出問題 kext\n              等等。\ndebug=0x100   停用 macOS 的 watchdog\n              功能，它有助於防止在內核出現嚴重錯誤時重新啟動。這樣你就有希望收集到一些有用的訊息並按照提示來解決問題。\nkeepsyms=1    這是 debug=0x100\n              的配套設定，它告訴操作系統在內核出現故障時也打印出這些符號。這可以提供一些更有用的見解，以瞭解造成錯誤的成因。\nalcid=1       用於設定 AppleALC 的\n              layout-id，請參閱支援的編解碼器，以確定針對你的系統會使用到的布局。更多訊息會在安裝後完善指南提供\n\n * GPU 專用 boot-arg：\n\nBOOT-ARGS        說明\nagdpmod=pikera   用於在一些 Navi GPU（RX 5000 & 6000 系列）上停用 board ID\n                 檢查，否則將會出現黑屏。如果你沒有 Navi 顯示卡，請不要使用（如：Polaris 和 Vega\n                 顯示卡就不應使用這個參數）\n-radcodec        用於允許官方不支援的 AMD GPU（以欺騙方式）使用硬體視訊編碼器\nradpg=15         用於停用一些電源開關模式，有助於正確初始化基於 Cape Verde 的 AMD GPU\nunfairgva=1      用於在支援的 AMD GPU 上修復硬體 DRM 支援\nnvda_drv_vrl=1   讓 Maxwell 和 Pascal 顯示卡在 macOS Sierra 和 High Sierra 上啟用\n                 NVIDIA 的 Web 驅動程式\n-wegnoegpu       關閉除 Intel iGPU 以外所有的 GPU，對於一些想更新 macOS 版本卻發現其獨立 GPU\n                 不支援的用戶來說很有用\n\n * 網路卡專用 boot-args：\n\nBOOT-ARGS    說明\ne1000=0      阻止 com.apple.DriverKit-AppleEthernetE1000（Apple 的 DEXT\n             驅動程式）與高端 Comet Lake 主板上的 Intel I225-V 以太網控制器匹配，導致改為載入 Apple\n             的 I225 kext 驅動程式。\n             這個參數在大多數主板上都是可選的，因為它們與 DEXT 驅動程序相容。但是，技嘉和某些其他品牌的主板上，由於 DEXT\n             驅動程序會導致當機，它們只能使用 kext 驅動程式，就需要加入這個參數。\n             如果您的主板沒有 I225-V NIC，則不需要它。\n             用於 macOS 12.2.2 和更新版本。\ndk.e1000=0   與 e1000=0 的工作模式相同，但用於 macOS 12.2.1 和更舊版本。\n\n * csr-active-config: 00000000\n   \n   * 「系統完整性保護」 (SIP) 的設定。通常建議通過恢復模式使用 csrutil 進行更改。\n   * 預設情況下，csr-active-config 會設定為 00000000，以啓用系統完整性保護。你可以選擇許多不同的值，但總的來說，為了最佳安全實踐，我們建議啟用此選項。更多訊息可以在我們的除錯頁面中找到：停用 SIP\n\n * run-efi-updater: No\n   \n   * 這用於防止蘋果的韌體更新包安裝的時候破壞開機順序；這很重要，因為這些韌體更新（用於真正的 Mac）無法在黑蘋果電腦工作。\n\n * prev-lang:kbd: <>\n   \n   * 用於非拉丁文鍵盤（格式為：lang-COUNTRY:keyboard），儘管你可以指定它，但建議保持空白（示例配置檔案中的預設值是俄文):\n   * 繁體中文（使用倉頡鍵盤）：zh-Hant:16899（十六進制值是 7a682d48616e743a3136383939）\n   * 繁體中文（使用注音鍵盤）：zh-Hant:16900（十六進制值是 7a682d48616e743a3136393030）\n   * 完整列表可前往 AppleKeyboardLayouts.txt\n   * 提示：prev-lang:kbd 可以被轉換成字串，所以你可以直接輸入 en-US:0，而不需要轉換至十六進制值。然而，有用戶反映這個做法已經無效。如要解決，可直接轉換至十六進制值。\n   * 提示 2：prev-lang:kbd 可以設定為一個空白變量（eg：<>），這將強制在首次啟動時顯示語言選擇器。\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   7a682d48616e743a3136393030\n\n\n# Delete\n\n資訊\n\n強制重寫 NVRAM 變量，請注意，Add 不會覆蓋 NVRAM 中已經存在的值，所以像 boot-args 這樣的值應該保持不變。對我們來說，我們將更改以下內容：\n\n選項值          是否啟用\nWriteFlash   YES\n\n更深入的資訊\n\n * LegacySchema\n   \n   * 用於賦予 NVRAM 變量，與 OpenVariableRuntimeDxe.efi 一起使用。只適用於沒有原生 NVRAM 的系統\n\n * WriteFlash: YES\n   \n   * 允許所有新增的變量寫入快閃記憶體。\n\n\n# 完成此部分後，請編輯 PlatformInfo 部分",normalizedContent:"# nvram\n\n此部分允許設置非易失性 uefi 變量（通常稱為 nvram 變量）。 macos 操作系統廣泛使用 nvram 變量來實現操作系統 - 開機程式 - 韌體間的相互通信。因此，為了 macos 的正常運行，我們需要提供多個 nvram 變量。opencore 使用 nvram 進行某些設定，例如 ui 縮放和啟動參數。\n\n每個 nvram 變量由其名稱、值、屬性及其 guid 組成，代表 nvram 變量屬於哪個“部分”。\n\n注意：某些變量可能要加入到 platforminfo 章節的 platformnvram 或 general 子章節。請確保本節中設定的變量不會與這些子章節中的項目衝突，否則會造成問題。\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\n用於 opencore 的 ui 縮放，保留預設值就可以了。更多訊息請參閱下方的更深入資訊\n\n更深入的資訊\n\n開機程式路徑，主要用於修改 ui\n\n * defaultbackgroundcolor：boot.efi 使用的背景顏色\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore 的 nvram guid，主要針對 rtcmemoryfixup 用戶\n\n更深入的資訊\n * rtc-blacklist: <>\n   * 與 rtcmemoryfixup 一起使用，請參閱這裡以取得更多訊息：修復 rtc 寫入問題\n   * 大多數用戶可以略過這一節\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\n系統完整性保護位元遮罩碼\n\n * 一般的 boot-arg：\n\nboot-args     說明\n-v            啟用詳細模式，在你啟動時以滾動方式顯示所有後台文字，而不是蘋果 logo\n              和進度條。它對任何黑蘋果用戶來說都是無價的，因為它可以讓你深入了解開機過程，並可以幫助你識別問題、找出問題 kext\n              等等。\ndebug=0x100   停用 macos 的 watchdog\n              功能，它有助於防止在內核出現嚴重錯誤時重新啟動。這樣你就有希望收集到一些有用的訊息並按照提示來解決問題。\nkeepsyms=1    這是 debug=0x100\n              的配套設定，它告訴操作系統在內核出現故障時也打印出這些符號。這可以提供一些更有用的見解，以瞭解造成錯誤的成因。\nalcid=1       用於設定 applealc 的\n              layout-id，請參閱支援的編解碼器，以確定針對你的系統會使用到的布局。更多訊息會在安裝後完善指南提供\n\n * gpu 專用 boot-arg：\n\nboot-args        說明\nagdpmod=pikera   用於在一些 navi gpu（rx 5000 & 6000 系列）上停用 board id\n                 檢查，否則將會出現黑屏。如果你沒有 navi 顯示卡，請不要使用（如：polaris 和 vega\n                 顯示卡就不應使用這個參數）\n-radcodec        用於允許官方不支援的 amd gpu（以欺騙方式）使用硬體視訊編碼器\nradpg=15         用於停用一些電源開關模式，有助於正確初始化基於 cape verde 的 amd gpu\nunfairgva=1      用於在支援的 amd gpu 上修復硬體 drm 支援\nnvda_drv_vrl=1   讓 maxwell 和 pascal 顯示卡在 macos sierra 和 high sierra 上啟用\n                 nvidia 的 web 驅動程式\n-wegnoegpu       關閉除 intel igpu 以外所有的 gpu，對於一些想更新 macos 版本卻發現其獨立 gpu\n                 不支援的用戶來說很有用\n\n * 網路卡專用 boot-args：\n\nboot-args    說明\ne1000=0      阻止 com.apple.driverkit-appleethernete1000（apple 的 dext\n             驅動程式）與高端 comet lake 主板上的 intel i225-v 以太網控制器匹配，導致改為載入 apple\n             的 i225 kext 驅動程式。\n             這個參數在大多數主板上都是可選的，因為它們與 dext 驅動程序相容。但是，技嘉和某些其他品牌的主板上，由於 dext\n             驅動程序會導致當機，它們只能使用 kext 驅動程式，就需要加入這個參數。\n             如果您的主板沒有 i225-v nic，則不需要它。\n             用於 macos 12.2.2 和更新版本。\ndk.e1000=0   與 e1000=0 的工作模式相同，但用於 macos 12.2.1 和更舊版本。\n\n * csr-active-config: 00000000\n   \n   * 「系統完整性保護」 (sip) 的設定。通常建議通過恢復模式使用 csrutil 進行更改。\n   * 預設情況下，csr-active-config 會設定為 00000000，以啓用系統完整性保護。你可以選擇許多不同的值，但總的來說，為了最佳安全實踐，我們建議啟用此選項。更多訊息可以在我們的除錯頁面中找到：停用 sip\n\n * run-efi-updater: no\n   \n   * 這用於防止蘋果的韌體更新包安裝的時候破壞開機順序；這很重要，因為這些韌體更新（用於真正的 mac）無法在黑蘋果電腦工作。\n\n * prev-lang:kbd: <>\n   \n   * 用於非拉丁文鍵盤（格式為：lang-country:keyboard），儘管你可以指定它，但建議保持空白（示例配置檔案中的預設值是俄文):\n   * 繁體中文（使用倉頡鍵盤）：zh-hant:16899（十六進制值是 7a682d48616e743a3136383939）\n   * 繁體中文（使用注音鍵盤）：zh-hant:16900（十六進制值是 7a682d48616e743a3136393030）\n   * 完整列表可前往 applekeyboardlayouts.txt\n   * 提示：prev-lang:kbd 可以被轉換成字串，所以你可以直接輸入 en-us:0，而不需要轉換至十六進制值。然而，有用戶反映這個做法已經無效。如要解決，可直接轉換至十六進制值。\n   * 提示 2：prev-lang:kbd 可以設定為一個空白變量（eg：<>），這將強制在首次啟動時顯示語言選擇器。\n\nkey             type     value\nprev-lang:kbd   string   7a682d48616e743a3136393030\n\n\n# delete\n\n資訊\n\n強制重寫 nvram 變量，請注意，add 不會覆蓋 nvram 中已經存在的值，所以像 boot-args 這樣的值應該保持不變。對我們來說，我們將更改以下內容：\n\n選項值          是否啟用\nwriteflash   yes\n\n更深入的資訊\n\n * legacyschema\n   \n   * 用於賦予 nvram 變量，與 openvariableruntimedxe.efi 一起使用。只適用於沒有原生 nvram 的系統\n\n * writeflash: yes\n   \n   * 允許所有新增的變量寫入快閃記憶體。\n\n\n# 完成此部分後，請編輯 platforminfo 部分",charsets:{cjk:!0}},{title:"PlatformInfo",frontmatter:{},regularPath:"/config.plist/platform-info.html",relativePath:"config.plist/platform-info.md",key:"v-5ff6c07a",path:"/config.plist/platform-info.html",headers:[{level:2,title:"SMBIOS 列表",slug:"smbios-列表",normalizedTitle:"smbios 列表",charIndex:1204},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:748}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"SMBIOS 列表 Generic",content:'# PlatformInfo\n\nPlatformInfo 是與系統管理 BIOS (SMBIOS) 相關的設置，它是通過系統固件傳遞管理信息的標準。\n\n在真正的 Mac 上，SMBIOS 有幾個重要的數據，例如產品型號、主板 ID、序列號等。這些信息對於 macOS 至關重要，因為 SMBIOS 會影響電腦的性能，甚至在啟動 iMessage 或 FaceTime 服務時影響你的 Apple ID 。\n\n由於 Hackintosh 使用自己的供應商的硬體和韌體，而沒有蘋果的韌體。因此，我們需要欺騙 SMBIOS 來匹配您的硬體規格，讓 macOS 能夠正確地與 CPU 電源管理、顯卡和 USB 等硬體資源通信。\n\n為了設定 SMBIOS 訊息，我們將使用 CorpNewt 的 GenSMBIOS 應用程式。\n\n執行 GenSMBIOS，選擇選項 1 下載 MacSerial，選擇選項 3 下載 SMBIOS。這將給我們一個類似於下面的輸出：\n\n  #######################################################\n #               iMac13,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac13,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\n將 Type 部分複製到 Generic -> SystemProductName。\n\n將 Serial 部分複製到 Generic -> SystemSerialNumber。\n\n將 Board Serial 部分複製到 Generic -> MLB。\n\n將 SmUUID 部分複製到 Generic -> SystemUUID。\n\n我們將 Generic -> ROM 設定為蘋果 ROM（從真正的 Mac 中傾印），你的網路卡 MAC 地址，或任何隨機的 MAC 地址的其中之一 （可以是 6 個隨機位元組，在本指南中我們將使用 11223300 0000。安裝後，請跟隨修復 iServices 頁面了解如何找到你的真實 MAC 地址）\n\n提醒：你需要一個無效的序列號！當你在蘋果的查看裝置保固範圍頁面中輸入你的序列號時，你會得到一條訊息，如「請輸入有效的序號」。\n\nAutomatic: YES\n\n * 基於 Generic 章節而不是 DataHub、NVRAM 和 SMBIOS 節來生成 PlatformInfo\n\n\n# SMBIOS 列表\n\n請根據你使用的平台使用適當的 SMBIOS。\n\nIntel 桌面平台\n * Yonah, Conroe, Penryn\n\nSMBIOS     硬體                            OS 支援\niMac4,1    Yonah SMBIOS(32-bit)          10.4 至 10.6.8\niMac7,1    Conroe SMBIOS(64-Bit, SSE3)   10.4 至 10.11.6\niMac10,1   Penryn SMBIOS(64-Bit, SSE4)   10.6 至 10.13.6\n\n** 如果你打算稍後執行 macOS 10.14、Mojave 或更新版本，那麼我們推薦使用 MacPro6,1 這個 SMBIOS。但請注意，你將需要 telemetrap.kext 來解決安裝問題\n\n * Clarkdale\n\nSMBIOS      硬體\niMac11,1    Lynnfield SMBIOS\niMac11,2    Clarkdale SMBIOS\nMacPro6,1   Mojave 和更新的 SMBIOS\n\n** 如果你打算稍後執行 macOS 10.14 Mojave 或更新版本，那麼推薦使用 MacPro6,1 這個 SMBIOS。由於本平台的 iGPU 已經不再支援，你必須在 BIOS 中停用它\n\n * Sandy Bridge\n\nSMBIOS      硬體\niMac12,2    預設 Sandy Bridge SMBIOS\nMacPro6,1   Mojave 和更新的 SMBIOS\n\n** 如果你打算稍後執行 macOS 10.14 Mojave 或更新版本，那麼推薦使用 MacPro6,1 這個 SMBIOS。由於本平台的 iGPU 已經不再支援，你必須在 BIOS 中停用它\n\n * Ivy Bridge\n\nSMBIOS      硬體                          OS 支援\niMac13,1    Ivy Bridge SMBIOS，只有 iGPU   最高 10.15\niMac13,2    Ivy Bridge SMBIOS，有 dGPU    最高 10.15\niMac14,4    Ivy Bridge SMBIOS，只有 iGPU   僅 11\niMac15,1    Ivy Bridge SMBIOS，有 dGPU    僅 11\nMacPro6,1   Monterey的 SMBIOS            最高 12\n\n** 注意：MacPro6,1 SMBIOS 不應用於 Catalina 或更舊版本，因為使用未最佳化的 SMBIOS 可能會使電源管理等功能出現問題。\n\n * Haswell, Broadwell\n\nSMBIOS     硬體                         OS 支援\niMac14,4   Haswell SMBIOS，只有 iGPU     最高 11\niMac15,1   Haswell SMBIOS，有 dGPU      最高 11\niMac16,2   Broadwell SMBIOS，只有 iGPU   最高 12\niMac17,1   Broadwell SMBIOS，有 dGPU    最高 12\n\n * Skylake\n\nSMBIOS     硬體        OS 支援\niMac17,1   Skylake   最高 12\n\n * Kaby Lake\n\nSMBIOS     硬體                         OS 支援\niMac18,1   Kaby Lake SMBIOS，只有 iGPU   最高 13\niMac18,3   Kaby Lake SMBIOS，有 dGPU    最高 13\n\n * Coffee Lake\n\nSMBIOS     硬體\niMac19,1   Coffee Lake SMBIOS，Mojave 或更新\niMac18,3   Coffee Lake SMBIOS，High Sierra 或更舊\n\n * Comet Lake\n\nSMBIOS     硬體\niMac20,1   i7-10700K 或更低端（8 核心或更少）\niMac20,2   i9-10850K 或更高端（10 核心）\n\nIntel 筆記型電腦平台\n * Clarksfield, Arrandale\n\nSMBIOS          CPU 類型        顯示尺寸\nMacBookPro6,1   四核心 45W（高端）   17"\nMacBookPro6,2   四核心 45W（低端）   15"\n\n * Sandy Bridge\n\nSMBIOS          CPU 類型        GPU                           顯示尺寸\nMacBookAir4,1   雙核心 17W       iGPU: HD 3000                 11"\nMacBookAir4,2   雙核心 17W       iGPU: HD 3000                 13"\nMacBookPro8,1   雙核心 35W       iGPU: HD 3000                 13"\nMacBookPro8,2   四核心 45W（高端）   iGPU: HD 3000 + dGPU: 6490M   15"\nMacBookPro8,3   四核心 45W（低端）   iGPU: HD 3000 + dGPU: 6750M   17"\nMacmini5,1      雙核心 NUC       iGPU: HD 3000                 N/A\nMacmini5,3      四核心 NUC       iGPU: HD 3000                 N/A\n\n * Ivy Bridge\n\nSMBIOS           CPU 類型    顯示尺寸\nMacBookAir6,1    雙核心 15W   11"\nMacBookAir6,2    雙核心 15W   13"\nMacBookPro11,1   雙核心 28W   13"\nMacBookPro11,2   四核心 45W   15"\nMacBookPro11,3   四核心 45W   15"\nMacBookPro11,4   四核心 45W   15"\nMacBookPro11,5   四核心 45W   15"\nMacmini7,1       NUC       N/A\n\n * Haswell\n\nSMBIOS           CPU 類型    GPU                                    顯示尺寸\nMacBookAir6,1    雙核心 15W   iGPU: HD 5000                          11"\nMacBookAir6,2    雙核心 15W   iGPU: HD 5000                          13"\nMacBookPro11,1   雙核心 28W   iGPU: Iris 5100                        13"\nMacBookPro11,2   四核心 45W   iGPU: Iris Pro 5200                    15"\nMacBookPro11,3   四核心 45W   iGPU: Iris Pro 5200 + dGPU: GT 750M    15"\nMacBookPro11,4   四核心 45W   iGPU: Iris Pro 5200                    15"\nMacBookPro11,5   四核心 45W   iGPU: Iris Pro 5200 + dGPU: R9 M370X   15"\nMacmini7,1       NUC       HD 5000/Iris 5100                      N/A\n\n**注意：MacBookPro11,4, MacBookPro11,5 和 Macmini7,1 SMBIOS 支援 macOS Monterey。\n\n * Broadwell\n\nSMBIOS           CPU 類型        GPU                                    顯示尺寸\nMacBook8,1       雙核心 7W（低端）    iGPU: HD 5300                          12"\nMacBookAir7,1    雙核心 15W       iGPU: HD 6000                          11"\nMacBookAir7,2    雙核心 15W       iGPU: HD 6000                          13"\nMacBookPro12,1   雙核心 28W（高端）   iGPU: Iris 6100                        13"\nMacBookPro11,2   四核心 45W       iGPU: Iris Pro 5200                    15"\nMacBookPro11,3   四核心 45W       iGPU: Iris Pro 5200 + dGPU: GT 750M    15"\nMacBookPro11,4   四核心 45W       iGPU: Iris Pro 5200                    15"\nMacBookPro11,5   四核心 45W       iGPU: Iris Pro 5200 + dGPU: R9 M370X   15"\niMac16,1         NUC Systems   HD 6000/Iris Pro 6200                  N/A\n\n**注意：macOS Monterey 已放棄 MacBook8,1 的支援。要運行 macOS Monterey，請使用其他 SMBIOS。\n\n * Skylake\n\nSMBIOS           CPU 類型        GPU                                       顯示尺寸   TOUCH ID\nMacBook9,1       雙核心 7W（低端）    iGPU: HD 515                              12"    沒有\nMacBookPro13,1   雙核心 15W（低端）   iGPU: Iris 540                            13"    沒有\nMacBookPro13,2   雙核心 15W（高端）   iGPU: Iris 550                            13"    有\nMacBookPro13,3   四核心 45W       iGPU: HD 530 + dGPU: Radeon Pro 450/455   15"    有\niMac17,1         NUC           iGPU: HD 530 + R9 290                     N/A    沒有\n\n**注意：macOS Ventura 已放棄 Skylake SMBIOS 的支援。\n\n * Kaby Lake\n\nSMBIOS           CPU 類型        GPU                                         顯示尺寸   TOUCH ID\nMacBookPro14,1   雙核心 15W（低端）   iGPU: Iris Plus 640                         13"    沒有\nMacBookPro14,2   雙核心 15W（高端）   iGPU: Iris Plus 650                         13"    有\nMacBookPro14,3   四核心 45W       iGPU: HD 630 + dGPU: Radeon Pro 555X/560X   15"    有\niMac18,1         NUC           iGPU: Iris Plus 640                         N/A    沒有\n\n * Coffee Lake, Whiskey Lake\n\nSMBIOS           CPU 類型    GPU                                          顯示尺寸   TOUCH ID\nMacBookPro15,1   六核心 45W   iGPU: UHD 630 + dGPU: Radeon Pro 555X/560X   15"    有\nMacBookPro15,2   四核心 15W   iGPU: Iris 655                               13"    有\nMacBookPro15,3   六核心 45W   iGPU: UHD 630 + dGPU: Vega 16/20             15"    有\nMacBookPro15,4   四核心 15W   iGPU: Iris 645                               13"    有\nMacmini8,1       NUC       HD 6000/Iris Pro 6200                        N/A    沒有\n\n * Coffee Lake Plus, Comet Lake\n\nSMBIOS           CPU 類型      GPU                                顯示尺寸   TOUCH ID\nMacBookPro16,1   六／八核心 45W   iGPU: UHD 630 + dGPU: 5300/5500M   15"    有\nMacBookPro16,3   四核心 15W     iGPU: Iris 645                     13"    有\nMacBookPro16,4   六／八核心 45W   iGPU: UHD 630 + dGPU: 5600M        15"    有\nMacmini8,1       NUC         HD 6000/Iris Pro 6200              N/A    沒有\n\n * Icelake\n\nSMBIOS           CPU 類型      GPU           顯示尺寸   TOUCH ID\nMacBookAir9,1    雙／四核心 12W   iGPU: G4/G7   13"    有\nMacBookPro16,2   四核心 28W     iGPU: G4/G7   13"    有\n\nAMD 平台\n * Bulldozer(15h), Jaguar(16h)\n\nSMBIOS       GPU                                         OS 支援限制\nMacPro6,1    AMD GCN GPU（支援 HD 及 R5/R7/R9 系列）            \nMacPro7,1    AMD Polaris 或更新                             10.15 或更新\niMacPro1,1   NVIDIA Maxwell 及 Pascal，或 AMD Polaris 或更新   10.13 至 10.14\niMac14,2     NVIDIA Maxwell 及 Pascal                     \n\n * 桌面平台的 Ryzen 和 Threadripper(17h and 19h)\n\nSMBIOS       GPU                                         OS 支援限制\nMacPro6,1    AMD GCN GPU（支援 HD 及 R5/R7/R9 系列）            \nMacPro7,1    AMD Polaris 或更新                             10.15 或更新\niMacPro1,1   NVIDIA Maxwell 及 Pascal，或 AMD Polaris 或更新   10.13 至 10.14\niMac14,2     NVIDIA Maxwell 及 Pascal                     \n\n * 筆記型電腦平台的 Ryzen(17h and 19h)\n\nSMBIOS           GPU                            OS 支援限制\niMacPro1,1       iGPU: Vega Raven ASIC family   11 至最新版本\niMac20,1         iGPU: Vega Raven ASIC family   11 至最新版本\nMacBookPro16,3   iGPU: Vega Raven ASIC family   11 至最新版本\n\n\n# Generic\n\n更深入的資訊\n\n * AdviseFeatures: NO\n   \n   * 當 EFI 分割不是 Windows 磁碟上的第一個分割時使用\n\n * MaxBIOSVersion: NO\n   \n   * 設定 BIOS 版本為 Max，以避免在 Big Sur 及以上版本進行韌體更新，主要適用於正版 Mac。\n\n * ProcessorType: 0\n   \n   * 設定為 0 以用於自動類型檢測，但是如果需要，這個值可以被覆蓋。參見 AppleSmBios.h 取得可能的值\n\n * SpoofVendor: YES\n   \n   * 將供應商欄位替換為 Acidanthera，在大多數情況下使用蘋果作為供應商通常不安全\n\n * SystemMemoryStatus: Auto\n   \n   * 在 SMBIOS 訊息中設定記憶體是否焊接，純粹用於修飾，因此我們建議使用 Auto\n\n * UpdateDataHub: YES\n   \n   * 更新 Data Hub 欄位\n\n * UpdateNVRAM: YES\n   \n   * 更新 NVRAM 欄位\n\n * UpdateSMBIOS: YES\n   \n   * 更新 SMBIOS 欄位\n\n * UpdateSMBIOSMode: Create\n   \n   * 用新分配的 EfiReservedMemoryType 替換表, 在需要 CustomSMBIOSGuiduse 的 Dell 筆記型電腦上使用 Custom\n   * 設定為 Custom 並啟用 CustomSMBIOSGuid 也可以阻止 SMBIOS 注入到「非蘋果」作業系統，但是我們不支持這種方法，因為它破壞了 Bootcamp 的相容性。使用風險自負\n\n\n# 完成此部分後，請編輯 UEFI 部分',normalizedContent:'# platforminfo\n\nplatforminfo 是與系統管理 bios (smbios) 相關的設置，它是通過系統固件傳遞管理信息的標準。\n\n在真正的 mac 上，smbios 有幾個重要的數據，例如產品型號、主板 id、序列號等。這些信息對於 macos 至關重要，因為 smbios 會影響電腦的性能，甚至在啟動 imessage 或 facetime 服務時影響你的 apple id 。\n\n由於 hackintosh 使用自己的供應商的硬體和韌體，而沒有蘋果的韌體。因此，我們需要欺騙 smbios 來匹配您的硬體規格，讓 macos 能夠正確地與 cpu 電源管理、顯卡和 usb 等硬體資源通信。\n\n為了設定 smbios 訊息，我們將使用 corpnewt 的 gensmbios 應用程式。\n\n執行 gensmbios，選擇選項 1 下載 macserial，選擇選項 3 下載 smbios。這將給我們一個類似於下面的輸出：\n\n  #######################################################\n #               imac13,2 smbios info                  #\n#######################################################\n\ntype:         imac13,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\n將 type 部分複製到 generic -> systemproductname。\n\n將 serial 部分複製到 generic -> systemserialnumber。\n\n將 board serial 部分複製到 generic -> mlb。\n\n將 smuuid 部分複製到 generic -> systemuuid。\n\n我們將 generic -> rom 設定為蘋果 rom（從真正的 mac 中傾印），你的網路卡 mac 地址，或任何隨機的 mac 地址的其中之一 （可以是 6 個隨機位元組，在本指南中我們將使用 11223300 0000。安裝後，請跟隨修復 iservices 頁面了解如何找到你的真實 mac 地址）\n\n提醒：你需要一個無效的序列號！當你在蘋果的查看裝置保固範圍頁面中輸入你的序列號時，你會得到一條訊息，如「請輸入有效的序號」。\n\nautomatic: yes\n\n * 基於 generic 章節而不是 datahub、nvram 和 smbios 節來生成 platforminfo\n\n\n# smbios 列表\n\n請根據你使用的平台使用適當的 smbios。\n\nintel 桌面平台\n * yonah, conroe, penryn\n\nsmbios     硬體                            os 支援\nimac4,1    yonah smbios(32-bit)          10.4 至 10.6.8\nimac7,1    conroe smbios(64-bit, sse3)   10.4 至 10.11.6\nimac10,1   penryn smbios(64-bit, sse4)   10.6 至 10.13.6\n\n** 如果你打算稍後執行 macos 10.14、mojave 或更新版本，那麼我們推薦使用 macpro6,1 這個 smbios。但請注意，你將需要 telemetrap.kext 來解決安裝問題\n\n * clarkdale\n\nsmbios      硬體\nimac11,1    lynnfield smbios\nimac11,2    clarkdale smbios\nmacpro6,1   mojave 和更新的 smbios\n\n** 如果你打算稍後執行 macos 10.14 mojave 或更新版本，那麼推薦使用 macpro6,1 這個 smbios。由於本平台的 igpu 已經不再支援，你必須在 bios 中停用它\n\n * sandy bridge\n\nsmbios      硬體\nimac12,2    預設 sandy bridge smbios\nmacpro6,1   mojave 和更新的 smbios\n\n** 如果你打算稍後執行 macos 10.14 mojave 或更新版本，那麼推薦使用 macpro6,1 這個 smbios。由於本平台的 igpu 已經不再支援，你必須在 bios 中停用它\n\n * ivy bridge\n\nsmbios      硬體                          os 支援\nimac13,1    ivy bridge smbios，只有 igpu   最高 10.15\nimac13,2    ivy bridge smbios，有 dgpu    最高 10.15\nimac14,4    ivy bridge smbios，只有 igpu   僅 11\nimac15,1    ivy bridge smbios，有 dgpu    僅 11\nmacpro6,1   monterey的 smbios            最高 12\n\n** 注意：macpro6,1 smbios 不應用於 catalina 或更舊版本，因為使用未最佳化的 smbios 可能會使電源管理等功能出現問題。\n\n * haswell, broadwell\n\nsmbios     硬體                         os 支援\nimac14,4   haswell smbios，只有 igpu     最高 11\nimac15,1   haswell smbios，有 dgpu      最高 11\nimac16,2   broadwell smbios，只有 igpu   最高 12\nimac17,1   broadwell smbios，有 dgpu    最高 12\n\n * skylake\n\nsmbios     硬體        os 支援\nimac17,1   skylake   最高 12\n\n * kaby lake\n\nsmbios     硬體                         os 支援\nimac18,1   kaby lake smbios，只有 igpu   最高 13\nimac18,3   kaby lake smbios，有 dgpu    最高 13\n\n * coffee lake\n\nsmbios     硬體\nimac19,1   coffee lake smbios，mojave 或更新\nimac18,3   coffee lake smbios，high sierra 或更舊\n\n * comet lake\n\nsmbios     硬體\nimac20,1   i7-10700k 或更低端（8 核心或更少）\nimac20,2   i9-10850k 或更高端（10 核心）\n\nintel 筆記型電腦平台\n * clarksfield, arrandale\n\nsmbios          cpu 類型        顯示尺寸\nmacbookpro6,1   四核心 45w（高端）   17"\nmacbookpro6,2   四核心 45w（低端）   15"\n\n * sandy bridge\n\nsmbios          cpu 類型        gpu                           顯示尺寸\nmacbookair4,1   雙核心 17w       igpu: hd 3000                 11"\nmacbookair4,2   雙核心 17w       igpu: hd 3000                 13"\nmacbookpro8,1   雙核心 35w       igpu: hd 3000                 13"\nmacbookpro8,2   四核心 45w（高端）   igpu: hd 3000 + dgpu: 6490m   15"\nmacbookpro8,3   四核心 45w（低端）   igpu: hd 3000 + dgpu: 6750m   17"\nmacmini5,1      雙核心 nuc       igpu: hd 3000                 n/a\nmacmini5,3      四核心 nuc       igpu: hd 3000                 n/a\n\n * ivy bridge\n\nsmbios           cpu 類型    顯示尺寸\nmacbookair6,1    雙核心 15w   11"\nmacbookair6,2    雙核心 15w   13"\nmacbookpro11,1   雙核心 28w   13"\nmacbookpro11,2   四核心 45w   15"\nmacbookpro11,3   四核心 45w   15"\nmacbookpro11,4   四核心 45w   15"\nmacbookpro11,5   四核心 45w   15"\nmacmini7,1       nuc       n/a\n\n * haswell\n\nsmbios           cpu 類型    gpu                                    顯示尺寸\nmacbookair6,1    雙核心 15w   igpu: hd 5000                          11"\nmacbookair6,2    雙核心 15w   igpu: hd 5000                          13"\nmacbookpro11,1   雙核心 28w   igpu: iris 5100                        13"\nmacbookpro11,2   四核心 45w   igpu: iris pro 5200                    15"\nmacbookpro11,3   四核心 45w   igpu: iris pro 5200 + dgpu: gt 750m    15"\nmacbookpro11,4   四核心 45w   igpu: iris pro 5200                    15"\nmacbookpro11,5   四核心 45w   igpu: iris pro 5200 + dgpu: r9 m370x   15"\nmacmini7,1       nuc       hd 5000/iris 5100                      n/a\n\n**注意：macbookpro11,4, macbookpro11,5 和 macmini7,1 smbios 支援 macos monterey。\n\n * broadwell\n\nsmbios           cpu 類型        gpu                                    顯示尺寸\nmacbook8,1       雙核心 7w（低端）    igpu: hd 5300                          12"\nmacbookair7,1    雙核心 15w       igpu: hd 6000                          11"\nmacbookair7,2    雙核心 15w       igpu: hd 6000                          13"\nmacbookpro12,1   雙核心 28w（高端）   igpu: iris 6100                        13"\nmacbookpro11,2   四核心 45w       igpu: iris pro 5200                    15"\nmacbookpro11,3   四核心 45w       igpu: iris pro 5200 + dgpu: gt 750m    15"\nmacbookpro11,4   四核心 45w       igpu: iris pro 5200                    15"\nmacbookpro11,5   四核心 45w       igpu: iris pro 5200 + dgpu: r9 m370x   15"\nimac16,1         nuc systems   hd 6000/iris pro 6200                  n/a\n\n**注意：macos monterey 已放棄 macbook8,1 的支援。要運行 macos monterey，請使用其他 smbios。\n\n * skylake\n\nsmbios           cpu 類型        gpu                                       顯示尺寸   touch id\nmacbook9,1       雙核心 7w（低端）    igpu: hd 515                              12"    沒有\nmacbookpro13,1   雙核心 15w（低端）   igpu: iris 540                            13"    沒有\nmacbookpro13,2   雙核心 15w（高端）   igpu: iris 550                            13"    有\nmacbookpro13,3   四核心 45w       igpu: hd 530 + dgpu: radeon pro 450/455   15"    有\nimac17,1         nuc           igpu: hd 530 + r9 290                     n/a    沒有\n\n**注意：macos ventura 已放棄 skylake smbios 的支援。\n\n * kaby lake\n\nsmbios           cpu 類型        gpu                                         顯示尺寸   touch id\nmacbookpro14,1   雙核心 15w（低端）   igpu: iris plus 640                         13"    沒有\nmacbookpro14,2   雙核心 15w（高端）   igpu: iris plus 650                         13"    有\nmacbookpro14,3   四核心 45w       igpu: hd 630 + dgpu: radeon pro 555x/560x   15"    有\nimac18,1         nuc           igpu: iris plus 640                         n/a    沒有\n\n * coffee lake, whiskey lake\n\nsmbios           cpu 類型    gpu                                          顯示尺寸   touch id\nmacbookpro15,1   六核心 45w   igpu: uhd 630 + dgpu: radeon pro 555x/560x   15"    有\nmacbookpro15,2   四核心 15w   igpu: iris 655                               13"    有\nmacbookpro15,3   六核心 45w   igpu: uhd 630 + dgpu: vega 16/20             15"    有\nmacbookpro15,4   四核心 15w   igpu: iris 645                               13"    有\nmacmini8,1       nuc       hd 6000/iris pro 6200                        n/a    沒有\n\n * coffee lake plus, comet lake\n\nsmbios           cpu 類型      gpu                                顯示尺寸   touch id\nmacbookpro16,1   六／八核心 45w   igpu: uhd 630 + dgpu: 5300/5500m   15"    有\nmacbookpro16,3   四核心 15w     igpu: iris 645                     13"    有\nmacbookpro16,4   六／八核心 45w   igpu: uhd 630 + dgpu: 5600m        15"    有\nmacmini8,1       nuc         hd 6000/iris pro 6200              n/a    沒有\n\n * icelake\n\nsmbios           cpu 類型      gpu           顯示尺寸   touch id\nmacbookair9,1    雙／四核心 12w   igpu: g4/g7   13"    有\nmacbookpro16,2   四核心 28w     igpu: g4/g7   13"    有\n\namd 平台\n * bulldozer(15h), jaguar(16h)\n\nsmbios       gpu                                         os 支援限制\nmacpro6,1    amd gcn gpu（支援 hd 及 r5/r7/r9 系列）            \nmacpro7,1    amd polaris 或更新                             10.15 或更新\nimacpro1,1   nvidia maxwell 及 pascal，或 amd polaris 或更新   10.13 至 10.14\nimac14,2     nvidia maxwell 及 pascal                     \n\n * 桌面平台的 ryzen 和 threadripper(17h and 19h)\n\nsmbios       gpu                                         os 支援限制\nmacpro6,1    amd gcn gpu（支援 hd 及 r5/r7/r9 系列）            \nmacpro7,1    amd polaris 或更新                             10.15 或更新\nimacpro1,1   nvidia maxwell 及 pascal，或 amd polaris 或更新   10.13 至 10.14\nimac14,2     nvidia maxwell 及 pascal                     \n\n * 筆記型電腦平台的 ryzen(17h and 19h)\n\nsmbios           gpu                            os 支援限制\nimacpro1,1       igpu: vega raven asic family   11 至最新版本\nimac20,1         igpu: vega raven asic family   11 至最新版本\nmacbookpro16,3   igpu: vega raven asic family   11 至最新版本\n\n\n# generic\n\n更深入的資訊\n\n * advisefeatures: no\n   \n   * 當 efi 分割不是 windows 磁碟上的第一個分割時使用\n\n * maxbiosversion: no\n   \n   * 設定 bios 版本為 max，以避免在 big sur 及以上版本進行韌體更新，主要適用於正版 mac。\n\n * processortype: 0\n   \n   * 設定為 0 以用於自動類型檢測，但是如果需要，這個值可以被覆蓋。參見 applesmbios.h 取得可能的值\n\n * spoofvendor: yes\n   \n   * 將供應商欄位替換為 acidanthera，在大多數情況下使用蘋果作為供應商通常不安全\n\n * systemmemorystatus: auto\n   \n   * 在 smbios 訊息中設定記憶體是否焊接，純粹用於修飾，因此我們建議使用 auto\n\n * updatedatahub: yes\n   \n   * 更新 data hub 欄位\n\n * updatenvram: yes\n   \n   * 更新 nvram 欄位\n\n * updatesmbios: yes\n   \n   * 更新 smbios 欄位\n\n * updatesmbiosmode: create\n   \n   * 用新分配的 efireservedmemorytype 替換表, 在需要 customsmbiosguiduse 的 dell 筆記型電腦上使用 custom\n   * 設定為 custom 並啟用 customsmbiosguid 也可以阻止 smbios 注入到「非蘋果」作業系統，但是我們不支持這種方法，因為它破壞了 bootcamp 的相容性。使用風險自負\n\n\n# 完成此部分後，請編輯 uefi 部分',charsets:{cjk:!0}},{title:"蘋果安全開機",frontmatter:{},regularPath:"/config.plist/security.html",relativePath:"config.plist/security.md",key:"v-59a4f3a6",path:"/config.plist/security.html",headers:[{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:84},{level:3,title:"Security -> SecureBootModel",slug:"security-securebootmodel",normalizedTitle:"security -&gt; securebootmodel",charIndex:null}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Misc Security -> SecureBootModel",content:"# 蘋果安全開機\n\nconfig.plist 中的這些設定可以限制 OpenCore 啟動哪些 macOS 版本。在啟動 USB 之前，你需要先檢查這些設定。\n\n\n# Misc\n\n\n# Security -> SecureBootModel\n\nOpenCore 預設啟用 Apple Secure Boot。這將支援安全功能，如驗證 macOS 的 boot.efi，其副作用是限制了 OpenCore 能啟動的 macOS 版本。\n\n * Big Sur 及以上版本 (11.0+)：建議設定為 Default。\n * High Sierra 至 Catalina (10.13-10.15)：\n   * 如果你欲使用的型號沒有在下表列出，請設定為 Disabled。\n   * 如果要使用 NVIDIA Web Drivers，請設定為 Disabled。\n   * 如果你欲使用的 SMBIOS 有在下表列出，請將你欲安裝的版本與最低版本比較。如果欲安裝的版本比你的 SMBIOS 要求的最低版本還要低的話，請設定為 Disabled，否則請設定為你所使用的 SMBIOS。\n * Sierra 及以下版本 (10.4-10.12)：這個設定沒有作用。\n * 如果需要啟動多個版本，你可能需要設定為 Disabled。\n   * 示例：一個沒有 T2 的 SMBIOS 要同時啟動 High Sierra 和 Big Sur 的話，便需要設定為 Disabled。\n   * 下表列出了 T2 SMBIOS 的最低版本限制。\n\nT2 Mac 型號\n\nSMBIOS                           最低 MACOS 版本\niMacPro1,1 (December 2017)       10.13.2 (17C2111)\nMacBookPro15,1 (July 2018)       10.13.6 (17G2112)\nMacBookPro15,2 (July 2018)       10.13.6 (17G2112)\nMacmini8,1 (October 2018)        10.14 (18A2063)\nMacBookAir8,1 (October 2018)     10.14.1 (18B2084)\nMacBookPro15,3 (May 2019)        10.14.5 (18F132)\nMacBookPro15,4 (July 2019)       10.14.5 (18F2058)\nMacBookAir8,2 (July 2019)        10.14.5 (18F2058)\nMacBookPro16,1 (November 2019)   10.15.1 (19B2093)\nMacPro7,1 (December 2019)        10.15.1 (19B88)\nMacBookAir9,1 (March 2020)       10.15.3 (19D2064)\nMacBookPro16,2 (May 2020)        10.15.4 (19E2269)\nMacBookPro16,3 (May 2020)        10.15.4 (19E2265)\nMacBookPro16,4 (June 2020)       10.15.5 (19F96)\niMac20,1 (August 2020)           10.15.6 (19G2005)\niMac20,2 (August 2020)           10.15.6 (19G2005)\n\n\n# 完成此部分後，請編輯 BIOS 設定",normalizedContent:"# 蘋果安全開機\n\nconfig.plist 中的這些設定可以限制 opencore 啟動哪些 macos 版本。在啟動 usb 之前，你需要先檢查這些設定。\n\n\n# misc\n\n\n# security -> securebootmodel\n\nopencore 預設啟用 apple secure boot。這將支援安全功能，如驗證 macos 的 boot.efi，其副作用是限制了 opencore 能啟動的 macos 版本。\n\n * big sur 及以上版本 (11.0+)：建議設定為 default。\n * high sierra 至 catalina (10.13-10.15)：\n   * 如果你欲使用的型號沒有在下表列出，請設定為 disabled。\n   * 如果要使用 nvidia web drivers，請設定為 disabled。\n   * 如果你欲使用的 smbios 有在下表列出，請將你欲安裝的版本與最低版本比較。如果欲安裝的版本比你的 smbios 要求的最低版本還要低的話，請設定為 disabled，否則請設定為你所使用的 smbios。\n * sierra 及以下版本 (10.4-10.12)：這個設定沒有作用。\n * 如果需要啟動多個版本，你可能需要設定為 disabled。\n   * 示例：一個沒有 t2 的 smbios 要同時啟動 high sierra 和 big sur 的話，便需要設定為 disabled。\n   * 下表列出了 t2 smbios 的最低版本限制。\n\nt2 mac 型號\n\nsmbios                           最低 macos 版本\nimacpro1,1 (december 2017)       10.13.2 (17c2111)\nmacbookpro15,1 (july 2018)       10.13.6 (17g2112)\nmacbookpro15,2 (july 2018)       10.13.6 (17g2112)\nmacmini8,1 (october 2018)        10.14 (18a2063)\nmacbookair8,1 (october 2018)     10.14.1 (18b2084)\nmacbookpro15,3 (may 2019)        10.14.5 (18f132)\nmacbookpro15,4 (july 2019)       10.14.5 (18f2058)\nmacbookair8,2 (july 2019)        10.14.5 (18f2058)\nmacbookpro16,1 (november 2019)   10.15.1 (19b2093)\nmacpro7,1 (december 2019)        10.15.1 (19b88)\nmacbookair9,1 (march 2020)       10.15.3 (19d2064)\nmacbookpro16,2 (may 2020)        10.15.4 (19e2269)\nmacbookpro16,3 (may 2020)        10.15.4 (19e2265)\nmacbookpro16,4 (june 2020)       10.15.5 (19f96)\nimac20,1 (august 2020)           10.15.6 (19g2005)\nimac20,2 (august 2020)           10.15.6 (19g2005)\n\n\n# 完成此部分後，請編輯 bios 設定",charsets:{cjk:!0}},{title:"UEFI",frontmatter:{},regularPath:"/config.plist/uefi.html",relativePath:"config.plist/uefi.md",key:"v-87f19466",path:"/config.plist/uefi.html",headers:[{level:2,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:265},{level:2,title:"Input",slug:"input",normalizedTitle:"input",charIndex:779},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:967},{level:2,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:161},{level:2,title:"Output",slug:"output",normalizedTitle:"output",charIndex:1457},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:1676},{level:2,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:1751},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:2433}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"APFS Input Audio Drivers Output ProtocolOverrides Quirks ReservedMemory",content:"# UEFI\n\nUEFI（統一可延伸韌體介面，Unified Extensible Firmware Interface）是用來定義作業系統與系統韌體之間的軟件介面。此部分允許載入其他 UEFI 模塊以及對韌體進行調整。\n\n要檢查韌體內容、應用修改並執行升級，可以使用 UEFITool 和其他工具程式。\n\nConnectDrivers: YES\n\n * 強制 .efi 驅動，更改為 NO 將自動連接新增的 UEFI 驅動。这可以使稍微加快開機速度，但不是所有驅動程式都連接自己。例如某些檔案系統驅動程式可能無法載入。\n\n\n# APFS\n\n預設情況下，OpenCore 只會載入 macOS Big Sur 及更新版本的 APFS 驅動程式。如果你要啟動 macOS Catalina 或更舊版本，你可能需要設定新的最低版本或日期。 不設定這個選項可能導致 OpenCore 無法找到你的 macOS 磁碟區！\n\nmacOS Sierra 及更舊版本使用 HFS 而非 APFS。如果要啟動舊版 macOS，你可以略過這個章節。\n\nAPFS 版本\n\n如果要修改最小版本，需要同時設定 MinVersion 和 MinDate。\n\nMACOS 版本                最低版本（MINVERSION）   最低日期（MINDATE）\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\n無限制                     -1                 -1\n\n\n# Input\n\n用於 FileVault 和熱鍵支援的 boot.efi 鍵盤直連相關的設定。\n\n這部分對於大多數用戶來說是沒有用處的，因此大多數的設定都應該保留預設值。\n\n但是，對於使用傳統 BIOS 的用戶來說，請更改下列設定：\n\n選項值          是否啟用   說明\nKeySupport   NO     如果你的 BIOS 支援 UEFI，則可以啟用\n\n\n# Audio\n\n針對 AudioDxe 的設定，我們可以略過這個章節（保留預設值）。這與 macOS 的音訊支援無關。\n\n * 有關 AudioDxe 和音訊章節的進一步使用，請參見安裝後完善指南的：增設 GUI 和開機聲音\n\n\n# Drivers\n\n在這裡加入你的 .efi 驅動程式。\n\n必須要放入下列的驅動程式：\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi（如果你的韌體不支援 UEFI）\n\n更深入的資訊\n\nKEY         TYPE      說明\nPath        String    檔案在 OC/Drivers 目錄的路徑\nLoadEarly   Boolean   在設定 NVRAM 前先行載入驅動程式，如果系統使用舊版 NVRAM，應該只在 OpenRuntime.efi 和\n                      OpenVariableRuntimeDxe.efi 啟用\nArguments   String    有些驅動程式接受這裡指定的其他參數。\n\n\n# Output\n\n與 OpenCore 的視訊輸出有關的設定，這些選項對我們來說沒有作用，因此請保留預設值。\n\n更深入的資訊\n\nOUTPUT    VALUE   說明\nUIScale   0       0 根據解析度自動調整\n                  -1 保持不變\n                  1 1x 縮放，適用於一般顯示器\n                  2 2x 縮放，適用於 HiDPI 顯示器\n\n\n# ProtocolOverrides\n\n主要適用於虛擬機器、舊 Mac 和 FileVault 用戶。詳細訊息請見：安全與 FileVault\n\n\n# Quirks\n\n資訊\n\n與 UEFI 環境有關的設定，我們將會更改以下選項：\n\n選項值                      是否啟用   說明\nIgnoreInvalidFlexRatio   YES    如果你使用舊版 BIOS，請停用這選項\nUnblockFsConnect         NO     主要用於 HP 主版\n\n更深入的資訊\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * 修復 MSR_FLEX_RATIO (0x194) 無法在 BIOS 停用的問題，所有比 Skylake 舊的平台的電腦均需要啟用\n\n * DisableSecurityPolicy: NO\n   \n   * 停用韌體的平台安全策略，建議用於有問題的韌體（例如：停用安全開機會導致第三方韌體驅動程式無法載入）。\n   * 如果是 Microsoft Surface 裝置，則建議啟用這個選項\n\n * RequestBootVarRouting: YES\n   \n   * 將 AptioMemoryFix 從 EFI_GLOBAL_VARIABLE_GUID 重定向至 OC_VENDOR_VARIABLE_GUID。當韌體嘗試刪除啟動項時則需要啟用，建議在所有系統上啟用，以確保正確地安裝更新，啟動磁碟控制台的功能等等。\n\n * UnblockFsConnect: NO\n   \n   * 某些韌體的按驅動程式模式會在磁碟分割控制代碼阻止它們工作，這將導致檔案系統協議無法安裝。主要適用於沒有列出磁碟的 HP 電腦\n\n\n# ReservedMemory\n\n用於將某些記憶體區域從操作系統中移除，避免它們被使用。這主要與 Sandy Bridge iGPU 或具有錯誤記憶體的系統有關。本指南中不會有涉及這個選項的用法\n\n\n# 完成以後，我們需要編輯額外的值。請前往蘋果安全開機頁面",normalizedContent:"# uefi\n\nuefi（統一可延伸韌體介面，unified extensible firmware interface）是用來定義作業系統與系統韌體之間的軟件介面。此部分允許載入其他 uefi 模塊以及對韌體進行調整。\n\n要檢查韌體內容、應用修改並執行升級，可以使用 uefitool 和其他工具程式。\n\nconnectdrivers: yes\n\n * 強制 .efi 驅動，更改為 no 將自動連接新增的 uefi 驅動。这可以使稍微加快開機速度，但不是所有驅動程式都連接自己。例如某些檔案系統驅動程式可能無法載入。\n\n\n# apfs\n\n預設情況下，opencore 只會載入 macos big sur 及更新版本的 apfs 驅動程式。如果你要啟動 macos catalina 或更舊版本，你可能需要設定新的最低版本或日期。 不設定這個選項可能導致 opencore 無法找到你的 macos 磁碟區！\n\nmacos sierra 及更舊版本使用 hfs 而非 apfs。如果要啟動舊版 macos，你可以略過這個章節。\n\napfs 版本\n\n如果要修改最小版本，需要同時設定 minversion 和 mindate。\n\nmacos 版本                最低版本（minversion）   最低日期（mindate）\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\n無限制                     -1                 -1\n\n\n# input\n\n用於 filevault 和熱鍵支援的 boot.efi 鍵盤直連相關的設定。\n\n這部分對於大多數用戶來說是沒有用處的，因此大多數的設定都應該保留預設值。\n\n但是，對於使用傳統 bios 的用戶來說，請更改下列設定：\n\n選項值          是否啟用   說明\nkeysupport   no     如果你的 bios 支援 uefi，則可以啟用\n\n\n# audio\n\n針對 audiodxe 的設定，我們可以略過這個章節（保留預設值）。這與 macos 的音訊支援無關。\n\n * 有關 audiodxe 和音訊章節的進一步使用，請參見安裝後完善指南的：增設 gui 和開機聲音\n\n\n# drivers\n\n在這裡加入你的 .efi 驅動程式。\n\n必須要放入下列的驅動程式：\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi（如果你的韌體不支援 uefi）\n\n更深入的資訊\n\nkey         type      說明\npath        string    檔案在 oc/drivers 目錄的路徑\nloadearly   boolean   在設定 nvram 前先行載入驅動程式，如果系統使用舊版 nvram，應該只在 openruntime.efi 和\n                      openvariableruntimedxe.efi 啟用\narguments   string    有些驅動程式接受這裡指定的其他參數。\n\n\n# output\n\n與 opencore 的視訊輸出有關的設定，這些選項對我們來說沒有作用，因此請保留預設值。\n\n更深入的資訊\n\noutput    value   說明\nuiscale   0       0 根據解析度自動調整\n                  -1 保持不變\n                  1 1x 縮放，適用於一般顯示器\n                  2 2x 縮放，適用於 hidpi 顯示器\n\n\n# protocoloverrides\n\n主要適用於虛擬機器、舊 mac 和 filevault 用戶。詳細訊息請見：安全與 filevault\n\n\n# quirks\n\n資訊\n\n與 uefi 環境有關的設定，我們將會更改以下選項：\n\n選項值                      是否啟用   說明\nignoreinvalidflexratio   yes    如果你使用舊版 bios，請停用這選項\nunblockfsconnect         no     主要用於 hp 主版\n\n更深入的資訊\n\n * ignoreinvalidflexratio: yes\n   \n   * 修復 msr_flex_ratio (0x194) 無法在 bios 停用的問題，所有比 skylake 舊的平台的電腦均需要啟用\n\n * disablesecuritypolicy: no\n   \n   * 停用韌體的平台安全策略，建議用於有問題的韌體（例如：停用安全開機會導致第三方韌體驅動程式無法載入）。\n   * 如果是 microsoft surface 裝置，則建議啟用這個選項\n\n * requestbootvarrouting: yes\n   \n   * 將 aptiomemoryfix 從 efi_global_variable_guid 重定向至 oc_vendor_variable_guid。當韌體嘗試刪除啟動項時則需要啟用，建議在所有系統上啟用，以確保正確地安裝更新，啟動磁碟控制台的功能等等。\n\n * unblockfsconnect: no\n   \n   * 某些韌體的按驅動程式模式會在磁碟分割控制代碼阻止它們工作，這將導致檔案系統協議無法安裝。主要適用於沒有列出磁碟的 hp 電腦\n\n\n# reservedmemory\n\n用於將某些記憶體區域從操作系統中移除，避免它們被使用。這主要與 sandy bridge igpu 或具有錯誤記憶體的系統有關。本指南中不會有涉及這個選項的用法\n\n\n# 完成以後，我們需要編輯額外的值。請前往蘋果安全開機頁面",charsets:{cjk:!0}},{title:"OpenCore and macOS 11: Big Sur",frontmatter:{search:!1},regularPath:"/extras/big-sur/",relativePath:"extras/big-sur/README.md",key:"v-b45995c4",path:"/extras/big-sur/",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:369},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:414},{level:3,title:"A supported SMBIOS",slug:"a-supported-smbios",normalizedTitle:"a supported smbios",charIndex:433},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:457},{level:3,title:"Up-to-date kexts, bootloader and config.plist",slug:"up-to-date-kexts-bootloader-and-config-plist",normalizedTitle:"up-to-date kexts, bootloader and config.plist",charIndex:481},{level:3,title:"Known issues",slug:"known-issues",normalizedTitle:"known issues",charIndex:532},{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:548},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:564},{level:3,title:"Stuck at Forcing CS_RUNTIME for entitlement",slug:"stuck-at-forcing-cs-runtime-for-entitlement",normalizedTitle:"stuck at forcing cs_runtime for entitlement",charIndex:585},{level:3,title:"Stuck at PCI Configuration Begins for Intel's X99 and X299 boards",slug:"stuck-at-pci-configuration-begins-for-intel-s-x99-and-x299-boards",normalizedTitle:"stuck at pci configuration begins for intel's x99 and x299 boards",charIndex:634},{level:3,title:"Stuck on ramrod(^^^^^^^^^^^^^)",slug:"stuck-on-ramrod",normalizedTitle:"stuck on ramrod(^^^^^^^^^^^^^)",charIndex:705},{level:3,title:"X79 and X99 Kernel Panic on IOPCIFamily",slug:"x79-and-x99-kernel-panic-on-iopcifamily",normalizedTitle:"x79 and x99 kernel panic on iopcifamily",charIndex:741},{level:3,title:"DeviceProperties injection failing",slug:"deviceproperties-injection-failing",normalizedTitle:"deviceproperties injection failing",charIndex:786},{level:3,title:"Keyboard and Mouse broken",slug:"keyboard-and-mouse-broken",normalizedTitle:"keyboard and mouse broken",charIndex:826},{level:3,title:"Early Kernel Panic on max_cpus_from_firmware not yet initialized",slug:"early-kernel-panic-on-max-cpus-from-firmware-not-yet-initialized",normalizedTitle:"early kernel panic on max_cpus_from_firmware not yet initialized",charIndex:857},{level:3,title:"Cannot update to newer versions of Big Sur",slug:"cannot-update-to-newer-versions-of-big-sur",normalizedTitle:"cannot update to newer versions of big sur",charIndex:927},{level:3,title:"Kernel Panic on Rooting from the live fs",slug:"kernel-panic-on-rooting-from-the-live-fs",normalizedTitle:"kernel panic on rooting from the live fs",charIndex:975},{level:3,title:"Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation",slug:"asus-z97-and-hedt-ie-x99-and-x299-failing-stage-2-installation",normalizedTitle:"asus z97 and hedt(ie. x99 and x299) failing stage 2 installation",charIndex:1021},{level:3,title:"Laptops kernel panicking on cannot perform kext scan",slug:"laptops-kernel-panicking-on-cannot-perform-kext-scan",normalizedTitle:"laptops kernel panicking on cannot perform kext scan",charIndex:1091},{level:3,title:'Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',slug:"reboot-on-appleusbhostport-createdevice-failed-to-create-device-on-macos-11-3",normalizedTitle:"reboot on &quot;appleusbhostport::createdevice: failed to create device&quot; on macos 11.3+",charIndex:null}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:'Table of Contents Prerequisites A supported SMBIOS Supported hardware Up-to-date kexts, bootloader and config.plist Known issues Installation Troubleshooting Stuck at Forcing CS_RUNTIME for entitlement Stuck at PCI Configuration Begins for Intel\'s X99 and X299 boards Stuck on ramrod(^^^^^^^^^^^^^) X79 and X99 Kernel Panic on IOPCIFamily DeviceProperties injection failing Keyboard and Mouse broken Early Kernel Panic on max_cpus_from_firmware not yet initialized Cannot update to newer versions of Big Sur Kernel Panic on Rooting from the live fs Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation Laptops kernel panicking on cannot perform kext scan Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',content:"# OpenCore and macOS 11: Big Sur\n\nIt's that time of year again and with it, and a new macOS beta has been dropped. Here's all the info you need to get started.\n\nReminder\n\nThis page will be a small discussion on exactly what you need to prepare for Big Sur, a more in depth look into what's changed on Big Sur can be found here:\n\n * What's new in macOS 11, Big Sur!\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * A supported SMBIOS\n   * Supported hardware\n   * Up-to-date kexts, bootloader and config.plist\n   * Known issues\n * Installation\n * Troubleshooting\n   * Stuck at Forcing CS_RUNTIME for entitlement\n   * Stuck at PCI Configuration Begins for Intel's X99 and X299 boards\n   * Stuck on ramrod(^^^^^^^^^^^^^)\n   * X79 and X99 Kernel Panic on IOPCIFamily\n   * DeviceProperties injection failing\n   * Keyboard and Mouse broken\n   * Early Kernel Panic on max_cpus_from_firmware not yet initialized\n   * Cannot update to newer versions of Big Sur\n   * Kernel Panic on Rooting from the live fs\n   * Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation\n   * Laptops kernel panicking on cannot perform kext scan\n   * Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\n\n\n\n# Prerequisites\n\nBefore we can jump head first into installing Big Sur, we need to go over a few things:\n\n\n# A supported SMBIOS\n\nBig Sur dropped a few Ivy Bridge and Haswell based SMBIOS from macOS, so see below that yours wasn't dropped:\n\n * iMac14,3 and older\n   * Note iMac14,4 is still supported\n * MacPro5,1 and older\n * Macmini6,x and older\n * MacBook7,1 and older\n * MacBookAir5,x and older\n * MacBookPro10,x and older\n\nIf your SMBIOS was supported in Catalina and isn't included above, you're good to go!\n\nSupported SMBIOS\n\nSMBIOS still supported in macOS Big Sur:\n\n * iMac14,4 and newer\n * MacPro6,1 and newer\n * iMacPro1,1 and newer\n * Macmini7,1 and newer\n * MacBook8,1 and newer\n * MacBookAir6,x and newer\n * MacBookPro11,x and newer\n\nFor full list of supported SMBIOS including OS support, see here: Choosing the right SMBIOS\n\nFor those wanting a simple translation for their Machines:\n\n * iMac13,1 should transition over to using iMac14,4\n * iMac13,2 should transition over to using iMac15,1\n * iMac14,2 and iMac14,3 should transition over to using iMac15,1\n   * Note: AMD CPU users with NVIDIA GPUs may find MacPro7,1 more suitable\n * iMac14,1 should transition over to iMac14,4\n\n\n# Supported hardware\n\nNot much hardware has been dropped, though the few that have:\n\n * Official Ivy Bridge U, H and S CPUs.\n   * These CPUs will still boot without much issue, but note that no Macs are supported with consumer Ivy Bridge in Big Sur.\n   * Ivy Bridge-E CPUs are still supported thanks to being in MacPro6,1\n * Ivy Bridge iGPUs slated for removal\n   * HD 4000 and HD 2500, however currently these drivers are still present in 11.0.1\n * BCM4331 and BCM43224 based WiFi cards.\n   * See Wireless Buyers guide for potential cards to upgrade to.\n   * Potential work-around is to inject a patched IO80211Family, see here for more details: IO80211 Patches\n * Certain SATA controllers dropped\n   * For some reason, Apple removed the AppleIntelPchSeriesAHCI class from AppleAHCIPort.kext. Due to the outright removal of the class, trying to spoof to another ID (generally done by SATA-unsupported.kext) can fail for many and create instability for others.\n   * A partial fix is to inject Catalina's version with any conflicting symbols being patched. You can find a sample kext here: Catalina's patched AppleAHCIPort.kext\n   * We recommend setting the MinKernel value to 20.0.0 for the kext CtlnaAHCIPort.kext to avoid any potential conflicts. This way, it will work in both Catalina and Big Sur so you can remove SATA-unsupported if you want.\n\nOther notable changes:\n\n * MSI Navi users no longer require the ATY,rom/-wegnoegpu patch to boot the installer\n * Stage 2 installation requiring working NVRAM\n   * Asus 9 series: For more info, see here: Haswell ASUS Z97 Big Sur Update Thread\n   * X99 and X299 users with broken NVRAM will need to install on another machine and move the SSD when done\n\n\n# Up-to-date kexts, bootloader and config.plist\n\nEnsure that you have the latest version of OpenCore, kexts and config.plist so it won't have any odd compatibility issues. You can simply download and update OpenCore and kexts as mentioned here:\n\n * Updating OpenCore and macOS\n\nIf you're unsure what version of OpenCore you're using, you can run the following in terminal:\n\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:opencore-version\n\n\n * Note: The about command will require you to include bit 0x2 in Misc -> Security -> ExposeSensitiveData, recommended values for ExposeSensitiveData is 0x6 which includes bits 0x2 and 0x4.\n\n# AMD Note\n\nReminder for AMD Users: Don't forget to update your kernel patches with those provided by AMD OS X, otherwise you'll be unable to boot Big Sur:\n\n * AMD OSX Patches\n\n# Intel HEDT Note\n\nFor X79, X99 and X299 users, pay close attention to the below. Big Sur has added new requirements for ACPI, so you'll need to grab some new SSDTs:\n\n * X79\n   * SSDT-UNC\n * X99\n   * SSDT-UNC\n   * SSDT-RTC0-RANGE\n * X299\n   * SSDT-RTC0-RANGE\n\nFor those who'd like precompiled files, see here:\n\n * Getting started with ACPI: Prebuilt SSDTs\n\n\n# Known issues\n\nWith Big Sur, quite a bit broke. Mainly the following:\n\n * Lilu\n   * Mainly user-space patching has severely broke, meaning certain functionality may have broken\n   * These include:\n     * DiskArbitrationFixup\n     * MacProMemoryNotificationDisabler\n     * SidecarEnabler\n     * SystemProfilerMemoryFixup\n     * NoTouchID\n     * WhateverGreen's DRM and -cdfon patches\n * AirportBrcmFixup\n   * Forcing a specific driver to load with brcmfx-driver= may help\n     * BCM94352Z users for example may need brcmfx-driver=2 in boot-args to resolve this, other chipsets will need other variables.\n   * Setting MaxKernel to 19.9.9 for AirPortBrcm4360_Injector.kext may help. More information from the repo\n * SATA Support broken\n   * Due to Apple dropping the AppleIntelPchSeriesAHCI class in AppleAHCIPort.kext\n   * To resolve, add Catalina's patched AppleAHCIPort.kext with the MinKernel set to 20.0.0\n * XhciPortLimit broken in macOS 11.3 Beta 2 and newer\n   * With macOS 11.3 and newer, XhciPortLimit is broken resulting in boot loops. We advise users either install an older OS(ie. macOS 10.15, Catalina) or find a 11.2.3 or older Big Sur installer\n     * For education purposes, we have a copy provided here: macOS 11.2.3 InstallAssistant(macOS)\n     * If you've already mapped your USB ports and disabled XhciPortLimit, you can boot macOS 11.3+ without issue\n\nAnd while not an issue, SIP has now gained a new bit so to properly disable SIP you need to set csr-active-config to FF0F0000. See here for more info: Disabling SIP\n\n\n# Installation\n\nGuides have been updated to accommodate Big Sur, see the applicable OS environment for you:\n\n * macOS users\n * Windows users\n * Linux users\n\n\n# Troubleshooting\n\n\n# Stuck at Forcing CS_RUNTIME for entitlement\n\n\n\nThis is actually the part at where macOS will seal the system volume, and where it may seem that macOS has gotten stuck. DO NOT RESTART thinking you're stuck, this will take quite some time to complete, otherwise you'll break your installation.\n\n\n# Stuck at PCI Configuration Begins for Intel's X99 and X299 boards\n\n\n\nAs previously mentioned, Intel HEDT motherboards may have some issues revolving around their RTC device in ACPI. To resolve, you'll need to look at your RTC device and see which regions are missing. For more information, see here: SSDT-RTC0-RANGE.dsl\n\n\n# Stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nIf you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your SMC emulator is broken. To fix this, you have 2 options:\n\n * Ensure you're using the latest builds of VirtualSMC and Lilu, with the vsmcgen=1 boot-arg\n * Switch over to Rehabman's FakeSMC (you can use the MinKernel/MaxKernel trick mentioned above to restrict FakeSMC to Big Sur and up)\n\nAnd when switching kexts, ensure you don't have both FakeSMC and VirtualSMC enabled in your config.plist, as this will cause a conflict.\n\n\n# X79 and X99 Kernel Panic on IOPCIFamily\n\nThis is due to an unused uncore PCI Bridges being enabled in ACPI, and so IOPCIFamily will kernel panic when probing unknown devices. To resolve, you'll need to add SSDT-UNC to your system\n\n\n# DeviceProperties injection failing\n\nWith Big Sur, macOS has become much pickier with devices being present in ACPI. Especially if you're injecting important properties for WhateverGreen or AppleALC, you may find they're no longer applying. To verify whether your ACPI defines your hardware, check for the acpi-path property in IORegistryExplorer:\n\n\n\nIf no property is found, you'll need to create an SSDT that provides the full pathing as you likely have a PCI Bridge that is not documented in your ACPI tables. An example of this can be found here: SSDT-BRG0\n\n * Note: This issue may also pop up in older versions of macOS, however Big Sur is most likely to have issues.\n\n\n# Keyboard and Mouse broken\n\nFor certain legacy systems, you may notice that while the USB ports work your HID-based devices such as the keyboard and mouse may be broken. To resolve this, add the following patch:\n\nIOHIDFamily Patch\n\nconfig.plist -> Kernel -> Patch:\n\nKEY           TYPE      VALUE\nBase          String    _isSingleUser\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    com.apple.iokit.IOHIDFamily\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B801000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\nSource\n\n\n# Early Kernel Panic on max_cpus_from_firmware not yet initialized\n\nIf you receive an early kernel panic on max_cpus_from_firmware not yet initialized, this is due to the new acpi_count_enabled_logical_processors method added in macOS Big Sur's kernel. To resolve, please ensure you're on OpenCore 0.6.0 or newer with the AvoidRuntimeDefrag Quirk enabled.\n\n * Note: Due to how early this kernel panic happens, you may only be able to log it either via serial or rebooting in a known working install of macOS and checking your panic logged in NVRAM.\n   * Most users will see this panic simply as [EB|#LOG:EXITBS:START]\n\nExample Kernel Panic\n\nOn-screen:\n\n\n\nVia serial logging or NVRAM:\n\n\n\nLegacy Edge Case\n\nOn certain hardware, mainly the HP DC7900, the kernel still can't determine exactly how many threads your hardware supports. This will result in the aforementioned kernel panic and so we need to hard code the CPU core's value.\n\nTo do this, Add the following patch(replacing the 04 from B8 04 00 00 00 C3 with the amount of CPU threads your hardware supports):\n\nKEY           TYPE      VALUE\nBase          String    _acpi_count_enabled_logical_processors\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    Kernel\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B804000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\n\n# Cannot update to newer versions of Big Sur\n\nGenerally there's 2 main culprits:\n\n * Broken Update Utility\n   * Most common error if running a beta, try this first\n * Broken Seal\n\n# Broken Update Utility\n\nGenerally seen with every beta cycle, simply unenroll and enroll again:\n\n# Unenroll from beta catalog\nsudo /System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil unenroll\n# Enroll back in\nsudo /System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil enroll DeveloperSeed\n\n\nThen check back with settings, and it should pop up. If not, run the following:\n\n# List software updates via terminal\nsoftwareupdate -l\n\n\nThis should help kick the update utility back into gear. If you still have issues, check the Broken Seal section.\n\n# Broken Seal\n\nWith Apple's new snapshotting for the system drive, they now depend heavily on this for OS updates to apply correctly. So when a drove's seal is broken, macOS will refuse to update the drive.\n\nTo verify yourself, check that Snapshot Sealed returns as YES:\n\n# List all APFS volumes\ndiskutil apfs list\n\n# Look for your system volume\nVolume disk1s8 A604D636-3C54-4CAA-9A31-5E1A460DC5C0\n        ---------------------------------------------------\n        APFS Volume Disk (Role):   disk1s8 (System)\n        Name:                      Big Sur HD (Case-insensitive)\n        Mount Point:               Not Mounted\n        Capacity Consumed:         15113809920 B (15.1 GB)\n        Sealed:                    Broken\n        FileVault:                 No\n        |\n        Snapshot:                  4202EBE5-288B-4701-BA1E-B6EC8AD6397D\n        Snapshot Disk:             disk1s8s1\n        Snapshot Mount Point:      /\n        Snapshot Sealed:           Yes\n\n\nIf it returns Snapshot Sealed: Broken, then you'll want to go through the following:\n\n * Update to OpenCore 0.6.4 or newer\n   * Specifically commit ba10b5d or newer is required\n * Revert to older snapshots\n   * Mainly for those who have tampered with the system volume\n   * See here how to revert: Rolling back APFS Snapshots\n\n\n# Kernel Panic on Rooting from the live fs\n\nFull error:\n\nRooting from the live fs of a sealed volume is not allowed on a RELEASE build\n\n\nThis is due to issues around Secure Boot boot being enabled in Beta 10 with older versions of OpenCore. Simply update to 0.6.4 to resolve\n\n * Specifically commit ba10b5d or newer is required\n\n\n# Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation\n\nWith Big Sur, there's a higher reliance on native NVRAM for installation otherwise the installer will get stuck in a reboot loop. To resolve this you'll need to either:\n\n * Install Big Sur on another machine, then transfer the drive\n * Fix the motherboard's NVRAM\n   * mainly applicable with Asus's Z97 series\n\nFor the latter, see here: Haswell ASUS Z97 Big Sur Update Thread\n\n\n# Laptops kernel panicking on cannot perform kext scan\n\nThis is due to multiple copies of the same kext being in your kernel cache, and to be more specific having multiple copies of VoodooInput. Look over your Kernel -> Add and verify you only have 1 copy of VoodooInput enabled.\n\n * Note: Both VoodooI2C and VoodooPS2 have a bundled copy of VoodooInput, which you disable is up to personal preference\n\n\n# Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\nThis is due to XhciPortLimit breaking with macOS 11.3 and newer, to resolve you must disable XhciPortLimit under Kernel -> Quirks. Please ensure you've mapped your USB ports correctly before doing so.",normalizedContent:"# opencore and macos 11: big sur\n\nit's that time of year again and with it, and a new macos beta has been dropped. here's all the info you need to get started.\n\nreminder\n\nthis page will be a small discussion on exactly what you need to prepare for big sur, a more in depth look into what's changed on big sur can be found here:\n\n * what's new in macos 11, big sur!\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * a supported smbios\n   * supported hardware\n   * up-to-date kexts, bootloader and config.plist\n   * known issues\n * installation\n * troubleshooting\n   * stuck at forcing cs_runtime for entitlement\n   * stuck at pci configuration begins for intel's x99 and x299 boards\n   * stuck on ramrod(^^^^^^^^^^^^^)\n   * x79 and x99 kernel panic on iopcifamily\n   * deviceproperties injection failing\n   * keyboard and mouse broken\n   * early kernel panic on max_cpus_from_firmware not yet initialized\n   * cannot update to newer versions of big sur\n   * kernel panic on rooting from the live fs\n   * asus z97 and hedt(ie. x99 and x299) failing stage 2 installation\n   * laptops kernel panicking on cannot perform kext scan\n   * reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\n\n\n\n# prerequisites\n\nbefore we can jump head first into installing big sur, we need to go over a few things:\n\n\n# a supported smbios\n\nbig sur dropped a few ivy bridge and haswell based smbios from macos, so see below that yours wasn't dropped:\n\n * imac14,3 and older\n   * note imac14,4 is still supported\n * macpro5,1 and older\n * macmini6,x and older\n * macbook7,1 and older\n * macbookair5,x and older\n * macbookpro10,x and older\n\nif your smbios was supported in catalina and isn't included above, you're good to go!\n\nsupported smbios\n\nsmbios still supported in macos big sur:\n\n * imac14,4 and newer\n * macpro6,1 and newer\n * imacpro1,1 and newer\n * macmini7,1 and newer\n * macbook8,1 and newer\n * macbookair6,x and newer\n * macbookpro11,x and newer\n\nfor full list of supported smbios including os support, see here: choosing the right smbios\n\nfor those wanting a simple translation for their machines:\n\n * imac13,1 should transition over to using imac14,4\n * imac13,2 should transition over to using imac15,1\n * imac14,2 and imac14,3 should transition over to using imac15,1\n   * note: amd cpu users with nvidia gpus may find macpro7,1 more suitable\n * imac14,1 should transition over to imac14,4\n\n\n# supported hardware\n\nnot much hardware has been dropped, though the few that have:\n\n * official ivy bridge u, h and s cpus.\n   * these cpus will still boot without much issue, but note that no macs are supported with consumer ivy bridge in big sur.\n   * ivy bridge-e cpus are still supported thanks to being in macpro6,1\n * ivy bridge igpus slated for removal\n   * hd 4000 and hd 2500, however currently these drivers are still present in 11.0.1\n * bcm4331 and bcm43224 based wifi cards.\n   * see wireless buyers guide for potential cards to upgrade to.\n   * potential work-around is to inject a patched io80211family, see here for more details: io80211 patches\n * certain sata controllers dropped\n   * for some reason, apple removed the appleintelpchseriesahci class from appleahciport.kext. due to the outright removal of the class, trying to spoof to another id (generally done by sata-unsupported.kext) can fail for many and create instability for others.\n   * a partial fix is to inject catalina's version with any conflicting symbols being patched. you can find a sample kext here: catalina's patched appleahciport.kext\n   * we recommend setting the minkernel value to 20.0.0 for the kext ctlnaahciport.kext to avoid any potential conflicts. this way, it will work in both catalina and big sur so you can remove sata-unsupported if you want.\n\nother notable changes:\n\n * msi navi users no longer require the aty,rom/-wegnoegpu patch to boot the installer\n * stage 2 installation requiring working nvram\n   * asus 9 series: for more info, see here: haswell asus z97 big sur update thread\n   * x99 and x299 users with broken nvram will need to install on another machine and move the ssd when done\n\n\n# up-to-date kexts, bootloader and config.plist\n\nensure that you have the latest version of opencore, kexts and config.plist so it won't have any odd compatibility issues. you can simply download and update opencore and kexts as mentioned here:\n\n * updating opencore and macos\n\nif you're unsure what version of opencore you're using, you can run the following in terminal:\n\nnvram 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102:opencore-version\n\n\n * note: the about command will require you to include bit 0x2 in misc -> security -> exposesensitivedata, recommended values for exposesensitivedata is 0x6 which includes bits 0x2 and 0x4.\n\n# amd note\n\nreminder for amd users: don't forget to update your kernel patches with those provided by amd os x, otherwise you'll be unable to boot big sur:\n\n * amd osx patches\n\n# intel hedt note\n\nfor x79, x99 and x299 users, pay close attention to the below. big sur has added new requirements for acpi, so you'll need to grab some new ssdts:\n\n * x79\n   * ssdt-unc\n * x99\n   * ssdt-unc\n   * ssdt-rtc0-range\n * x299\n   * ssdt-rtc0-range\n\nfor those who'd like precompiled files, see here:\n\n * getting started with acpi: prebuilt ssdts\n\n\n# known issues\n\nwith big sur, quite a bit broke. mainly the following:\n\n * lilu\n   * mainly user-space patching has severely broke, meaning certain functionality may have broken\n   * these include:\n     * diskarbitrationfixup\n     * macpromemorynotificationdisabler\n     * sidecarenabler\n     * systemprofilermemoryfixup\n     * notouchid\n     * whatevergreen's drm and -cdfon patches\n * airportbrcmfixup\n   * forcing a specific driver to load with brcmfx-driver= may help\n     * bcm94352z users for example may need brcmfx-driver=2 in boot-args to resolve this, other chipsets will need other variables.\n   * setting maxkernel to 19.9.9 for airportbrcm4360_injector.kext may help. more information from the repo\n * sata support broken\n   * due to apple dropping the appleintelpchseriesahci class in appleahciport.kext\n   * to resolve, add catalina's patched appleahciport.kext with the minkernel set to 20.0.0\n * xhciportlimit broken in macos 11.3 beta 2 and newer\n   * with macos 11.3 and newer, xhciportlimit is broken resulting in boot loops. we advise users either install an older os(ie. macos 10.15, catalina) or find a 11.2.3 or older big sur installer\n     * for education purposes, we have a copy provided here: macos 11.2.3 installassistant(macos)\n     * if you've already mapped your usb ports and disabled xhciportlimit, you can boot macos 11.3+ without issue\n\nand while not an issue, sip has now gained a new bit so to properly disable sip you need to set csr-active-config to ff0f0000. see here for more info: disabling sip\n\n\n# installation\n\nguides have been updated to accommodate big sur, see the applicable os environment for you:\n\n * macos users\n * windows users\n * linux users\n\n\n# troubleshooting\n\n\n# stuck at forcing cs_runtime for entitlement\n\n\n\nthis is actually the part at where macos will seal the system volume, and where it may seem that macos has gotten stuck. do not restart thinking you're stuck, this will take quite some time to complete, otherwise you'll break your installation.\n\n\n# stuck at pci configuration begins for intel's x99 and x299 boards\n\n\n\nas previously mentioned, intel hedt motherboards may have some issues revolving around their rtc device in acpi. to resolve, you'll need to look at your rtc device and see which regions are missing. for more information, see here: ssdt-rtc0-range.dsl\n\n\n# stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nif you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your smc emulator is broken. to fix this, you have 2 options:\n\n * ensure you're using the latest builds of virtualsmc and lilu, with the vsmcgen=1 boot-arg\n * switch over to rehabman's fakesmc (you can use the minkernel/maxkernel trick mentioned above to restrict fakesmc to big sur and up)\n\nand when switching kexts, ensure you don't have both fakesmc and virtualsmc enabled in your config.plist, as this will cause a conflict.\n\n\n# x79 and x99 kernel panic on iopcifamily\n\nthis is due to an unused uncore pci bridges being enabled in acpi, and so iopcifamily will kernel panic when probing unknown devices. to resolve, you'll need to add ssdt-unc to your system\n\n\n# deviceproperties injection failing\n\nwith big sur, macos has become much pickier with devices being present in acpi. especially if you're injecting important properties for whatevergreen or applealc, you may find they're no longer applying. to verify whether your acpi defines your hardware, check for the acpi-path property in ioregistryexplorer:\n\n\n\nif no property is found, you'll need to create an ssdt that provides the full pathing as you likely have a pci bridge that is not documented in your acpi tables. an example of this can be found here: ssdt-brg0\n\n * note: this issue may also pop up in older versions of macos, however big sur is most likely to have issues.\n\n\n# keyboard and mouse broken\n\nfor certain legacy systems, you may notice that while the usb ports work your hid-based devices such as the keyboard and mouse may be broken. to resolve this, add the following patch:\n\niohidfamily patch\n\nconfig.plist -> kernel -> patch:\n\nkey           type      value\nbase          string    _issingleuser\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    com.apple.iokit.iohidfamily\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b801000000c3\nreplacemask   data      \nskip          integer   0\n\nsource\n\n\n# early kernel panic on max_cpus_from_firmware not yet initialized\n\nif you receive an early kernel panic on max_cpus_from_firmware not yet initialized, this is due to the new acpi_count_enabled_logical_processors method added in macos big sur's kernel. to resolve, please ensure you're on opencore 0.6.0 or newer with the avoidruntimedefrag quirk enabled.\n\n * note: due to how early this kernel panic happens, you may only be able to log it either via serial or rebooting in a known working install of macos and checking your panic logged in nvram.\n   * most users will see this panic simply as [eb|#log:exitbs:start]\n\nexample kernel panic\n\non-screen:\n\n\n\nvia serial logging or nvram:\n\n\n\nlegacy edge case\n\non certain hardware, mainly the hp dc7900, the kernel still can't determine exactly how many threads your hardware supports. this will result in the aforementioned kernel panic and so we need to hard code the cpu core's value.\n\nto do this, add the following patch(replacing the 04 from b8 04 00 00 00 c3 with the amount of cpu threads your hardware supports):\n\nkey           type      value\nbase          string    _acpi_count_enabled_logical_processors\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    kernel\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b804000000c3\nreplacemask   data      \nskip          integer   0\n\n\n# cannot update to newer versions of big sur\n\ngenerally there's 2 main culprits:\n\n * broken update utility\n   * most common error if running a beta, try this first\n * broken seal\n\n# broken update utility\n\ngenerally seen with every beta cycle, simply unenroll and enroll again:\n\n# unenroll from beta catalog\nsudo /system/library/privateframeworks/seeding.framework/resources/seedutil unenroll\n# enroll back in\nsudo /system/library/privateframeworks/seeding.framework/resources/seedutil enroll developerseed\n\n\nthen check back with settings, and it should pop up. if not, run the following:\n\n# list software updates via terminal\nsoftwareupdate -l\n\n\nthis should help kick the update utility back into gear. if you still have issues, check the broken seal section.\n\n# broken seal\n\nwith apple's new snapshotting for the system drive, they now depend heavily on this for os updates to apply correctly. so when a drove's seal is broken, macos will refuse to update the drive.\n\nto verify yourself, check that snapshot sealed returns as yes:\n\n# list all apfs volumes\ndiskutil apfs list\n\n# look for your system volume\nvolume disk1s8 a604d636-3c54-4caa-9a31-5e1a460dc5c0\n        ---------------------------------------------------\n        apfs volume disk (role):   disk1s8 (system)\n        name:                      big sur hd (case-insensitive)\n        mount point:               not mounted\n        capacity consumed:         15113809920 b (15.1 gb)\n        sealed:                    broken\n        filevault:                 no\n        |\n        snapshot:                  4202ebe5-288b-4701-ba1e-b6ec8ad6397d\n        snapshot disk:             disk1s8s1\n        snapshot mount point:      /\n        snapshot sealed:           yes\n\n\nif it returns snapshot sealed: broken, then you'll want to go through the following:\n\n * update to opencore 0.6.4 or newer\n   * specifically commit ba10b5d or newer is required\n * revert to older snapshots\n   * mainly for those who have tampered with the system volume\n   * see here how to revert: rolling back apfs snapshots\n\n\n# kernel panic on rooting from the live fs\n\nfull error:\n\nrooting from the live fs of a sealed volume is not allowed on a release build\n\n\nthis is due to issues around secure boot boot being enabled in beta 10 with older versions of opencore. simply update to 0.6.4 to resolve\n\n * specifically commit ba10b5d or newer is required\n\n\n# asus z97 and hedt(ie. x99 and x299) failing stage 2 installation\n\nwith big sur, there's a higher reliance on native nvram for installation otherwise the installer will get stuck in a reboot loop. to resolve this you'll need to either:\n\n * install big sur on another machine, then transfer the drive\n * fix the motherboard's nvram\n   * mainly applicable with asus's z97 series\n\nfor the latter, see here: haswell asus z97 big sur update thread\n\n\n# laptops kernel panicking on cannot perform kext scan\n\nthis is due to multiple copies of the same kext being in your kernel cache, and to be more specific having multiple copies of voodooinput. look over your kernel -> add and verify you only have 1 copy of voodooinput enabled.\n\n * note: both voodooi2c and voodoops2 have a bundled copy of voodooinput, which you disable is up to personal preference\n\n\n# reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\nthis is due to xhciportlimit breaking with macos 11.3 and newer, to resolve you must disable xhciportlimit under kernel -> quirks. please ensure you've mapped your usb ports correctly before doing so.",charsets:{cjk:!0}},{title:"VMware Fusion",frontmatter:{search:!1},regularPath:"/extras/big-sur/fusion.html",relativePath:"extras/big-sur/fusion.md",key:"v-010da74d",path:"/extras/big-sur/fusion.html",headers:[{level:2,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:20},{level:2,title:"Converting Installation Media",slug:"converting-installation-media",normalizedTitle:"converting installation media",charIndex:281},{level:2,title:"Installing macOS Big Sur in VMware Fusion",slug:"installing-macos-big-sur-in-vmware-fusion",normalizedTitle:"installing macos big sur in vmware fusion",charIndex:955}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Requirements Converting Installation Media Installing macOS Big Sur in VMware Fusion",content:'# VMware Fusion\n\n\n# Requirements\n\n * VMware Fusion\n * Java (both the JRE and JDK work)\n * A computer running macOS\n * The desired macOS installation software installed to /Applications\n * A USB attached hard disk or SSD, or an internal disk that can be passed through entirely\n\n\n# Converting Installation Media\n\nVMware cannot directly use a raw disk image, so we\'ll create a linked VMDK, which will allow you to use it as a virtual hard drive in VMware Fusion.\n\nDownload raw2vmdk from here, and put it in the same directory as the .img file. Then, run the following command:\n\n### Change "Install macOS Big Sur Beta" if the name of the .img file differs\njava -jar raw2vmdk.jar "Install macOS Big Sur Beta.img" "Install macOS Big Sur Beta.vmdk"\n\n\nThis will create a VMDK that references the .img file (the raw disk image) for VMware to use. If you\'re going to move this vmdk or transfer it to another computer, you must move the img file along with it.\n\n\n# Installing macOS Big Sur in VMware Fusion\n\nYou have two options here: pass through a raw disk, or pass through an entire USB device. The steps are not that different for both, so they\'ll be combined here.\n\n 1.  (Skip this if you are doing USB passthrough) For raw disk passthrough, attach the disk that is your target for macOS installation, and create a virtual hard disk that references it to use with Fusion.\n     \n     Note: You may need to remove the partitions of the disk before using it.\n     \n     diskutil list\n     # locate the external disk that matches, and replace /dev/disk3 below with the device path.\n     sudo /Applications/VMware\\ Fusion.app/Contents/Library/vmware-rawdiskCreator create /dev/disk3 fullDevice RawHDD ide\n     \n\n 2.  Next, start VMware Fusion. You should see the homepage. If not, close any window that opened and select File > New from the menu bar.\n\n 3.  Select the "Create a custom virtual machine" option, and select macOS 10.15 (as 10.16/11 isn\'t available).\n\n 4.  Select "Use an existing virtual disk" at the screen below.\n\n 5.  Then, click "Choose virtual disk" and select the Install macOS Beta.vmdk vmdk we made earlier. If you want to make sure VMware does not copy the disk to where you will be storing the VM (for example, if you are low on space), select "Share this virtual disk with the virtual machine that created it". Once done, it should look like this.\n\n 6.  Hit Continue, then click "Customize Settings". Make sure to save the VM to somewhere that\'s not the disk you are passing through.\n     \n     Once done, you should arrive at a screen that looks like this.\n\n 7.  First, select "Processors & Memory", and set the memory to at least 4096 MB.\n\n 8.  (If you are doing raw disk passthrough, skip this step) Select "Show All" and click "USB & Bluetooth". Plug in your USB device and under "Plug In Action", change it from "Ask what to do" to "Connect to the VM". It should look similar to this when done. (In this case, "VIA AmazonBasics Hard Drive Enclos" is my device.) Then, close the window.\n\n 9.  (If you are doing USB passthrough, skip steps 9 through 13) Close the window and close VMware Fusion. Locate the "macOS 10.15.vmwarevm" (or whatever you named it when saving) folder in Finder, and right click > "Show Package Contents".\n     \n     The result should look like the image below.\n\n 10. Open the vmx (not vmxf or vmx.lck folder) file in TextEdit. It should look something like this:\n\n 11. Find the lines starting with sata0:1:\n\n 12. Replace all the lines starting with sata0:1 with the following. Replace <path/to/vmdk> with the full path to RawHDD.vmdk, created earlier above.\n     \n     Tip: Find it in Finder, then right click, hold down option, and select \'Copy "RawHDD.vmdk" as Pathname\' to get the full path easily.\n     \n     sata0:1.fileName = "<path/to/vmdk>"\n     sata0:1.present = "TRUE"\n     sata0:1.deviceType = "rawDisk"\n     \n     \n     It should look something like the below when done.\n\n 13. Save and quit TextEdit, and reopen VMware Fusion. Your VM should automatically open, but if not, open it from the Virtual Machine Library.\n\n 14. Select "Virtual Machine" > "Power On To Firmware" from the menu bar, so that we can boot to the VM BIOS.\n     \n     * (For raw disk passthrough) If you get prompted for your password when you do this, enter it. Even though the prompt mentions Boot Camp disks, it is still working normally.\n     \n     * If you get an error that the resource is busy like below, run the following in Terminal and try again:\n     \n     diskutil list\n     # replace /dev/disk3 below with the proper device path. for raw disk passthrough, it was found before\n     sudo diskutil unmountDisk /dev/disk3\n     \n     \n     \n\n 15. You should get to the VM Boot Manager, as shown below. Select the first hard drive ("EFI VMware Virtual SATA Hard Drive (0.0)). The VM should start booting the Big Sur installer.\n\n 16. Complete the installation as you would on any other device. the installation is complete, and you are at the Welcome screen, select "Virtual Machine" > "Shut Down" from the menu bar.\n     \n     If needed, add your prepared EFI to the EFI partition on the device, then eject it.\n     \n     Place the drive back in your hack and boot normally. You now have Big Sur!',normalizedContent:'# vmware fusion\n\n\n# requirements\n\n * vmware fusion\n * java (both the jre and jdk work)\n * a computer running macos\n * the desired macos installation software installed to /applications\n * a usb attached hard disk or ssd, or an internal disk that can be passed through entirely\n\n\n# converting installation media\n\nvmware cannot directly use a raw disk image, so we\'ll create a linked vmdk, which will allow you to use it as a virtual hard drive in vmware fusion.\n\ndownload raw2vmdk from here, and put it in the same directory as the .img file. then, run the following command:\n\n### change "install macos big sur beta" if the name of the .img file differs\njava -jar raw2vmdk.jar "install macos big sur beta.img" "install macos big sur beta.vmdk"\n\n\nthis will create a vmdk that references the .img file (the raw disk image) for vmware to use. if you\'re going to move this vmdk or transfer it to another computer, you must move the img file along with it.\n\n\n# installing macos big sur in vmware fusion\n\nyou have two options here: pass through a raw disk, or pass through an entire usb device. the steps are not that different for both, so they\'ll be combined here.\n\n 1.  (skip this if you are doing usb passthrough) for raw disk passthrough, attach the disk that is your target for macos installation, and create a virtual hard disk that references it to use with fusion.\n     \n     note: you may need to remove the partitions of the disk before using it.\n     \n     diskutil list\n     # locate the external disk that matches, and replace /dev/disk3 below with the device path.\n     sudo /applications/vmware\\ fusion.app/contents/library/vmware-rawdiskcreator create /dev/disk3 fulldevice rawhdd ide\n     \n\n 2.  next, start vmware fusion. you should see the homepage. if not, close any window that opened and select file > new from the menu bar.\n\n 3.  select the "create a custom virtual machine" option, and select macos 10.15 (as 10.16/11 isn\'t available).\n\n 4.  select "use an existing virtual disk" at the screen below.\n\n 5.  then, click "choose virtual disk" and select the install macos beta.vmdk vmdk we made earlier. if you want to make sure vmware does not copy the disk to where you will be storing the vm (for example, if you are low on space), select "share this virtual disk with the virtual machine that created it". once done, it should look like this.\n\n 6.  hit continue, then click "customize settings". make sure to save the vm to somewhere that\'s not the disk you are passing through.\n     \n     once done, you should arrive at a screen that looks like this.\n\n 7.  first, select "processors & memory", and set the memory to at least 4096 mb.\n\n 8.  (if you are doing raw disk passthrough, skip this step) select "show all" and click "usb & bluetooth". plug in your usb device and under "plug in action", change it from "ask what to do" to "connect to the vm". it should look similar to this when done. (in this case, "via amazonbasics hard drive enclos" is my device.) then, close the window.\n\n 9.  (if you are doing usb passthrough, skip steps 9 through 13) close the window and close vmware fusion. locate the "macos 10.15.vmwarevm" (or whatever you named it when saving) folder in finder, and right click > "show package contents".\n     \n     the result should look like the image below.\n\n 10. open the vmx (not vmxf or vmx.lck folder) file in textedit. it should look something like this:\n\n 11. find the lines starting with sata0:1:\n\n 12. replace all the lines starting with sata0:1 with the following. replace <path/to/vmdk> with the full path to rawhdd.vmdk, created earlier above.\n     \n     tip: find it in finder, then right click, hold down option, and select \'copy "rawhdd.vmdk" as pathname\' to get the full path easily.\n     \n     sata0:1.filename = "<path/to/vmdk>"\n     sata0:1.present = "true"\n     sata0:1.devicetype = "rawdisk"\n     \n     \n     it should look something like the below when done.\n\n 13. save and quit textedit, and reopen vmware fusion. your vm should automatically open, but if not, open it from the virtual machine library.\n\n 14. select "virtual machine" > "power on to firmware" from the menu bar, so that we can boot to the vm bios.\n     \n     * (for raw disk passthrough) if you get prompted for your password when you do this, enter it. even though the prompt mentions boot camp disks, it is still working normally.\n     \n     * if you get an error that the resource is busy like below, run the following in terminal and try again:\n     \n     diskutil list\n     # replace /dev/disk3 below with the proper device path. for raw disk passthrough, it was found before\n     sudo diskutil unmountdisk /dev/disk3\n     \n     \n     \n\n 15. you should get to the vm boot manager, as shown below. select the first hard drive ("efi vmware virtual sata hard drive (0.0)). the vm should start booting the big sur installer.\n\n 16. complete the installation as you would on any other device. the installation is complete, and you are at the welcome screen, select "virtual machine" > "shut down" from the menu bar.\n     \n     if needed, add your prepared efi to the efi partition on the device, then eject it.\n     \n     place the drive back in your hack and boot normally. you now have big sur!',charsets:{}},{title:"VirtualBox",frontmatter:{search:!1},regularPath:"/extras/big-sur/virtualbox.html",relativePath:"extras/big-sur/virtualbox.md",key:"v-1ab60666",path:"/extras/big-sur/virtualbox.html",headers:[{level:2,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:17},{level:2,title:"Converting Installation Media",slug:"converting-installation-media",normalizedTitle:"converting installation media",charIndex:182},{level:2,title:"Installing macOS in VirtualBox",slug:"installing-macos-in-virtualbox",normalizedTitle:"installing macos in virtualbox",charIndex:550}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Requirements Converting Installation Media Installing macOS in VirtualBox",content:'# VirtualBox\n\n\n# Requirements\n\n * VirtualBox\n * A computer running macOS\n * The desired macOS installation software installed to /Applications\n * A USB attached hard disk or SSD\n\n\n# Converting Installation Media\n\nVirtualBox cannot directly use a raw disk image, so we\'re going to convert it to a VDI.\n\ncd to the location of the disk image and run the following:\n\n### Change "Install macOS Big Sur Beta" if the name of the .img file differs\nVBoxManage convertfromraw "Install macOS Big Sur Beta.img" "Install macOS Big Sur Beta.vdi" --format VDI\n\n\n\n# Installing macOS in VirtualBox\n\nFirst, attach the USB disk that is your target for macOS installation, and create a virtual hard disk that references it to use with VirtualBox. Note: You may need to remove the partitions of the disk before using it. You will also need to edit the destination device.\n\ndiskutil list\n# locate the external disk that matches, and replace /dev/disk3 below with the device path.\nsudo VBoxManage internalcommands createrawvmdk -filename RawHDD.vmdk -rawdisk /dev/disk3\n\n\nNext, start VirtualBox as root and create a new macOS virtual machine.\n\nsudo VirtualBox\n\n\n * Name: Big Sur\n\n * Type: macOS 64bit\n\n * 2-4 CPU cores\n\n * 4-8 GB RAM\n\n * Do not create a virtual disk.\n\nAttach the disks that you\'ve created in previous steps as shown:\n\n\n\nNow, close VirtualBox and add the following properties to the VM to allow it to boot.\n\nsudo VBoxManage modifyvm "Big Sur" --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiSystemProduct" "iMacPro1,1"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiSystemVersion" "1.0"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiBoardProduct" "Mac-7BA5B2D9E42DDD94"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/smc/0/Config/DeviceKey" "ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC" 1\n\n\nStart VirtualBox as root, and start the VM. The installer should begin to boot. Complete the installation as you would on any other device.\n\nsudo VirtualBox\n\n\nWhen the installation is complete, and you are at the Welcome screen, send an ACPI shutdown signal to macOS and select shutdown.\n\nAdd your prepared EFI to the EFI partition on the USB device, and eject it.\n\nPlace the drive back in your hack and boot normally.',normalizedContent:'# virtualbox\n\n\n# requirements\n\n * virtualbox\n * a computer running macos\n * the desired macos installation software installed to /applications\n * a usb attached hard disk or ssd\n\n\n# converting installation media\n\nvirtualbox cannot directly use a raw disk image, so we\'re going to convert it to a vdi.\n\ncd to the location of the disk image and run the following:\n\n### change "install macos big sur beta" if the name of the .img file differs\nvboxmanage convertfromraw "install macos big sur beta.img" "install macos big sur beta.vdi" --format vdi\n\n\n\n# installing macos in virtualbox\n\nfirst, attach the usb disk that is your target for macos installation, and create a virtual hard disk that references it to use with virtualbox. note: you may need to remove the partitions of the disk before using it. you will also need to edit the destination device.\n\ndiskutil list\n# locate the external disk that matches, and replace /dev/disk3 below with the device path.\nsudo vboxmanage internalcommands createrawvmdk -filename rawhdd.vmdk -rawdisk /dev/disk3\n\n\nnext, start virtualbox as root and create a new macos virtual machine.\n\nsudo virtualbox\n\n\n * name: big sur\n\n * type: macos 64bit\n\n * 2-4 cpu cores\n\n * 4-8 gb ram\n\n * do not create a virtual disk.\n\nattach the disks that you\'ve created in previous steps as shown:\n\n\n\nnow, close virtualbox and add the following properties to the vm to allow it to boot.\n\nsudo vboxmanage modifyvm "big sur" --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmisystemproduct" "imacpro1,1"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmisystemversion" "1.0"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmiboardproduct" "mac-7ba5b2d9e42ddd94"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/smc/0/config/devicekey" "ourhardworkbythesewordsguardedpleasedontsteal(c)applecomputerinc"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/smc/0/config/getkeyfromrealsmc" 1\n\n\nstart virtualbox as root, and start the vm. the installer should begin to boot. complete the installation as you would on any other device.\n\nsudo virtualbox\n\n\nwhen the installation is complete, and you are at the welcome screen, send an acpi shutdown signal to macos and select shutdown.\n\nadd your prepared efi to the efi partition on the usb device, and eject it.\n\nplace the drive back in your hack and boot normally.',charsets:{}},{title:"Soon™",frontmatter:{search:!1},regularPath:"/extras/big-sur/workstation.html",relativePath:"extras/big-sur/workstation.md",key:"v-2e394ce3",path:"/extras/big-sur/workstation.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# Soon™",normalizedContent:"# soon™",charsets:{}},{title:"Fixing KASLR slide values",frontmatter:{},regularPath:"/extras/kaslr-fix.html",relativePath:"extras/kaslr-fix.md",key:"v-1ae073bb",path:"/extras/kaslr-fix.html",headers:[{level:2,title:"So what is KASLR",slug:"so-what-is-kaslr",normalizedTitle:"so what is kaslr",charIndex:259},{level:2,title:"And who is this info for",slug:"and-who-is-this-info-for",normalizedTitle:"and who is this info for",charIndex:993},{level:2,title:"So how do I fix this",slug:"so-how-do-i-fix-this",normalizedTitle:"so how do i fix this",charIndex:1880},{level:2,title:"Prepping the BIOS",slug:"prepping-the-bios",normalizedTitle:"prepping the bios",charIndex:3108},{level:2,title:"Test boot",slug:"test-boot",normalizedTitle:"test boot",charIndex:4930},{level:2,title:"Finding the Slide value",slug:"finding-the-slide-value",normalizedTitle:"finding the slide value",charIndex:5140},{level:2,title:"Using DevirtualiseMmio",slug:"using-devirtualisemmio",normalizedTitle:"using devirtualisemmio",charIndex:9311}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"So what is KASLR And who is this info for So how do I fix this Prepping the BIOS Test boot Finding the Slide value Using DevirtualiseMmio",content:"# Fixing KASLR slide values\n\nThis section is for users who wish to understand and fix \"Couldn't allocate runtime area\" errors. This is most common with either Z390, X99 and X299.\n\n * Note: OpenCore is required, Clover is no longer supported in this guide\n\n\n# So what is KASLR\n\nWell KASLR stands for Kernel address space layout randomization, what it's used for is security purposes. Specifically, this makes it much harder for attackers to figure out where the important objects are in memory as it's always random both between machines and between boots. More in-depth explainer on KASLR\n\nWhere this becomes an issue is when you introduce devices with either small memory maps or just way too many devices present. There likely is space for the kernel to operate but there's also free space where the kernel won't fit entirely. This is where slide=xxx fits in. Instead of letting macOS choose a random area to operate in each boot, we'll constrain it to somewhere that we know will work.\n\n\n# And who is this info for\n\nWell as I mentioned earlier, this is for users who don't have enough space for the kernel or moves to a place that is too small. You'll generally experience an error similar to this when booting:\n\nError allocating 0x1197b pages at 0x0000000017a80000 alloc type 2\nCouldn't allocate runtime area\n\n\nWith some variation:\n\nOnly 244/256 slide values are usable!\n\n\nOr even crashes while running macOS:\n\npanic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000\n\n\nThe best part about these errors is that they can be random, also the reason why power cycling your PC 20 times also can fix the issue but only temporarily.\n\nFun Fact: It takes around 31 ms to find an area to operate in, manually setting a slide value can on average can reduce boot times by 0.207%!!!\n\n\n# So how do I fix this\n\nThe real fix to this is quite simple actually. What you'll need:\n\n * OpenCore users:\n   * OpenRuntime\n   * OpenShell(Don't forget to enable this under Root -> Misc -> Tools)\n\nAnd we'll also need to configure our config.plist -> Booter:\n\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390.\n * EnableSafeModeSlide: YES\n   * Allows for slide values to be used in Safe mode\n * ProtectUefiServices: NO\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, 300 series and newer systems like Ice Lake and Comet Lake\n * ProvideCustomSlide: YES\n   * This makes sure the kernel will only choose good regions and avoid those that may result in boot failures. It's still random but omits those bad regions in its randomization\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this, this makes sure our memory map will fit to what the kernel expects\n\n\n# Prepping the BIOS\n\nThe reason we need to reset the memory map is we want it to be more deterministic, what I mean by this is that there will be less variation on each boot so we have fewer edge cases(Memory Maps are not always consistent on boots). To prep:\n\n * Update BIOS(extremely important as early BIOS's shipped are known to have memory map issues, especially with Z390)\n * Clear CMOS\n * Enable much needed BIOS settings:\n   * Above4GDecoding: This allows devices to use memory regions above 4GB meaning macOS will have more room to fit, can be problematic on some X99, X299 so recommended to test with and without.\n     * Note: On BIOS supporting Resizable BAR Support, enabling Above4G will unlock this option. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n   * Boot Options -> Windows8.1/10 mode: This will make sure no old legacy garbage is loaded. Fun fact, other OS is only designed for booting older versions of Windows and not for other OS.\n * Disable as many unneeded devices in the BIOS(this means there is less variation in the map on each boot, so fewer chances of boot failure). Common settings:\n   * CSM: For legacy support, adds a bunch of garbage we don't want. This also can break the shell so you can't boot into it.\n   * Intel SGX: Software Guard Extensions, takes up a lot of space and does nothing in macOS.\n   * Parallel Port: macOS can't even see parallel.\n   * Serial Port: I'd like to know how many of you are debugging the kernel...\n   * iGPU: Not ideal but some systems have such bloated maps that the iGPU just can't fit.\n   * Thunderbolt: Many hacks don't have thunderbolt working, boards that don't have thunderbolt but have this option just waste more space.\n   * LED lighting: Sorry mate, time to go.\n   * Legacy USB: More Legacy Crap.\n\n\n# Test boot\n\nWith our adjusted EFI, config.plist and BIOS settings, it's time we try out our new setup. If you still have issues, well it looks like we'll need to do a deep dive and calculate our slide value\n\n\n# Finding the Slide value\n\nNow what you'll want to do is open the EFI shell in your boot manager of choice and run memmap. This will give you a list of all pages and their sizes. This is where the fun begins.\n\nExample of what you'll see:\n\nTYPE         START              END                # PAGES            ATTRIBUTES\nRT_Data      0000000000000000   0000000000000FFF   0000000000000001   800000000000000F\nAvailable    0000000000001000   0000000000057FFF   0000000000000057   000000000000000F\nReserved     0000000000058000   0000000000058FFF   0000000000000001   000000000000000F\nAvailable    0000000000059000   000000000008FFFF   0000000000000037   000000000000000F\nRT_Code      0000000000090000   0000000000090FFF   0000000000000001   800000000000000F\nAvailable    0000000000091000   000000000009DFFF   000000000000000D   000000000000000F\nReserved     000000000009E000   000000000009FFFF   0000000000000002   000000000000000F\nAvailable    0000000000100000   000000005B635FFF   000000000005B536   000000000000000F\nBS_Data      000000005B636000   000000005B675FFF   0000000000000040   000000000000000F\nAvailable    000000005B676000   000000006AF77FFF   000000000000F902   000000000000000F\nLoaderCode   000000006AF78000   000000006B155FFF   00000000000001DE   000000000000000F\nBS_Data      000000006B156000   000000006B523FFF   00000000000003CE   000000000000000F\nACPI_NVS     000000006B524000   000000006B524FFF   0000000000000001   000000000000000F\nBS_Data      000000006B526000   000000006B625FFF   0000000000000100   000000000000000F\nAvailable    000000006B626000   000000006B634FFF   000000000000000F   000000000000000F\n\nNow you may be wondering how the hell we convert this to a slide value, well it's quite simple. What we're interested in is the largest available value within the Start column. In this example we see that 000000006B626000 is our largest, do note that these are in HEX so if there are multiple values close to each other you may need to convert them to decimal. To the calculate slide value(macOS's built-in calculator has a programming function by pressing ⌘+3):\n\n000000006B626000 = 0x6B626000\n\n(0x6B626000 - 0x100000)/0x200000 = 0x35A\n\nAnd to verify that this is correct:\n\n0x100000 + (0x35A * 0x200000) = 0x6B500000\n\nWhenever the returned value is not the original(0x6B500000 vs 0x6B626000), just add +1 to your final slide value. This is due to rounding. So for example 0x35A converted to decimal becomes 858 and then +1 will give you slide=859.\n\n> But wait for just a second, this is higher than 256!\n\nThat is correct, this is caused by memory maps that include Above4GDecoding sectors which cannot be used. So you will need to keep going down the list until you find a small enough value(for us that would be 0000000000100000).\n\nAnd just to make it a bit clearer on the formula:\n\n(HEX - 0x100000)/0x200000 = Slide Value in HEX\n\n0x100000 + (Slide Value in HEX * 0x200000) = Your original HEX value(if not then add +1 to your slide value)\n\nWith this formula in mind, the highest Start value you would be able to use to give you a low enough slide value would be 0x20100000.\n\nNow navigate into your config.plist and add your slide value with the rest of your boot arguments(for us it would be slide=0 when using 0x100000). If this value still gives you errors then you may proceed to the second-largest Start value and so on.\n\nSometimes you may find that when you calculate slide that you receive super small values like slide=-0.379150390625, when this happens round this to slide=0.\n\nAnd for users who are having issues finding their slide value can also type $slide [insert largest #Pages value] in the #Sandbox channel on the r/Hackintosh Discord\n\n> But this is soooooo hard\n\nWell fret not, for there is a simple solution. After running memmap in the shell, run:\n\nshell> fs0: //replace with your USB\n\nfs0:\\> dir //to verify this is the right directory, if not try fs1 and so on\n\nDirectory of fs0:\\\n01/01/01 3:30p   EFI\n\nfs0:\\> memmap > memmap.txt\n\n\nThis will add a memmap.txt file to the root of your EFI, you can then proceed to drop it into the r/Hackintosh discord in the #Sandbox channel and type $slide [insert a link to memmap.txt]\n\n\n# Using DevirtualiseMmio\n\nDevirtualiseMmio is quite an interesting quirk, specifically in that it gets around a huge hurdle with many PCI device systems like some Z390 boards and virtually all HEDT boards like X99 and X299. How it does this is it takes MMIO regions and removes runtime attributes allowing them to be used as space for the kernel to sit comfortably, pair this with ProvideCustomSlide quirk means we can keep the security feature of slide while also getting a bootable machine.\n\nFor extremely problematic systems like Threadripper TRX40 19h, we need to find specific regions that aren't required for proper operation. This is where MmioWhitelist comes into play. Note that whitelisting isn't required for most systems\n\nIf you run the debug version of OpenCore with DevirtualiseMmio, you'll notice this in your logs:\n\n21:495 00:009 OCABC: MMIO devirt start\n21:499 00:003 OCABC: MMIO devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0\n21:503 00:003 OCABC: MMIO devirt 0xFE000000 (0x11 pages, 0x8000000000000001) skip 0\n21:506 00:003 OCABC: MMIO devirt 0xFEC00000 (0x1 pages, 0x8000000000000001) skip 0\n21:510 00:003 OCABC: MMIO devirt 0xFED00000 (0x1 pages, 0x8000000000000001) skip 0\n21:513 00:003 OCABC: MMIO devirt 0xFEE00000 (0x1 pages, 0x800000000000100D) skip 0\n21:516 00:003 OCABC: MMIO devirt 0xFF000000 (0x1000 pages, 0x800000000000100D) skip 0\n21:520 00:003 OCABC: MMIO devirt end, saved 278608 KB\n\n\n * Note: See OpenCore Debugging on how to enable logging to file\n\nSo we have 6 regions we need to go through and see which are bad, best idea is to block all MMIO sections except one and try each region to get a list of good regions.\n\nNow lets take the above example and create our own MmioWhitelist, we'll need to first convert the address from hexadecimal to decimal:\n\n * MMIO devirt 0x60000000 -> 1610612736\n * MMIO devirt 0xFE000000 -> 4261412864\n * MMIO devirt 0xFEC00000 -> 4273995776\n * MMIO devirt 0xFED00000 -> 4275044352\n * MMIO devirt 0xFEE00000 -> 4276092928\n * MMIO devirt 0xFF000000 -> 4278190080\n\nShould look something like this when done:\n\n",normalizedContent:"# fixing kaslr slide values\n\nthis section is for users who wish to understand and fix \"couldn't allocate runtime area\" errors. this is most common with either z390, x99 and x299.\n\n * note: opencore is required, clover is no longer supported in this guide\n\n\n# so what is kaslr\n\nwell kaslr stands for kernel address space layout randomization, what it's used for is security purposes. specifically, this makes it much harder for attackers to figure out where the important objects are in memory as it's always random both between machines and between boots. more in-depth explainer on kaslr\n\nwhere this becomes an issue is when you introduce devices with either small memory maps or just way too many devices present. there likely is space for the kernel to operate but there's also free space where the kernel won't fit entirely. this is where slide=xxx fits in. instead of letting macos choose a random area to operate in each boot, we'll constrain it to somewhere that we know will work.\n\n\n# and who is this info for\n\nwell as i mentioned earlier, this is for users who don't have enough space for the kernel or moves to a place that is too small. you'll generally experience an error similar to this when booting:\n\nerror allocating 0x1197b pages at 0x0000000017a80000 alloc type 2\ncouldn't allocate runtime area\n\n\nwith some variation:\n\nonly 244/256 slide values are usable!\n\n\nor even crashes while running macos:\n\npanic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000\n\n\nthe best part about these errors is that they can be random, also the reason why power cycling your pc 20 times also can fix the issue but only temporarily.\n\nfun fact: it takes around 31 ms to find an area to operate in, manually setting a slide value can on average can reduce boot times by 0.207%!!!\n\n\n# so how do i fix this\n\nthe real fix to this is quite simple actually. what you'll need:\n\n * opencore users:\n   * openruntime\n   * openshell(don't forget to enable this under root -> misc -> tools)\n\nand we'll also need to configure our config.plist -> booter:\n\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390.\n * enablesafemodeslide: yes\n   * allows for slide values to be used in safe mode\n * protectuefiservices: no\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, 300 series and newer systems like ice lake and comet lake\n * providecustomslide: yes\n   * this makes sure the kernel will only choose good regions and avoid those that may result in boot failures. it's still random but omits those bad regions in its randomization\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this, this makes sure our memory map will fit to what the kernel expects\n\n\n# prepping the bios\n\nthe reason we need to reset the memory map is we want it to be more deterministic, what i mean by this is that there will be less variation on each boot so we have fewer edge cases(memory maps are not always consistent on boots). to prep:\n\n * update bios(extremely important as early bios's shipped are known to have memory map issues, especially with z390)\n * clear cmos\n * enable much needed bios settings:\n   * above4gdecoding: this allows devices to use memory regions above 4gb meaning macos will have more room to fit, can be problematic on some x99, x299 so recommended to test with and without.\n     * note: on bios supporting resizable bar support, enabling above4g will unlock this option. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n   * boot options -> windows8.1/10 mode: this will make sure no old legacy garbage is loaded. fun fact, other os is only designed for booting older versions of windows and not for other os.\n * disable as many unneeded devices in the bios(this means there is less variation in the map on each boot, so fewer chances of boot failure). common settings:\n   * csm: for legacy support, adds a bunch of garbage we don't want. this also can break the shell so you can't boot into it.\n   * intel sgx: software guard extensions, takes up a lot of space and does nothing in macos.\n   * parallel port: macos can't even see parallel.\n   * serial port: i'd like to know how many of you are debugging the kernel...\n   * igpu: not ideal but some systems have such bloated maps that the igpu just can't fit.\n   * thunderbolt: many hacks don't have thunderbolt working, boards that don't have thunderbolt but have this option just waste more space.\n   * led lighting: sorry mate, time to go.\n   * legacy usb: more legacy crap.\n\n\n# test boot\n\nwith our adjusted efi, config.plist and bios settings, it's time we try out our new setup. if you still have issues, well it looks like we'll need to do a deep dive and calculate our slide value\n\n\n# finding the slide value\n\nnow what you'll want to do is open the efi shell in your boot manager of choice and run memmap. this will give you a list of all pages and their sizes. this is where the fun begins.\n\nexample of what you'll see:\n\ntype         start              end                # pages            attributes\nrt_data      0000000000000000   0000000000000fff   0000000000000001   800000000000000f\navailable    0000000000001000   0000000000057fff   0000000000000057   000000000000000f\nreserved     0000000000058000   0000000000058fff   0000000000000001   000000000000000f\navailable    0000000000059000   000000000008ffff   0000000000000037   000000000000000f\nrt_code      0000000000090000   0000000000090fff   0000000000000001   800000000000000f\navailable    0000000000091000   000000000009dfff   000000000000000d   000000000000000f\nreserved     000000000009e000   000000000009ffff   0000000000000002   000000000000000f\navailable    0000000000100000   000000005b635fff   000000000005b536   000000000000000f\nbs_data      000000005b636000   000000005b675fff   0000000000000040   000000000000000f\navailable    000000005b676000   000000006af77fff   000000000000f902   000000000000000f\nloadercode   000000006af78000   000000006b155fff   00000000000001de   000000000000000f\nbs_data      000000006b156000   000000006b523fff   00000000000003ce   000000000000000f\nacpi_nvs     000000006b524000   000000006b524fff   0000000000000001   000000000000000f\nbs_data      000000006b526000   000000006b625fff   0000000000000100   000000000000000f\navailable    000000006b626000   000000006b634fff   000000000000000f   000000000000000f\n\nnow you may be wondering how the hell we convert this to a slide value, well it's quite simple. what we're interested in is the largest available value within the start column. in this example we see that 000000006b626000 is our largest, do note that these are in hex so if there are multiple values close to each other you may need to convert them to decimal. to the calculate slide value(macos's built-in calculator has a programming function by pressing ⌘+3):\n\n000000006b626000 = 0x6b626000\n\n(0x6b626000 - 0x100000)/0x200000 = 0x35a\n\nand to verify that this is correct:\n\n0x100000 + (0x35a * 0x200000) = 0x6b500000\n\nwhenever the returned value is not the original(0x6b500000 vs 0x6b626000), just add +1 to your final slide value. this is due to rounding. so for example 0x35a converted to decimal becomes 858 and then +1 will give you slide=859.\n\n> but wait for just a second, this is higher than 256!\n\nthat is correct, this is caused by memory maps that include above4gdecoding sectors which cannot be used. so you will need to keep going down the list until you find a small enough value(for us that would be 0000000000100000).\n\nand just to make it a bit clearer on the formula:\n\n(hex - 0x100000)/0x200000 = slide value in hex\n\n0x100000 + (slide value in hex * 0x200000) = your original hex value(if not then add +1 to your slide value)\n\nwith this formula in mind, the highest start value you would be able to use to give you a low enough slide value would be 0x20100000.\n\nnow navigate into your config.plist and add your slide value with the rest of your boot arguments(for us it would be slide=0 when using 0x100000). if this value still gives you errors then you may proceed to the second-largest start value and so on.\n\nsometimes you may find that when you calculate slide that you receive super small values like slide=-0.379150390625, when this happens round this to slide=0.\n\nand for users who are having issues finding their slide value can also type $slide [insert largest #pages value] in the #sandbox channel on the r/hackintosh discord\n\n> but this is soooooo hard\n\nwell fret not, for there is a simple solution. after running memmap in the shell, run:\n\nshell> fs0: //replace with your usb\n\nfs0:\\> dir //to verify this is the right directory, if not try fs1 and so on\n\ndirectory of fs0:\\\n01/01/01 3:30p   efi\n\nfs0:\\> memmap > memmap.txt\n\n\nthis will add a memmap.txt file to the root of your efi, you can then proceed to drop it into the r/hackintosh discord in the #sandbox channel and type $slide [insert a link to memmap.txt]\n\n\n# using devirtualisemmio\n\ndevirtualisemmio is quite an interesting quirk, specifically in that it gets around a huge hurdle with many pci device systems like some z390 boards and virtually all hedt boards like x99 and x299. how it does this is it takes mmio regions and removes runtime attributes allowing them to be used as space for the kernel to sit comfortably, pair this with providecustomslide quirk means we can keep the security feature of slide while also getting a bootable machine.\n\nfor extremely problematic systems like threadripper trx40 19h, we need to find specific regions that aren't required for proper operation. this is where mmiowhitelist comes into play. note that whitelisting isn't required for most systems\n\nif you run the debug version of opencore with devirtualisemmio, you'll notice this in your logs:\n\n21:495 00:009 ocabc: mmio devirt start\n21:499 00:003 ocabc: mmio devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0\n21:503 00:003 ocabc: mmio devirt 0xfe000000 (0x11 pages, 0x8000000000000001) skip 0\n21:506 00:003 ocabc: mmio devirt 0xfec00000 (0x1 pages, 0x8000000000000001) skip 0\n21:510 00:003 ocabc: mmio devirt 0xfed00000 (0x1 pages, 0x8000000000000001) skip 0\n21:513 00:003 ocabc: mmio devirt 0xfee00000 (0x1 pages, 0x800000000000100d) skip 0\n21:516 00:003 ocabc: mmio devirt 0xff000000 (0x1000 pages, 0x800000000000100d) skip 0\n21:520 00:003 ocabc: mmio devirt end, saved 278608 kb\n\n\n * note: see opencore debugging on how to enable logging to file\n\nso we have 6 regions we need to go through and see which are bad, best idea is to block all mmio sections except one and try each region to get a list of good regions.\n\nnow lets take the above example and create our own mmiowhitelist, we'll need to first convert the address from hexadecimal to decimal:\n\n * mmio devirt 0x60000000 -> 1610612736\n * mmio devirt 0xfe000000 -> 4261412864\n * mmio devirt 0xfec00000 -> 4273995776\n * mmio devirt 0xfed00000 -> 4275044352\n * mmio devirt 0xfee00000 -> 4276092928\n * mmio devirt 0xff000000 -> 4278190080\n\nshould look something like this when done:\n\n",charsets:{}},{title:"Legacy Install",frontmatter:{search:!1},regularPath:"/extras/legacy.html",relativePath:"extras/legacy.md",key:"v-2fe7bc2d",path:"/extras/legacy.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# Legacy Install\n\nGuide has been moved into respective install guides: Installer Guides",normalizedContent:"# legacy install\n\nguide has been moved into respective install guides: installer guides",charsets:{}},{title:"macOS 12: Monterey",frontmatter:{search:!1},regularPath:"/extras/monterey.html",relativePath:"extras/monterey.md",key:"v-31cf8b6d",path:"/extras/monterey.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:650},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:695},{level:3,title:"Supported SMBIOS",slug:"supported-smbios",normalizedTitle:"supported smbios",charIndex:714},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:736},{level:3,title:"AMD Patches",slug:"amd-patches",normalizedTitle:"amd patches",charIndex:760},{level:3,title:"Bluetooth",slug:"bluetooth",normalizedTitle:"bluetooth",charIndex:777},{level:3,title:"Ethernet",slug:"ethernet",normalizedTitle:"ethernet",charIndex:792},{level:3,title:"OTA Updates",slug:"ota-updates",normalizedTitle:"ota updates",charIndex:806},{level:3,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:823}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Table of Contents Prerequisites Supported SMBIOS Supported hardware AMD Patches Bluetooth Ethernet OTA Updates Troubleshooting",content:"# macOS 12: Monterey\n\nReminder that Dortania and any tools mentioned in this guide are neither responsible for any corruption, data loss, or other ill effects that may arise from this guide, including ones caused by typos. You, the end user, must understand this is beta software on unsupported machines so do not pester developers for fixes. Dortania will not be accepting issues regarding this mini-guide except for typos and/or errors. This guide expects you to have a basic understanding of hackintoshing. If you are not familiar with it, we highly recommend you to wait until there is an easier and more straight-forward solution available.\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * Supported SMBIOS\n   * Supported hardware\n   * AMD Patches\n   * Bluetooth\n   * Ethernet\n   * OTA Updates\n   * Troubleshooting\n\n\n\n\n# Prerequisites\n\n\n# Supported SMBIOS\n\nSMBIOS dropped in Monterey:\n\n * iMac15,x and older\n * Macmini6,x and older\n * MacBook8,1 and older\n * MacBookAir6,x and older\n * MacBookPro11,3 and older\n   * MacBookPro11,4 and 11,5 are still supported\n\nIf your SMBIOS was supported in Big Sur and is not included above, you're good to go!\n\nSupported SMBIOS\n * iMac16,1 and newer\n * MacPro6,1 and newer\n * iMacPro1,1 and newer\n * Macmini7,1 and newer\n * MacBook9,1 and newer\n * MacBookAir7,1 and newer\n * MacBookPro11,4 and newer\n\nClick here for a full list of supported SMBIOS.\n\nFor those on Haswell or Ivy Bridge, here are some simple conversions:\n\n * Ivy Bridge desktops with dGPU should use MacPro6,1\n * Haswell desktops with dGPU should use iMac17,1\n * Haswell desktops with only an iGPU should use iMac16,2\n * Haswell laptops should use MacBookPro11,4 or MacBookPro11,5\n\n\n# Supported hardware\n\nDropped GPU Hardware:\n\n * Ivy Bridge (HD 4000 and HD 2500)\n * NVIDIA Kepler (GTX 6xx/7xx Cards)\n * You can use OpenCore-Legacy-Patcher to add back support\n   * No support is provided for Hackintoshes using OCLP!\n   * You will lose access to non-full updates (Small 1-3GB updates)\n   * Requires SIP, Apple Secure Boot, and AMFI disabled.\n\nHaswell iGPUs are still supported in Monterey\n\n * Macmini7,1 uses these drivers\n\n\n# AMD Patches\n\nFor those on AMD CPUs, make sure to update your kernel patches for Monterey. Don't forget to update your patches as well with the core count of your CPU. The patches which need to be edited are all named algrey - Force cpuid_cores_per_package, and you only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Bluetooth\n\nWARNING\n\nNote that all cards have not been fixed yet, and that bluetooth support is being worked on still.\n\nDo not be surprised if your card does not work, and please be patient!\n\nWith Monterey, Apple has completely rewritten the bluetooth stack. As of writing, many bluetooth devices do not work (legacy Broadcom and Intel). With the rewrite, injector kexts break bluetooth support in Monterey, though firmware uploader kexts are still needed. Make sure that you:\n\n * Disable injector kexts\n   * IntelBluetoothInjector.kext for Intel cards\n   * BrcmBluetoothInjector.kext for Broadcom cards\n   * If you still boot Big Sur or older, you can instead set the MaxKernel field to 20.99.9 for your injector kext in your config.plist.\n * Keep Firmware uploader kexts\n   * IntelBluetoothFirmware.kext for Intel\n   * BrcmPatchRAM2/3.kext + BrcmFirmwareData.kext for Broadcom\n * Add BlueToolFixup\n   * Needed for all non-native Bluetooth devices (Including Intel)\n   * If you still boot Big Sur or older, you can set the MinKernel field to 21.00.0 to prevent BlueToolFixup loading on older OSes.\n\nSee the below issues for more details:\n\n * BlueToolFixup PR\n * Monterey Beta 5+ issues\n\n\n# Ethernet\n\nIntel I211 chipset (typical for some AMD boards i.e. B450) no longer works with SmallTreeIntel82576 kext (network remains in Cable Unplugged status).\n\nAppleIGB confirmed working on I211 @ B450, but NICs on other boards might experience issues (please report if any)\n\nSee the below issues for more details:\n\n * Kext no longer working with MacOS 12.0\n\nThe boot-arg for enabling Intel I225-V ethernet controller has changed since macOS Monterey 12.3. Use e1000=0 instead of dk.e1000=0.\n\n\n# OTA Updates\n\nStarting with Monterey, updates are not delivered to T2 Macs which don't have Secure Boot enabled, and updates do not install properly if your SecureBootModel does not match your machine (ie. non-T2 SMBIOS using j137 or iMacPro1,1 using j160). Hackintoshes which use a T2 SMBIOS MUST have OpenCore 0.7.4+ with SecureBootModel set to Default. If your SMBIOS does not have a T2 chip, then either Default or Disabled is ok. More information is available on the Apple Secure Boot page.\n\nT2 SMBIOS List\n\nSMBIOS                           MINIMUM MACOS VERSION\niMacPro1,1 (December 2017)       10.13.2 (17C2111)\nMacBookPro15,1 (July 2018)       10.13.6 (17G2112)\nMacBookPro15,2 (July 2018)       10.13.6 (17G2112)\nMacmini8,1 (October 2018)        10.14 (18A2063)\nMacBookAir8,1 (October 2018)     10.14.1 (18B2084)\nMacBookPro15,3 (May 2019)        10.14.5 (18F132)\nMacBookPro15,4 (July 2019)       10.14.5 (18F2058)\nMacBookAir8,2 (July 2019)        10.14.5 (18F2058)\nMacBookPro16,1 (November 2019)   10.15.1 (19B2093)\nMacPro7,1 (December 2019)        10.15.1 (19B88)\nMacBookAir9,1 (March 2020)       10.15.3 (19D2064)\nMacBookPro16,2 (May 2020)        10.15.4 (19E2269)\nMacBookPro16,3 (May 2020)        10.15.4 (19E2265)\nMacBookPro16,4 (June 2020)       10.15.5 (19F96)\niMac20,1 (August 2020)           10.15.6 (19G2005)\niMac20,2 (August 2020)           10.15.6 (19G2005)\n\nNote: You do not need the -revsbvmm boot argument from RestrictEvents. Use OpenCore 0.7.4 or later.\n\n\n# Troubleshooting\n\n# No Updates\n\nMake sure that SIP is enabled. Two bits in SIP specifically cause issues:\n\n * CSR_ALLOW_APPLE_INTERNAL (Bit 4 = 0x10)\n   * Prevents updates appearing at all\n * CSR_ALLOW_UNAUTHENTICATED_ROOT (Bit 11 = 0x800)\n   * Prevents incremental OTA updates\n\nIf you want to still have SIP disabled, use either:\n\n * csrutil disable --no-internal in Recovery\n * A SIP value which does not include the two flags above\n\nTo enable SIP:\n\n * Set csr-active-config to <00 00 00 00> in your config.plist\n * Use csrutil clear in Recovery\n   * Can instead add csr-active-config to NVRAM->Delete or reset NVRAM",normalizedContent:"# macos 12: monterey\n\nreminder that dortania and any tools mentioned in this guide are neither responsible for any corruption, data loss, or other ill effects that may arise from this guide, including ones caused by typos. you, the end user, must understand this is beta software on unsupported machines so do not pester developers for fixes. dortania will not be accepting issues regarding this mini-guide except for typos and/or errors. this guide expects you to have a basic understanding of hackintoshing. if you are not familiar with it, we highly recommend you to wait until there is an easier and more straight-forward solution available.\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * supported smbios\n   * supported hardware\n   * amd patches\n   * bluetooth\n   * ethernet\n   * ota updates\n   * troubleshooting\n\n\n\n\n# prerequisites\n\n\n# supported smbios\n\nsmbios dropped in monterey:\n\n * imac15,x and older\n * macmini6,x and older\n * macbook8,1 and older\n * macbookair6,x and older\n * macbookpro11,3 and older\n   * macbookpro11,4 and 11,5 are still supported\n\nif your smbios was supported in big sur and is not included above, you're good to go!\n\nsupported smbios\n * imac16,1 and newer\n * macpro6,1 and newer\n * imacpro1,1 and newer\n * macmini7,1 and newer\n * macbook9,1 and newer\n * macbookair7,1 and newer\n * macbookpro11,4 and newer\n\nclick here for a full list of supported smbios.\n\nfor those on haswell or ivy bridge, here are some simple conversions:\n\n * ivy bridge desktops with dgpu should use macpro6,1\n * haswell desktops with dgpu should use imac17,1\n * haswell desktops with only an igpu should use imac16,2\n * haswell laptops should use macbookpro11,4 or macbookpro11,5\n\n\n# supported hardware\n\ndropped gpu hardware:\n\n * ivy bridge (hd 4000 and hd 2500)\n * nvidia kepler (gtx 6xx/7xx cards)\n * you can use opencore-legacy-patcher to add back support\n   * no support is provided for hackintoshes using oclp!\n   * you will lose access to non-full updates (small 1-3gb updates)\n   * requires sip, apple secure boot, and amfi disabled.\n\nhaswell igpus are still supported in monterey\n\n * macmini7,1 uses these drivers\n\n\n# amd patches\n\nfor those on amd cpus, make sure to update your kernel patches for monterey. don't forget to update your patches as well with the core count of your cpu. the patches which need to be edited are all named algrey - force cpuid_cores_per_package, and you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# bluetooth\n\nwarning\n\nnote that all cards have not been fixed yet, and that bluetooth support is being worked on still.\n\ndo not be surprised if your card does not work, and please be patient!\n\nwith monterey, apple has completely rewritten the bluetooth stack. as of writing, many bluetooth devices do not work (legacy broadcom and intel). with the rewrite, injector kexts break bluetooth support in monterey, though firmware uploader kexts are still needed. make sure that you:\n\n * disable injector kexts\n   * intelbluetoothinjector.kext for intel cards\n   * brcmbluetoothinjector.kext for broadcom cards\n   * if you still boot big sur or older, you can instead set the maxkernel field to 20.99.9 for your injector kext in your config.plist.\n * keep firmware uploader kexts\n   * intelbluetoothfirmware.kext for intel\n   * brcmpatchram2/3.kext + brcmfirmwaredata.kext for broadcom\n * add bluetoolfixup\n   * needed for all non-native bluetooth devices (including intel)\n   * if you still boot big sur or older, you can set the minkernel field to 21.00.0 to prevent bluetoolfixup loading on older oses.\n\nsee the below issues for more details:\n\n * bluetoolfixup pr\n * monterey beta 5+ issues\n\n\n# ethernet\n\nintel i211 chipset (typical for some amd boards i.e. b450) no longer works with smalltreeintel82576 kext (network remains in cable unplugged status).\n\nappleigb confirmed working on i211 @ b450, but nics on other boards might experience issues (please report if any)\n\nsee the below issues for more details:\n\n * kext no longer working with macos 12.0\n\nthe boot-arg for enabling intel i225-v ethernet controller has changed since macos monterey 12.3. use e1000=0 instead of dk.e1000=0.\n\n\n# ota updates\n\nstarting with monterey, updates are not delivered to t2 macs which don't have secure boot enabled, and updates do not install properly if your securebootmodel does not match your machine (ie. non-t2 smbios using j137 or imacpro1,1 using j160). hackintoshes which use a t2 smbios must have opencore 0.7.4+ with securebootmodel set to default. if your smbios does not have a t2 chip, then either default or disabled is ok. more information is available on the apple secure boot page.\n\nt2 smbios list\n\nsmbios                           minimum macos version\nimacpro1,1 (december 2017)       10.13.2 (17c2111)\nmacbookpro15,1 (july 2018)       10.13.6 (17g2112)\nmacbookpro15,2 (july 2018)       10.13.6 (17g2112)\nmacmini8,1 (october 2018)        10.14 (18a2063)\nmacbookair8,1 (october 2018)     10.14.1 (18b2084)\nmacbookpro15,3 (may 2019)        10.14.5 (18f132)\nmacbookpro15,4 (july 2019)       10.14.5 (18f2058)\nmacbookair8,2 (july 2019)        10.14.5 (18f2058)\nmacbookpro16,1 (november 2019)   10.15.1 (19b2093)\nmacpro7,1 (december 2019)        10.15.1 (19b88)\nmacbookair9,1 (march 2020)       10.15.3 (19d2064)\nmacbookpro16,2 (may 2020)        10.15.4 (19e2269)\nmacbookpro16,3 (may 2020)        10.15.4 (19e2265)\nmacbookpro16,4 (june 2020)       10.15.5 (19f96)\nimac20,1 (august 2020)           10.15.6 (19g2005)\nimac20,2 (august 2020)           10.15.6 (19g2005)\n\nnote: you do not need the -revsbvmm boot argument from restrictevents. use opencore 0.7.4 or later.\n\n\n# troubleshooting\n\n# no updates\n\nmake sure that sip is enabled. two bits in sip specifically cause issues:\n\n * csr_allow_apple_internal (bit 4 = 0x10)\n   * prevents updates appearing at all\n * csr_allow_unauthenticated_root (bit 11 = 0x800)\n   * prevents incremental ota updates\n\nif you want to still have sip disabled, use either:\n\n * csrutil disable --no-internal in recovery\n * a sip value which does not include the two flags above\n\nto enable sip:\n\n * set csr-active-config to <00 00 00 00> in your config.plist\n * use csrutil clear in recovery\n   * can instead add csr-active-config to nvram->delete or reset nvram",charsets:{}},{title:"Choosing the right SMBIOS",frontmatter:{},regularPath:"/extras/smbios-support.html",relativePath:"extras/smbios-support.md",key:"v-71e7376d",path:"/extras/smbios-support.html",headers:[{level:2,title:"How to decide",slug:"how-to-decide",normalizedTitle:"how to decide",charIndex:2483},{level:2,title:"macOS SMBIOS list",slug:"macos-smbios-list",normalizedTitle:"macos smbios list",charIndex:3801},{level:3,title:"MacBook",slug:"macbook",normalizedTitle:"macbook",charIndex:2392},{level:3,title:"MacBook Air",slug:"macbook-air",normalizedTitle:"macbook air",charIndex:4001},{level:3,title:"MacBook Pro",slug:"macbook-pro",normalizedTitle:"macbook pro",charIndex:4018},{level:3,title:"Mac Mini",slug:"mac-mini",normalizedTitle:"mac mini",charIndex:882},{level:3,title:"iMac",slug:"imac",normalizedTitle:"imac",charIndex:1598},{level:3,title:"iMac Pro",slug:"imac-pro",normalizedTitle:"imac pro",charIndex:1660},{level:3,title:"Mac Pro",slug:"mac-pro",normalizedTitle:"mac pro",charIndex:1661},{level:3,title:"Xserve",slug:"xserve",normalizedTitle:"xserve",charIndex:4086},{level:3,title:"Miscellaneous SMBIOS",slug:"miscellaneous-smbios",normalizedTitle:"miscellaneous smbios",charIndex:4098}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"How to decide macOS SMBIOS list MacBook MacBook Air MacBook Pro Mac Mini iMac iMac Pro Mac Pro Xserve Miscellaneous SMBIOS",content:'# Choosing the right SMBIOS\n\nWhen choosing the right SMBIOS for your machine, you\'ve gotta understand that it\'s more than just simple CPU match up. Many things can affect how your machine works as your SMBIOS determines CPU Power management, GPU profiles, USB maps and much more.\n\nThe main things to consider when selecting your SMBIOS:\n\n * CPU Type\n   \n   * Specifically mobile vs desktop vs server, as this can greatly affect sleep and overall system stability\n   * This also determines whether or not you can use Apple\'s XCPM and what profiles you get\n     * These 2 are mostly resolved with CPUFriend: Fixing Power management\n   * Note: AMD CPUs do not need to concern about this\n\n * GPU Type\n   \n   * Many things are affected here, like GPU power management (AGPM), display out support (AGDP), sleep (AGDC) and much more.\n     * This is especially relevant when we look to the Mac Mini SMBIOS that only uses mobile hardware, which doesn\'t match well with desktop hardware. This is the reason we highly discourage them unless used for Intel\'s NUC series and such which are based off mobile hardware.\n     * Laptops should also pay very close attention, as Apple always assumes that when a dGPU is present for the SMBIOS, all display outs will be routed through it. This can become an issue when an Optimus laptop has its external displays wired through the iGPU instead, causing black screen issues which would require more patching.\n   * CPUs without an iGPU need to pay very close attention, as features like Quick Look and such will be broken if the SMBIOS expects an iGPU (ie. Every single iMac SMBIOS)\n     * For these situations, look closely at the iMac Pro and Mac Pro SMBIOS\n   * DRM is also tied in here as well however this is mostly resolved here: Fixing DRM\n\n * OS Support\n   \n   * Mainly relevant for older hardware, as macOS may still have support for the CPU however no longer supports SMBIOS from that era\n     * Arrandale CPUs are a great example, as they still have OS support even in Big Sur (however no iGPU support past 10.13.6)\n\n * USB Devices\n   \n   * Certain SMBIOS will have their own USB map which may attach to your hardware causing USB issues.\n     * See here for more info: USB Mapping\n   * Also to note, Skylake+ SMBIOS will also require a USBX device to fix USB current output\n     * See here for more info: Fixing USB Power\n\nXCPM Supported SMBIOS\n\nSMBIOS\nMacBook8,1+\nMacBookAir6,x+\nMacBookPro11,x+\nMacmini7,1+\niMac14,x+\niMacPro1,1\nMacPro7,1+\n\n\n# How to decide\n\nGenerally our recommendations with SMBIOS is as follows:\n\n 1. Find the right CPU Generation and tier as closely as possible\n 2. Then match up with either iGPU only or dGPU SMBIOS\n 3. Finally decide on misc things (like exact GPU and CPU)\n\nAnd there\'s also some special notes with SMBIOS:\n\n * iMacPro1,1 and MacPro7,1 are the only 2 SMBIOS that will allow for dGPU to handle all the workload including background rendering and other tasks that the iGPU would handle\n   * We only recommend this SMBIOS if you require this, however you\'ll likely need to fix power management as sleep may break if your hardware isn\'t of this class (ie. HEDT/Server/AMD): Fixing Power management\n   * Note that this requires a Polaris, Vega or Navi GPU to work properly.\n * iMac20,2 is a custom SMBIOS meant only for Apple\'s custom i9-10910 CPU, so unless you have an i9-10900K we recommend using iMac20,1\n * Mac Mini SMBIOS should be avoided unless you\'re running mobile hardware without a built-in display\n   * Intel NUCs are the ideal hardware for this SMBIOS\n * iGPU-less CPUs MUST pay very close attention when selecting a SMBIOS, as Apple always assumes the iGPU is present on the iMac SMBIOS, so you will need to find a SMBIOS without this requirement like iMac Pro or Mac Pro.\n   * This also applies to AMD CPUs\n\n\n# macOS SMBIOS list\n\nThis is a full list of all of the SMBIOS Apple has ever supported in macOS with extra information like CPU and GPU types.\n\n\n\n * How to decide\n * macOS SMBIOS list\n   * MacBook\n   * MacBook Air\n   * MacBook Pro\n   * Mac Mini\n   * iMac\n   * iMac Pro\n   * Mac Pro\n   * Xserve\n   * Miscellaneous SMBIOS\n\n\n\nInfo pulled from both EveryMac and OpenCorePkg\n\nSpecial Note:\n\n * The letter beside each CPU Family is the tier of CPU, see below table for more info:\n\nLETTER         TYPE\nY              Mobile (Low end)\nU, M           Mobile (Mid tier)\nH, QM, HQ      Mobile (High End)\nS              Desktop\nEP, SP, W, X   HEDT/Server\n\n\n# MacBook\n\nSMBIOS        CPU FAMILY     GPU             BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\nMacBook1,1    Yonah(M)       GMA 950         Mac-F4208CC8           10.4.6 (8I2025)     10.6.8\nMacBook2,1    Merom(M)       GMA 950         Mac-F4208CA9           10.4.8 (8N1108)     10.7.5\nMacBook3,1    Merom(M)       GMA X3100       Mac-F22788C8           10.5 (9A3111)\nMacBook4,1    Penryn(M)      GMA X3100       Mac-F22788A9           10.5.2 (9C2015)\nMacBook5,1    Penryn(M)      GeForce 9400M   Mac-F42D89C8           10.5.5 (9F2114)     10.11.6\nMacBook5,2    Penryn(M)      GeForce 9400M   Mac-F22788AA           10.5.6 (9G2110)\nMacBook6,1    Penryn(M)      GeForce 9400M   Mac-F22C8AC8           10.6.1 (10A2047)    10.13.6\nMacBook7,1    Penryn(M)      GeForce 320M    Mac-F22C89C8           10.6.3 (10D2162)\nMacBook8,1    Broadwell(Y)   HD 5300         Mac-BE0E8AC46FE800CC   10.10.2 (14C2061)   11.7.x\nMacBook9,1    Skylake(Y)     HD 515          Mac-9AE82516C7C6B903   10.11.4 (15E2066)   12.6.x\nMacBook10,1   Kaby Lake(Y)   HD 615          Mac-EE2EBD4B90B839A8   10.12.5 (16F207)    Current\n\n\n# MacBook Air\n\nSMBIOS          CPU FAMILY        GPU                     BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\nMacBookAir1,1   Merom(M)          GMA X3100 (11")         Mac-F42C8CC8           10.5.1 (9B2324)     10.7.5\nMacBookAir2,1   Penryn(M)         GeForce 9400M (13")     Mac-F42D88C8           10.5.5              10.11.6\nMacBookAir3,1   Penryn(M)         GeForce 320M (11")      Mac-942452F5819B1C1B   10.6.4 (10F3061)    10.13.6\nMacBookAir3,2   Penryn(M)         GeForce 320M (13")      Mac-942C5DF58193131B   10.6.4 (10F3061)\nMacBookAir4,1   Sandy Bridge(M)   HD 3000 (11")           Mac-C08A6BB70A942AC2   10.7 (11A2063)\nMacBookAir4,2   Sandy Bridge(M)   HD 3000 (13")           Mac-742912EFDBEE19B3   10.7 (11A2063)\nMacBookAir5,1   Ivy Bridge(U)     HD 4000 (11")           Mac-66F35F19FE2A0D05   10.7.4 (11E2520)    10.15.7\nMacBookAir5,2   Ivy Bridge(U)     HD 4000 (13")           Mac-2E6FAB96566FE58C   10.8.2 (12C2034)\nMacBookAir6,1   Haswell(U)        HD 5000 (11")           Mac-35C1E88140C3E6CF   10.8.4 (12E3067)    11.7.x\nMacBookAir6,2   Haswell(U)        HD 5000 (13")           Mac-7DF21CB3ED6977E5   10.8.4 (12E3067)\nMacBookAir7,1   Broadwell(U)      HD 6000 (11")           Mac-9F18E312C5C2BF0B   10.10.2 (14C2507)   12.6.x\nMacBookAir7,2   Broadwell(U)      HD 6000 (13")           Mac-937CB26E2E02BB01   10.10.2 (14C2507)\nMacBookAir8,1   Amber Lake(Y)     UHD 617 (13")           Mac-827FAC58A8FDFA22   10.14.1 (18B2084)   Current\nMacBookAir8,2   Amber Lake(Y)     UHD 617 (13")           Mac-226CB3C6A851A671   10.14.5 (18F2058)\nMacBookAir9,1   Ice Lake(Y)       Iris Plus G4/G7 (13")   Mac-0CFF9C7C2B63DF8D   10.15.4 (19E287)\n\n\n# MacBook Pro\n\nSMBIOS           CPU FAMILY         GPU                                   BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\nMacBookPro1,1    Yonah(M)           Radeon X1600 (15")                    Mac-F425BEC8           10.4.5 (8G1453)     10.6.8\nMacBookPro1,2    Yonah(M)           Radeon X1600 (17")                    Mac-F42DBEC8           10.4.6 (8I2032)\nMacBookPro2,1    Merom(M)           Radeon X1600 (15")                    Mac-F42189C8           10.4.8 (8N1051)     10.7.5\nMacBookPro2,2    Merom(M)           Radeon X1600 (17")                    Mac-F42187C8           10.4.8 (8N1037)\nMacBookPro3,1    Merom(M)           GeForce 8600M GT (15/17")             Mac-F4238BC8           10.4.9 (8Q1058)     10.11.6\nMacBookPro4,1    Penryn(M)          GeForce 8600MG GT (17")               Mac-F42C89C8           10.5.2 (9C2018)\nMacBookPro5,1    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F42D86C8           10.5.5 (9F2114)\nMacBookPro5,2    Penryn(M)          GeForce 9400M/9600M GT (17")          Mac-F2268EC8           10.5.6 (9G2141)\nMacBookPro5,3    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F22587C8           10.5.7 (9J3050)\nMacBookPro5,4    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F22587A1           10.5.7 (9J3050)\nMacBookPro5,5    Penryn(M)          GeForce 9400M/9600M GT (13")          Mac-F2268AC8           10.5.7 (9J3050)\nMacBookPro6,1    Arrandale(M)       HD Graphics/GeForce GT 330M (17")     Mac-F22589C8           10.6.3 (10D2063a)   10.13.6\nMacBookPro6,2    Arrandale(M)       HD Graphics/GeForce GT 330M (15")     Mac-F22586C8           10.6.3 (10D2094)    10.13.6\nMacBookPro7,1    Penryn(M)          GeForce 320M (13")                    Mac-F222BEC8           10.6.3 (10D2125)\nMacBookPro8,1    Sandy Bridge(M)    HD 3000 (13")                         Mac-94245B3640C91C81   10.6.6 (10J3210)\nMacBookPro8,2    Sandy Bridge(QM)   HD 3000/Radeon HD 6490M (15")         Mac-94245A3940C91C80   10.6.6 (10J3210)\nMacBookPro8,3    Sandy Bridge(QM)   HD 3000/Radeon HD 6750M (17")         Mac-942459F5819B171B   10.6.6 (10J3210)\nMacBookPro9,1    Ivy Bridge(QM)     HD 4000/GeForce GT 650M (15")         Mac-4B7AC7E43945597E   10.7.3 (11D2097)    10.15.7\nMacBookPro9,2    Ivy Bridge(M)      HD 4000 (13")                         Mac-6F01561E16C75D06   10.7.3 (11D2515)\nMacBookPro10,1   Ivy Bridge(QM)     HD 4000/GeForce GT 650M (15")         Mac-C3EC7CD22292981F   10.7.4 (11E2068)\nMacBookPro10,2   Ivy Bridge(M)      HD 4000 (13")                         Mac-AFD8A9D944EA4843   10.8.2 (12C2034)\nMacBookPro11,1   Haswell(U)         Iris 5100 (13")                       Mac-189A3D4F975D5FFC   10.9 (13A2093)      11.7.x\nMacBookPro11,2   Haswell(HQ)        Iris Pro 5200 (15")                   Mac-3CBD00234E554E41   10.9 (13A3017)\nMacBookPro11,3   Haswell(HQ)        Iris Pro 5200/GeForce GT 750M (15")   Mac-2BD1B31983FE1663   10.9 (13A3017)\nMacBookPro11,4   Haswell(HQ)        Iris Pro 5200 (15")                   Mac-06F11FD93F0323C5   10.10.3 (14D2134)   12.6.x\nMacBookPro11,5   Haswell(HQ)        Iris Pro 5200/Radeon R9 M370X (15")   Mac-06F11F11946D27C5   10.10.3 (14D2134)\nMacBookPro12,1   Broadwell(U)       Iris 6100 (13")                       Mac-E43C1C25D4880AD6   10.10.2 (14C2507)\nMacBookPro13,1   Skylake(U)         Iris 540 (13")                        Mac-473D31EABEB93F9B   10.12 (16A2323a)\nMacBookPro13,2   Skylake(U)         Iris 550 (13")                        Mac-66E35819EE2D0D05   10.12.1 (16B2657)\nMacBookPro13,3   Skylake(H)         HD 530/Radeon Pro 450 (15")           Mac-A5C67F76ED83108C   10.12.1 (16B2659)\nMacBookPro14,1   Kaby Lake(U)       Iris Plus 640 (13")                   Mac-B4831CEBD52A0C4C   10.12.5 (16F2073)   Current\nMacBookPro14,2   Kaby Lake(U)       Iris Plus 650 (13")                   Mac-CAD6701F7CEA0921   10.12.5 (16F2073)\nMacBookPro14,3   Kaby Lake(H)       HD 630/Radeon Pro 555 (15")           Mac-551B86E5744E2388   10.12.5 (16F2073)\nMacBookPro15,1   Coffee Lake(H)     UHD 630/Radeon Pro 555X (15")         Mac-937A206F2EE63C01   10.13.6 (17G2112)\nMacBookPro15,2   Coffee Lake(U)     Iris Plus 655 (13")                   Mac-827FB448E656EC26   10.13.6 (17G2112)\nMacBookPro15,3   Coffee Lake(H)     UHD 630/Radeon Pro Vega 16 (15")      Mac-1E7E29AD0135F9BC   10.14.1 (18B3094)\nMacBookPro15,4   Coffee Lake(U)     Iris Plus 645 (13")                   Mac-53FDB3D8DB8CA971   10.14.5 (18F2058)\nMacBookPro16,1   Coffee Lake(H)     UHD 630/Radeon Pro 5300 (16")         Mac-E1008331FDC96864   10.15.1 (19B2093)\nMacBookPro16,2   Ice Lake(U)        Iris Plus G4/G7 (13")                 Mac-5F9802EFE386AA28   10.15.4 (19E2269)\nMacBookPro16,3   Coffee Lake(U)     Iris Plus 645 (13")                   Mac-E7203C0F68AA0004   10.15.4 (19E2269)\nMacBookPro16,4   Coffee Lake(H)     UHD 630/Radeon Pro 5600M (16")        Mac-A61BADE1FDAD7B05   10.15.1 (19B2093)\n\n\n# Mac Mini\n\nSMBIOS       CPU FAMILY         GPU                    BOARD-ID               INITIAL SUPPORT    LAST SUPPORTED VERSION\nMacmini1,1   Yonah(M)           GMA 950                Mac-F4208EC8           10.4.5 (8H1619)    10.6.8\nMacmini2,1   Merom(M)           GMA 950                Mac-F4208EAA           10.4.10 (8R3014)   10.7.5\nMacmini3,1   Penryn(M)          GeForce 9400M          Mac-F22C86C8           10.5.6 (9G2030)    10.11.6\nMacmini4,1   Penryn(M)          GeForce 320M           Mac-F2208EC8           10.6.4 (10F2025)   10.13.6\nMacmini5,1   Sandy Bridge(M)    HD 3000                Mac-8ED6AF5B48C039E1   10.7 (11A2061)\nMacmini5,2   Sandy Bridge(M)    Radeon HD 6630M        Mac-4BC72D62AD45599E   10.7 (11A2061)\nMacmini5,3   Sandy Bridge(QM)   HD 3000                Mac-7BA5B2794B2CDB12   10.7 (11A2061)\nMacmini6,1   Ivy Bridge(M)      HD 4000                Mac-031AEE4D24BFF0B1   10.8.1 (12B2080)   10.15.7\nMacmini6,2   Ivy Bridge(QM)     HD 4000                Mac-F65AE981FFA204ED   10.8.1 (12B2080)\nMacmini7,1   Haswell(U)         HD 5000 or Iris 5100   Mac-35C5E08120C7EEAF   10.10 (14A389)     12.6.x\nMacmini8,1   Coffee Lake(H)     UHD 630                Mac-7BA5B2DFE22DDD8C   10.14 (18A2063)    Current\n\n\n# iMac\n\nSMBIOS     CPU FAMILY        GPU                        BOARD-ID                                      INITIAL SUPPORT     LAST SUPPORTED VERSION\niMac4,1    Yonah(M)          Radeon X1600               Mac-F42786C8                                  10.4.4 (8G1165)     10.6.8\niMac4,2    Yonah(M)          GMA 950                    Mac-F4218EC8                                  10.4.7 (8I2057)\niMac5,1    Merom(M)          Radeon X1600               Mac-F4228EC8                                  10.4.7 (8K1106)     10.7.5\niMac5,2    Merom(M)          GMA 950                    Mac-F4218EC8                                  10.4.7 (8K1106)\niMac6,1    Merom(M)          GeForce 7300GT             Mac-F4218FC8                                  10.4.7 (8K1123)\niMac7,1    Merom(M)          Radeon HD 2400 XT          Mac-F42386C8                                  10.4.10 (8R4031)    10.11.6\niMac8,1    Penryn(M)         Radeon HD 2400 XT          Mac-F227BEC8                                  10.5.2 (9C2028)\niMac9,1    Penryn(M)         GeForce 9400M              Mac-F2218FA9                                  10.5.6 (9G2030)\niMac10,1   Wolfdale(S)       GeForce 9400M              Mac-F221DCC8                                  10.6.1 (10A2155)    10.13.6\niMac10,1   Wolfdale(S)       Radeon HD 4670             Mac-F2268CC8                                  10.6.1 (10A2155)\niMac11,1   Lynnfield(S)      Radeon HD 4850             Mac-F2268DAE                                  10.6.2 (10C2234)\niMac11,2   Clarkdale(S)      Radeon HD 4670             Mac-F2238AC8                                  10.6.3 (10D2322a)\niMac11,3   Clarkdale(S)      Radeon HD 5670             Mac-F2238BAE                                  10.6.3 (10D2322a)\niMac12,1   Sandy Bridge(S)   Radeon HD 6750M            Mac-942B5BF58194151B                          10.6.6 (10J4026)\niMac12,2   Sandy Bridge(S)   Radeon HD 6770M            Mac-942B59F58194171B                          10.6.6 (10J4026)\niMac13,1   Ivy Bridge(S)     GeForce GT 640M            Mac-00BE6ED71E35EB86                          10.8.2 (12C3104)    10.15.7\niMac13,1   Ivy Bridge(S)     HD 4000                    Mac-00BE6ED71E35EB86                          10.8.2 (12C3104)\niMac13,2   Ivy Bridge(S)     GeForce GTX 660M           Mac-FC02E91DDD3FA6A4                          10.8.2 (12C2037)\niMac13,3   Ivy Bridge(S)     HD 4000                    Mac-7DF2A3B5E5D671ED                          10.8.2 (12C2037)\niMac14,1   Haswell(S)        Iris Pro 5200              Mac-031B6874CF7F642A                          10.8.4 (12E4022)\niMac14,2   Haswell(S)        GeForce GT 750M            Mac-27ADBB7B4CEE8E61                          10.8.4 (12E4022)\niMac14,3   Haswell(S)        GeForce GT 755M            Mac-77EB7D7DAF985301                          10.8.4 (12E4022)\niMac14,4   Haswell(U)        HD 5000                    Mac-81E3E92DD6088272                          10.9.3 (13D2061)    11.7.x\niMac15,1   Haswell(S)        Radeon R9 M290X            Mac-42FD25EABCABB274                          10.10 (14A389)\niMac16,1   Broadwell(U)      HD 6000 or Iris Pro 6200   Mac-A369DDC4E67F1C45                          10.11 (15A2301)     12.6.x\niMac16,2   Broadwell(S)      Iris Pro 6200              Mac-FFE5EF870D7BA81A                          10.11 (15A2301)\niMac17,1   Skylake(S)        Radeon R9 M380             Mac-DB15BD556843C820, Mac-65CE76090165799A,   10.11 (15A4310)\n                                                        Mac-B809C3757DA9BB8D\niMac18,1   Kaby Lake(U)      Iris Plus 640              Mac-4B682C642B45593E                          10.12.4 (16E2193)   Current\niMac18,2   Kaby Lake(S)      Radeon Pro 555             Mac-77F17D7DA9285301                          10.12.4 (16F2073)\niMac18,3                     Radeon Pro 570             Mac-BE088AF8C5EB4FA2                          10.12.4 (16F2073)\niMac19,1   Coffee Lake(S)    Radeon Pro 570X            Mac-AA95B1DDAB278B95                          10.14.4 (18E226)\niMac19,2                     Radeon Pro 555X            Mac-63001698E7A34814                          10.14.4 (18E226)\niMac20,1   Comet Lake(S)     Radeon Pro 5300            Mac-CFF7D910A743CAAF                          10.15.6 (19G2005)\niMac20,2                                                Mac-AF89B6D9451A490B                          10.15.6 (19G2005)\n\n\n# iMac Pro\n\nSMBIOS       CPU FAMILY   GPU       BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\niMacPro1,1   Skylake-W    Vega 56   Mac-7BA5B2D9E42DDD94   10.13.2 (17C2111)   Current\n\n\n# Mac Pro\n\nSMBIOS      CPU FAMILY       GPU                 BOARD-ID               INITIAL SUPPORT    LAST SUPPORTED VERSION\nMacPro1,1   Woodcrest        GeForce 7300 GT     Mac-F4208DC8           10.4.7 (8K1079)    10.7.5\nMacPro2,1   Clovertown                           Mac-F4208DA9           10.4.9 (8P4037)\nMacPro3,1   Harpertown       Radeon HD 2600 XT   Mac-F42C88C8           10.5.1 (9B2117)    10.11.6\nMacPro4,1   Nehalem          GeForce GT 120      Mac-F221BEC8           10.5.6 (9G3553)\nMacPro5,1   Nehalem          Radeon HD 5770      Mac-F221BEC8           10.6.4 (10F2521)   10.14.6\nMacPro5,1   Westmere EP                          Mac-F221BEC8           10.6.4 (10F2521)\nMacPro6,1   Ivy Bridge EP    FirePro D300        Mac-F60DEB81FF30ACF6   10.9.1 (13B4116)   12.6.x\nMacPro7,1   Cascade Lake-W   Radeon Pro 580X     Mac-27AD2F918AE68F61   10.15.0 (19A583)   Current\n\n\n# Xserve\n\nSMBIOS      CPU FAMILY   GPU              BOARD-ID       INITIAL SUPPORT          LAST SUPPORTED VERSION\nXserve1,1   Woodcrest    Radeon X1300     Mac-F4208AC8   Server 10.4.8 (8N1215)   Server 10.7.5\nXserve2,1   Harpertown                    Mac-F42289C8   Server 10.5 (9B2117)\nXserve3,1   Nehalem EP   GeForce GT 120   Mac-F223BEC8   Server 10.5.6            10.11.6\n\n\n# Miscellaneous SMBIOS\n\nAll models listed below are not supported by OpenCore however are documented here for ease of reference.\n\n * Apple Development Platforms\n   * Developer Transition Kit\n * Apple Silicon\n   * Mac Mini\n   * MacBook Air\n   * MacBook Pro\n   * iMac\n * PowerPC\n   * PowerBook\n   * iBook\n   * PowerMac\n   * iMac\n   * eMac\n   * Cube\n   * Mac Mini\n   * Xserve\n\nApple Silicon Notes\n\nExtra information regarding Apple\'s CPUs:\n\n * They do not rely on ACPI or UEFI\n * They do not include DeviceProperties in their firmware\n * They use iPad8,6 for iOS/iPadOS applications\n * board-id is only applicable with Intel Macs, PowerPC and ARM do not have this entry\n\n# Developer Transition Kit\n\nSMBIOS   YEAR       CPU FAMILY       PRODUCT IDENTIFIER   INITIAL SUPPORT\nADP2,1   Mid 2005   Intel Prescott   N/A                  10.4.1 (8B1025)\nADP3,2   Mid 2020   Apple A12Z       J273                 11.0.0 (20A5299w)\n\n# Mac Mini - Apple Silicon\n\nSMBIOS       YEAR        CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\nMacmini9,1   Late 2020   Apple M1     J274                 11.0.0 (20A2411)\n\n# MacBook Air - Apple Silicon\n\nSMBIOS           YEAR        CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\nMacBookAir10,1   Late 2020   Apple M1     J313                 11.0.0 (20A2411)\n\n# MacBook Pro - Apple Silicon\n\nSMBIOS           YEAR        CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\nMacBookPro17,1   Late 2020   Apple M1     J293                 11.0.0 (20A2411)\n\n# iMac - Apple Silicon\n\nSMBIOS     YEAR       CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\niMac21,1   Mid 2021   Apple M1     J256                 11.3 (20E232?)\niMac21,2   Mid 2021   Apple M1     J257                 11.3 (20E232?)\n\nPower PC SMBIOS Table\n\n\n# PowerBook - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerBook1,1   Mid-1999     PowerPC 750 (G3)     8.6               10.3.9\nPowerBook3,1   Early 2000                        9.0.2             10.4.11\nPowerBook3,2   Early 2001   PowerPC 7410 (G4)    9.1\nPowerBook3,3   Late 2001    PowerPC 7440 (G4)    9.2.1\nPowerBook3,4   Mid-2002     PowerPC 7451 (G4)    9.2.2\nPowerBook3,5   Late 2002    PowerPC 7455 (G4)                      10.5.8\nPowerBook5,1   Early 2003                        10.2.4\nPowerBook5,2   Late 2003    PowerPC 7447 (G4)    10.2.7\nPowerBook5,3\nPowerBook5,4   Mid-2004     PowerPC 7447a (G4)   10.3.3\nPowerBook5,5\nPowerBook5,6   Early 2005   10.3.7\nPowerBook5,7\nPowerBook5,8   Late 2005                         10.4.2\nPowerBook5,9\nPowerBook6,1   Early 2003   PowerPC 7455 (G4)    10.2.3\nPowerBook6,2\nPowerBook6,4   Mid-2004     PowerPC 7447a (G4)   10.2.7\nPowerBook6,8   Early 2005                        10.3.7\n\n# iBook - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerBook2,1   Mid-1999     PowerPC 750 (G3)     8.6               10.3.9\nPowerBook2,2   Late 2000    PowerPC 750cx (G3)   9.0.4             10.4.11\nPowerBook4,1   Late 2002    PowerPC 7455 (G4)    9.2.2             10.5.8\nPowerBook4,2   Early 2002   PowerPC 750cx (G3)   9.2.1             10.4.11\nPowerBook4,3   Mid-2002     PowerPC 750fx (G3)   9.2.2\nPowerBook6,3   Late 2003    PowerPC 7457 (G4)    10.3 (7B85)\nPowerBook6,5   Mid-2004     PowerPC 7447a (G4)   10.3.3 (7G51)     10.5.8\nPowerBook6,7   Mid-2005                          10.4.2 (8D37)\n\n# PowerMac - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac1,1    Early 1999   PowerPC 750 (G3)     8.5.1             10.4.11\nPowerMac1,2    Mid 1999     PowerPC 7400 (G4)    8.6\nPowerMac3,1\nPowerMac3,2    Mid-2001     PowerPC 7450 (G4)    9.2\nPowerMac3,3    Mid-2000     PowerPC 7400 (G4)    9.0.4\nPowerMac3,4    Early 2001   PowerPC 7410 (G4)    9.1\nPowerMac3,5    Mid-2001     PowerPC 7450 (G4)    9.2               10.5.8\nPowerMac3,6    Mid-2002     PowerPC 7455 (G4)    9.2.2\nPowerMac7,2    Mid-2003     PowerPC 970 (G5)     10.2.7\nPowerMac7,3    Early-2005   PowerPC 970fx (G5)   10.4\nPowerMac9,1    Late 2004                         10.3.5 (8E90)\nPowerMac11,2   Late 2005    PowerPC 970MP (G5)   10.4.2\n\n# iMac - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\niMac,1         Mid 1998     PowerPC 750 (G3)     8.1               10.3.9\nPowerMac2,1    Late 1999                         8.6               10.4.11\nPowerMac2,2    Mid 2000                          9.0.4             10.3.9\nPowerMac4,1    Early 2001   PowerPC 750cx (G3)   9.1               10.4.11\nPowerMac4,2    Early 2002   PowerPC 7441 (G4)    9.2.2\nPowerMac4,5    Mid-2002     PowerPC 7445 (G4)    9.2.2\nPowerMac6,1    Early 2003                        10.2.3            10.5.8\nPowerMac6,3    Late 2003                         10.3.1\nPowerMac8,1    Mid-2004     PowerPC 970 (G5)     10.3.5 (7P35)\nPowerMac8,2    Mid-2005                          10.4 (8A428)\nPowerMac12,1   Late 2005    PowerPC 970fx (G5)   10.4.2 (8E102)\n\n# eMac - PowerPC\n\nSMBIOS        YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac4,4   Mid-2003     PowerPC 7445 (G4     9.2.2             10.5.8\nPowerMac6,4   Early 2004   PowerPC 7447a (G4)   10.3.3\n\n# Cube - PowerPC\n\nSMBIOS        YEAR       CPU FAMILY          INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac5,1   Mid-2000   PowerPC 7400 (G4)   9.0.4             10.4.11\nPowerMac5,2\n\n# Mac Mini - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac10,1   Early 2005   PowerPC 7447a (G4)   10.3.7 (7T11)     10.5.8\nPowerMac10,2   Late 2005                         10.4.2 (8D40)\n\n# Xserve - PowerPC\n\nSMBIOS       YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nRackMac1,1   Mid-2002     PowerPC 7455 (G4)    10.1.5 (6C115)    Server 10.5.8\nRackMac1,2   Early 2003                        10.2.4 (6I34)\nRackMac3,1   Early 2004   PowerPC 970fx (G5)   10.3.0',normalizedContent:'# choosing the right smbios\n\nwhen choosing the right smbios for your machine, you\'ve gotta understand that it\'s more than just simple cpu match up. many things can affect how your machine works as your smbios determines cpu power management, gpu profiles, usb maps and much more.\n\nthe main things to consider when selecting your smbios:\n\n * cpu type\n   \n   * specifically mobile vs desktop vs server, as this can greatly affect sleep and overall system stability\n   * this also determines whether or not you can use apple\'s xcpm and what profiles you get\n     * these 2 are mostly resolved with cpufriend: fixing power management\n   * note: amd cpus do not need to concern about this\n\n * gpu type\n   \n   * many things are affected here, like gpu power management (agpm), display out support (agdp), sleep (agdc) and much more.\n     * this is especially relevant when we look to the mac mini smbios that only uses mobile hardware, which doesn\'t match well with desktop hardware. this is the reason we highly discourage them unless used for intel\'s nuc series and such which are based off mobile hardware.\n     * laptops should also pay very close attention, as apple always assumes that when a dgpu is present for the smbios, all display outs will be routed through it. this can become an issue when an optimus laptop has its external displays wired through the igpu instead, causing black screen issues which would require more patching.\n   * cpus without an igpu need to pay very close attention, as features like quick look and such will be broken if the smbios expects an igpu (ie. every single imac smbios)\n     * for these situations, look closely at the imac pro and mac pro smbios\n   * drm is also tied in here as well however this is mostly resolved here: fixing drm\n\n * os support\n   \n   * mainly relevant for older hardware, as macos may still have support for the cpu however no longer supports smbios from that era\n     * arrandale cpus are a great example, as they still have os support even in big sur (however no igpu support past 10.13.6)\n\n * usb devices\n   \n   * certain smbios will have their own usb map which may attach to your hardware causing usb issues.\n     * see here for more info: usb mapping\n   * also to note, skylake+ smbios will also require a usbx device to fix usb current output\n     * see here for more info: fixing usb power\n\nxcpm supported smbios\n\nsmbios\nmacbook8,1+\nmacbookair6,x+\nmacbookpro11,x+\nmacmini7,1+\nimac14,x+\nimacpro1,1\nmacpro7,1+\n\n\n# how to decide\n\ngenerally our recommendations with smbios is as follows:\n\n 1. find the right cpu generation and tier as closely as possible\n 2. then match up with either igpu only or dgpu smbios\n 3. finally decide on misc things (like exact gpu and cpu)\n\nand there\'s also some special notes with smbios:\n\n * imacpro1,1 and macpro7,1 are the only 2 smbios that will allow for dgpu to handle all the workload including background rendering and other tasks that the igpu would handle\n   * we only recommend this smbios if you require this, however you\'ll likely need to fix power management as sleep may break if your hardware isn\'t of this class (ie. hedt/server/amd): fixing power management\n   * note that this requires a polaris, vega or navi gpu to work properly.\n * imac20,2 is a custom smbios meant only for apple\'s custom i9-10910 cpu, so unless you have an i9-10900k we recommend using imac20,1\n * mac mini smbios should be avoided unless you\'re running mobile hardware without a built-in display\n   * intel nucs are the ideal hardware for this smbios\n * igpu-less cpus must pay very close attention when selecting a smbios, as apple always assumes the igpu is present on the imac smbios, so you will need to find a smbios without this requirement like imac pro or mac pro.\n   * this also applies to amd cpus\n\n\n# macos smbios list\n\nthis is a full list of all of the smbios apple has ever supported in macos with extra information like cpu and gpu types.\n\n\n\n * how to decide\n * macos smbios list\n   * macbook\n   * macbook air\n   * macbook pro\n   * mac mini\n   * imac\n   * imac pro\n   * mac pro\n   * xserve\n   * miscellaneous smbios\n\n\n\ninfo pulled from both everymac and opencorepkg\n\nspecial note:\n\n * the letter beside each cpu family is the tier of cpu, see below table for more info:\n\nletter         type\ny              mobile (low end)\nu, m           mobile (mid tier)\nh, qm, hq      mobile (high end)\ns              desktop\nep, sp, w, x   hedt/server\n\n\n# macbook\n\nsmbios        cpu family     gpu             board-id               initial support     last supported version\nmacbook1,1    yonah(m)       gma 950         mac-f4208cc8           10.4.6 (8i2025)     10.6.8\nmacbook2,1    merom(m)       gma 950         mac-f4208ca9           10.4.8 (8n1108)     10.7.5\nmacbook3,1    merom(m)       gma x3100       mac-f22788c8           10.5 (9a3111)\nmacbook4,1    penryn(m)      gma x3100       mac-f22788a9           10.5.2 (9c2015)\nmacbook5,1    penryn(m)      geforce 9400m   mac-f42d89c8           10.5.5 (9f2114)     10.11.6\nmacbook5,2    penryn(m)      geforce 9400m   mac-f22788aa           10.5.6 (9g2110)\nmacbook6,1    penryn(m)      geforce 9400m   mac-f22c8ac8           10.6.1 (10a2047)    10.13.6\nmacbook7,1    penryn(m)      geforce 320m    mac-f22c89c8           10.6.3 (10d2162)\nmacbook8,1    broadwell(y)   hd 5300         mac-be0e8ac46fe800cc   10.10.2 (14c2061)   11.7.x\nmacbook9,1    skylake(y)     hd 515          mac-9ae82516c7c6b903   10.11.4 (15e2066)   12.6.x\nmacbook10,1   kaby lake(y)   hd 615          mac-ee2ebd4b90b839a8   10.12.5 (16f207)    current\n\n\n# macbook air\n\nsmbios          cpu family        gpu                     board-id               initial support     last supported version\nmacbookair1,1   merom(m)          gma x3100 (11")         mac-f42c8cc8           10.5.1 (9b2324)     10.7.5\nmacbookair2,1   penryn(m)         geforce 9400m (13")     mac-f42d88c8           10.5.5              10.11.6\nmacbookair3,1   penryn(m)         geforce 320m (11")      mac-942452f5819b1c1b   10.6.4 (10f3061)    10.13.6\nmacbookair3,2   penryn(m)         geforce 320m (13")      mac-942c5df58193131b   10.6.4 (10f3061)\nmacbookair4,1   sandy bridge(m)   hd 3000 (11")           mac-c08a6bb70a942ac2   10.7 (11a2063)\nmacbookair4,2   sandy bridge(m)   hd 3000 (13")           mac-742912efdbee19b3   10.7 (11a2063)\nmacbookair5,1   ivy bridge(u)     hd 4000 (11")           mac-66f35f19fe2a0d05   10.7.4 (11e2520)    10.15.7\nmacbookair5,2   ivy bridge(u)     hd 4000 (13")           mac-2e6fab96566fe58c   10.8.2 (12c2034)\nmacbookair6,1   haswell(u)        hd 5000 (11")           mac-35c1e88140c3e6cf   10.8.4 (12e3067)    11.7.x\nmacbookair6,2   haswell(u)        hd 5000 (13")           mac-7df21cb3ed6977e5   10.8.4 (12e3067)\nmacbookair7,1   broadwell(u)      hd 6000 (11")           mac-9f18e312c5c2bf0b   10.10.2 (14c2507)   12.6.x\nmacbookair7,2   broadwell(u)      hd 6000 (13")           mac-937cb26e2e02bb01   10.10.2 (14c2507)\nmacbookair8,1   amber lake(y)     uhd 617 (13")           mac-827fac58a8fdfa22   10.14.1 (18b2084)   current\nmacbookair8,2   amber lake(y)     uhd 617 (13")           mac-226cb3c6a851a671   10.14.5 (18f2058)\nmacbookair9,1   ice lake(y)       iris plus g4/g7 (13")   mac-0cff9c7c2b63df8d   10.15.4 (19e287)\n\n\n# macbook pro\n\nsmbios           cpu family         gpu                                   board-id               initial support     last supported version\nmacbookpro1,1    yonah(m)           radeon x1600 (15")                    mac-f425bec8           10.4.5 (8g1453)     10.6.8\nmacbookpro1,2    yonah(m)           radeon x1600 (17")                    mac-f42dbec8           10.4.6 (8i2032)\nmacbookpro2,1    merom(m)           radeon x1600 (15")                    mac-f42189c8           10.4.8 (8n1051)     10.7.5\nmacbookpro2,2    merom(m)           radeon x1600 (17")                    mac-f42187c8           10.4.8 (8n1037)\nmacbookpro3,1    merom(m)           geforce 8600m gt (15/17")             mac-f4238bc8           10.4.9 (8q1058)     10.11.6\nmacbookpro4,1    penryn(m)          geforce 8600mg gt (17")               mac-f42c89c8           10.5.2 (9c2018)\nmacbookpro5,1    penryn(m)          geforce 9400m/9600m gt (15")          mac-f42d86c8           10.5.5 (9f2114)\nmacbookpro5,2    penryn(m)          geforce 9400m/9600m gt (17")          mac-f2268ec8           10.5.6 (9g2141)\nmacbookpro5,3    penryn(m)          geforce 9400m/9600m gt (15")          mac-f22587c8           10.5.7 (9j3050)\nmacbookpro5,4    penryn(m)          geforce 9400m/9600m gt (15")          mac-f22587a1           10.5.7 (9j3050)\nmacbookpro5,5    penryn(m)          geforce 9400m/9600m gt (13")          mac-f2268ac8           10.5.7 (9j3050)\nmacbookpro6,1    arrandale(m)       hd graphics/geforce gt 330m (17")     mac-f22589c8           10.6.3 (10d2063a)   10.13.6\nmacbookpro6,2    arrandale(m)       hd graphics/geforce gt 330m (15")     mac-f22586c8           10.6.3 (10d2094)    10.13.6\nmacbookpro7,1    penryn(m)          geforce 320m (13")                    mac-f222bec8           10.6.3 (10d2125)\nmacbookpro8,1    sandy bridge(m)    hd 3000 (13")                         mac-94245b3640c91c81   10.6.6 (10j3210)\nmacbookpro8,2    sandy bridge(qm)   hd 3000/radeon hd 6490m (15")         mac-94245a3940c91c80   10.6.6 (10j3210)\nmacbookpro8,3    sandy bridge(qm)   hd 3000/radeon hd 6750m (17")         mac-942459f5819b171b   10.6.6 (10j3210)\nmacbookpro9,1    ivy bridge(qm)     hd 4000/geforce gt 650m (15")         mac-4b7ac7e43945597e   10.7.3 (11d2097)    10.15.7\nmacbookpro9,2    ivy bridge(m)      hd 4000 (13")                         mac-6f01561e16c75d06   10.7.3 (11d2515)\nmacbookpro10,1   ivy bridge(qm)     hd 4000/geforce gt 650m (15")         mac-c3ec7cd22292981f   10.7.4 (11e2068)\nmacbookpro10,2   ivy bridge(m)      hd 4000 (13")                         mac-afd8a9d944ea4843   10.8.2 (12c2034)\nmacbookpro11,1   haswell(u)         iris 5100 (13")                       mac-189a3d4f975d5ffc   10.9 (13a2093)      11.7.x\nmacbookpro11,2   haswell(hq)        iris pro 5200 (15")                   mac-3cbd00234e554e41   10.9 (13a3017)\nmacbookpro11,3   haswell(hq)        iris pro 5200/geforce gt 750m (15")   mac-2bd1b31983fe1663   10.9 (13a3017)\nmacbookpro11,4   haswell(hq)        iris pro 5200 (15")                   mac-06f11fd93f0323c5   10.10.3 (14d2134)   12.6.x\nmacbookpro11,5   haswell(hq)        iris pro 5200/radeon r9 m370x (15")   mac-06f11f11946d27c5   10.10.3 (14d2134)\nmacbookpro12,1   broadwell(u)       iris 6100 (13")                       mac-e43c1c25d4880ad6   10.10.2 (14c2507)\nmacbookpro13,1   skylake(u)         iris 540 (13")                        mac-473d31eabeb93f9b   10.12 (16a2323a)\nmacbookpro13,2   skylake(u)         iris 550 (13")                        mac-66e35819ee2d0d05   10.12.1 (16b2657)\nmacbookpro13,3   skylake(h)         hd 530/radeon pro 450 (15")           mac-a5c67f76ed83108c   10.12.1 (16b2659)\nmacbookpro14,1   kaby lake(u)       iris plus 640 (13")                   mac-b4831cebd52a0c4c   10.12.5 (16f2073)   current\nmacbookpro14,2   kaby lake(u)       iris plus 650 (13")                   mac-cad6701f7cea0921   10.12.5 (16f2073)\nmacbookpro14,3   kaby lake(h)       hd 630/radeon pro 555 (15")           mac-551b86e5744e2388   10.12.5 (16f2073)\nmacbookpro15,1   coffee lake(h)     uhd 630/radeon pro 555x (15")         mac-937a206f2ee63c01   10.13.6 (17g2112)\nmacbookpro15,2   coffee lake(u)     iris plus 655 (13")                   mac-827fb448e656ec26   10.13.6 (17g2112)\nmacbookpro15,3   coffee lake(h)     uhd 630/radeon pro vega 16 (15")      mac-1e7e29ad0135f9bc   10.14.1 (18b3094)\nmacbookpro15,4   coffee lake(u)     iris plus 645 (13")                   mac-53fdb3d8db8ca971   10.14.5 (18f2058)\nmacbookpro16,1   coffee lake(h)     uhd 630/radeon pro 5300 (16")         mac-e1008331fdc96864   10.15.1 (19b2093)\nmacbookpro16,2   ice lake(u)        iris plus g4/g7 (13")                 mac-5f9802efe386aa28   10.15.4 (19e2269)\nmacbookpro16,3   coffee lake(u)     iris plus 645 (13")                   mac-e7203c0f68aa0004   10.15.4 (19e2269)\nmacbookpro16,4   coffee lake(h)     uhd 630/radeon pro 5600m (16")        mac-a61bade1fdad7b05   10.15.1 (19b2093)\n\n\n# mac mini\n\nsmbios       cpu family         gpu                    board-id               initial support    last supported version\nmacmini1,1   yonah(m)           gma 950                mac-f4208ec8           10.4.5 (8h1619)    10.6.8\nmacmini2,1   merom(m)           gma 950                mac-f4208eaa           10.4.10 (8r3014)   10.7.5\nmacmini3,1   penryn(m)          geforce 9400m          mac-f22c86c8           10.5.6 (9g2030)    10.11.6\nmacmini4,1   penryn(m)          geforce 320m           mac-f2208ec8           10.6.4 (10f2025)   10.13.6\nmacmini5,1   sandy bridge(m)    hd 3000                mac-8ed6af5b48c039e1   10.7 (11a2061)\nmacmini5,2   sandy bridge(m)    radeon hd 6630m        mac-4bc72d62ad45599e   10.7 (11a2061)\nmacmini5,3   sandy bridge(qm)   hd 3000                mac-7ba5b2794b2cdb12   10.7 (11a2061)\nmacmini6,1   ivy bridge(m)      hd 4000                mac-031aee4d24bff0b1   10.8.1 (12b2080)   10.15.7\nmacmini6,2   ivy bridge(qm)     hd 4000                mac-f65ae981ffa204ed   10.8.1 (12b2080)\nmacmini7,1   haswell(u)         hd 5000 or iris 5100   mac-35c5e08120c7eeaf   10.10 (14a389)     12.6.x\nmacmini8,1   coffee lake(h)     uhd 630                mac-7ba5b2dfe22ddd8c   10.14 (18a2063)    current\n\n\n# imac\n\nsmbios     cpu family        gpu                        board-id                                      initial support     last supported version\nimac4,1    yonah(m)          radeon x1600               mac-f42786c8                                  10.4.4 (8g1165)     10.6.8\nimac4,2    yonah(m)          gma 950                    mac-f4218ec8                                  10.4.7 (8i2057)\nimac5,1    merom(m)          radeon x1600               mac-f4228ec8                                  10.4.7 (8k1106)     10.7.5\nimac5,2    merom(m)          gma 950                    mac-f4218ec8                                  10.4.7 (8k1106)\nimac6,1    merom(m)          geforce 7300gt             mac-f4218fc8                                  10.4.7 (8k1123)\nimac7,1    merom(m)          radeon hd 2400 xt          mac-f42386c8                                  10.4.10 (8r4031)    10.11.6\nimac8,1    penryn(m)         radeon hd 2400 xt          mac-f227bec8                                  10.5.2 (9c2028)\nimac9,1    penryn(m)         geforce 9400m              mac-f2218fa9                                  10.5.6 (9g2030)\nimac10,1   wolfdale(s)       geforce 9400m              mac-f221dcc8                                  10.6.1 (10a2155)    10.13.6\nimac10,1   wolfdale(s)       radeon hd 4670             mac-f2268cc8                                  10.6.1 (10a2155)\nimac11,1   lynnfield(s)      radeon hd 4850             mac-f2268dae                                  10.6.2 (10c2234)\nimac11,2   clarkdale(s)      radeon hd 4670             mac-f2238ac8                                  10.6.3 (10d2322a)\nimac11,3   clarkdale(s)      radeon hd 5670             mac-f2238bae                                  10.6.3 (10d2322a)\nimac12,1   sandy bridge(s)   radeon hd 6750m            mac-942b5bf58194151b                          10.6.6 (10j4026)\nimac12,2   sandy bridge(s)   radeon hd 6770m            mac-942b59f58194171b                          10.6.6 (10j4026)\nimac13,1   ivy bridge(s)     geforce gt 640m            mac-00be6ed71e35eb86                          10.8.2 (12c3104)    10.15.7\nimac13,1   ivy bridge(s)     hd 4000                    mac-00be6ed71e35eb86                          10.8.2 (12c3104)\nimac13,2   ivy bridge(s)     geforce gtx 660m           mac-fc02e91ddd3fa6a4                          10.8.2 (12c2037)\nimac13,3   ivy bridge(s)     hd 4000                    mac-7df2a3b5e5d671ed                          10.8.2 (12c2037)\nimac14,1   haswell(s)        iris pro 5200              mac-031b6874cf7f642a                          10.8.4 (12e4022)\nimac14,2   haswell(s)        geforce gt 750m            mac-27adbb7b4cee8e61                          10.8.4 (12e4022)\nimac14,3   haswell(s)        geforce gt 755m            mac-77eb7d7daf985301                          10.8.4 (12e4022)\nimac14,4   haswell(u)        hd 5000                    mac-81e3e92dd6088272                          10.9.3 (13d2061)    11.7.x\nimac15,1   haswell(s)        radeon r9 m290x            mac-42fd25eabcabb274                          10.10 (14a389)\nimac16,1   broadwell(u)      hd 6000 or iris pro 6200   mac-a369ddc4e67f1c45                          10.11 (15a2301)     12.6.x\nimac16,2   broadwell(s)      iris pro 6200              mac-ffe5ef870d7ba81a                          10.11 (15a2301)\nimac17,1   skylake(s)        radeon r9 m380             mac-db15bd556843c820, mac-65ce76090165799a,   10.11 (15a4310)\n                                                        mac-b809c3757da9bb8d\nimac18,1   kaby lake(u)      iris plus 640              mac-4b682c642b45593e                          10.12.4 (16e2193)   current\nimac18,2   kaby lake(s)      radeon pro 555             mac-77f17d7da9285301                          10.12.4 (16f2073)\nimac18,3                     radeon pro 570             mac-be088af8c5eb4fa2                          10.12.4 (16f2073)\nimac19,1   coffee lake(s)    radeon pro 570x            mac-aa95b1ddab278b95                          10.14.4 (18e226)\nimac19,2                     radeon pro 555x            mac-63001698e7a34814                          10.14.4 (18e226)\nimac20,1   comet lake(s)     radeon pro 5300            mac-cff7d910a743caaf                          10.15.6 (19g2005)\nimac20,2                                                mac-af89b6d9451a490b                          10.15.6 (19g2005)\n\n\n# imac pro\n\nsmbios       cpu family   gpu       board-id               initial support     last supported version\nimacpro1,1   skylake-w    vega 56   mac-7ba5b2d9e42ddd94   10.13.2 (17c2111)   current\n\n\n# mac pro\n\nsmbios      cpu family       gpu                 board-id               initial support    last supported version\nmacpro1,1   woodcrest        geforce 7300 gt     mac-f4208dc8           10.4.7 (8k1079)    10.7.5\nmacpro2,1   clovertown                           mac-f4208da9           10.4.9 (8p4037)\nmacpro3,1   harpertown       radeon hd 2600 xt   mac-f42c88c8           10.5.1 (9b2117)    10.11.6\nmacpro4,1   nehalem          geforce gt 120      mac-f221bec8           10.5.6 (9g3553)\nmacpro5,1   nehalem          radeon hd 5770      mac-f221bec8           10.6.4 (10f2521)   10.14.6\nmacpro5,1   westmere ep                          mac-f221bec8           10.6.4 (10f2521)\nmacpro6,1   ivy bridge ep    firepro d300        mac-f60deb81ff30acf6   10.9.1 (13b4116)   12.6.x\nmacpro7,1   cascade lake-w   radeon pro 580x     mac-27ad2f918ae68f61   10.15.0 (19a583)   current\n\n\n# xserve\n\nsmbios      cpu family   gpu              board-id       initial support          last supported version\nxserve1,1   woodcrest    radeon x1300     mac-f4208ac8   server 10.4.8 (8n1215)   server 10.7.5\nxserve2,1   harpertown                    mac-f42289c8   server 10.5 (9b2117)\nxserve3,1   nehalem ep   geforce gt 120   mac-f223bec8   server 10.5.6            10.11.6\n\n\n# miscellaneous smbios\n\nall models listed below are not supported by opencore however are documented here for ease of reference.\n\n * apple development platforms\n   * developer transition kit\n * apple silicon\n   * mac mini\n   * macbook air\n   * macbook pro\n   * imac\n * powerpc\n   * powerbook\n   * ibook\n   * powermac\n   * imac\n   * emac\n   * cube\n   * mac mini\n   * xserve\n\napple silicon notes\n\nextra information regarding apple\'s cpus:\n\n * they do not rely on acpi or uefi\n * they do not include deviceproperties in their firmware\n * they use ipad8,6 for ios/ipados applications\n * board-id is only applicable with intel macs, powerpc and arm do not have this entry\n\n# developer transition kit\n\nsmbios   year       cpu family       product identifier   initial support\nadp2,1   mid 2005   intel prescott   n/a                  10.4.1 (8b1025)\nadp3,2   mid 2020   apple a12z       j273                 11.0.0 (20a5299w)\n\n# mac mini - apple silicon\n\nsmbios       year        cpu family   product identifier   initial support\nmacmini9,1   late 2020   apple m1     j274                 11.0.0 (20a2411)\n\n# macbook air - apple silicon\n\nsmbios           year        cpu family   product identifier   initial support\nmacbookair10,1   late 2020   apple m1     j313                 11.0.0 (20a2411)\n\n# macbook pro - apple silicon\n\nsmbios           year        cpu family   product identifier   initial support\nmacbookpro17,1   late 2020   apple m1     j293                 11.0.0 (20a2411)\n\n# imac - apple silicon\n\nsmbios     year       cpu family   product identifier   initial support\nimac21,1   mid 2021   apple m1     j256                 11.3 (20e232?)\nimac21,2   mid 2021   apple m1     j257                 11.3 (20e232?)\n\npower pc smbios table\n\n\n# powerbook - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowerbook1,1   mid-1999     powerpc 750 (g3)     8.6               10.3.9\npowerbook3,1   early 2000                        9.0.2             10.4.11\npowerbook3,2   early 2001   powerpc 7410 (g4)    9.1\npowerbook3,3   late 2001    powerpc 7440 (g4)    9.2.1\npowerbook3,4   mid-2002     powerpc 7451 (g4)    9.2.2\npowerbook3,5   late 2002    powerpc 7455 (g4)                      10.5.8\npowerbook5,1   early 2003                        10.2.4\npowerbook5,2   late 2003    powerpc 7447 (g4)    10.2.7\npowerbook5,3\npowerbook5,4   mid-2004     powerpc 7447a (g4)   10.3.3\npowerbook5,5\npowerbook5,6   early 2005   10.3.7\npowerbook5,7\npowerbook5,8   late 2005                         10.4.2\npowerbook5,9\npowerbook6,1   early 2003   powerpc 7455 (g4)    10.2.3\npowerbook6,2\npowerbook6,4   mid-2004     powerpc 7447a (g4)   10.2.7\npowerbook6,8   early 2005                        10.3.7\n\n# ibook - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowerbook2,1   mid-1999     powerpc 750 (g3)     8.6               10.3.9\npowerbook2,2   late 2000    powerpc 750cx (g3)   9.0.4             10.4.11\npowerbook4,1   late 2002    powerpc 7455 (g4)    9.2.2             10.5.8\npowerbook4,2   early 2002   powerpc 750cx (g3)   9.2.1             10.4.11\npowerbook4,3   mid-2002     powerpc 750fx (g3)   9.2.2\npowerbook6,3   late 2003    powerpc 7457 (g4)    10.3 (7b85)\npowerbook6,5   mid-2004     powerpc 7447a (g4)   10.3.3 (7g51)     10.5.8\npowerbook6,7   mid-2005                          10.4.2 (8d37)\n\n# powermac - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowermac1,1    early 1999   powerpc 750 (g3)     8.5.1             10.4.11\npowermac1,2    mid 1999     powerpc 7400 (g4)    8.6\npowermac3,1\npowermac3,2    mid-2001     powerpc 7450 (g4)    9.2\npowermac3,3    mid-2000     powerpc 7400 (g4)    9.0.4\npowermac3,4    early 2001   powerpc 7410 (g4)    9.1\npowermac3,5    mid-2001     powerpc 7450 (g4)    9.2               10.5.8\npowermac3,6    mid-2002     powerpc 7455 (g4)    9.2.2\npowermac7,2    mid-2003     powerpc 970 (g5)     10.2.7\npowermac7,3    early-2005   powerpc 970fx (g5)   10.4\npowermac9,1    late 2004                         10.3.5 (8e90)\npowermac11,2   late 2005    powerpc 970mp (g5)   10.4.2\n\n# imac - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\nimac,1         mid 1998     powerpc 750 (g3)     8.1               10.3.9\npowermac2,1    late 1999                         8.6               10.4.11\npowermac2,2    mid 2000                          9.0.4             10.3.9\npowermac4,1    early 2001   powerpc 750cx (g3)   9.1               10.4.11\npowermac4,2    early 2002   powerpc 7441 (g4)    9.2.2\npowermac4,5    mid-2002     powerpc 7445 (g4)    9.2.2\npowermac6,1    early 2003                        10.2.3            10.5.8\npowermac6,3    late 2003                         10.3.1\npowermac8,1    mid-2004     powerpc 970 (g5)     10.3.5 (7p35)\npowermac8,2    mid-2005                          10.4 (8a428)\npowermac12,1   late 2005    powerpc 970fx (g5)   10.4.2 (8e102)\n\n# emac - powerpc\n\nsmbios        year         cpu family           initial support   last supported version\npowermac4,4   mid-2003     powerpc 7445 (g4     9.2.2             10.5.8\npowermac6,4   early 2004   powerpc 7447a (g4)   10.3.3\n\n# cube - powerpc\n\nsmbios        year       cpu family          initial support   last supported version\npowermac5,1   mid-2000   powerpc 7400 (g4)   9.0.4             10.4.11\npowermac5,2\n\n# mac mini - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowermac10,1   early 2005   powerpc 7447a (g4)   10.3.7 (7t11)     10.5.8\npowermac10,2   late 2005                         10.4.2 (8d40)\n\n# xserve - powerpc\n\nsmbios       year         cpu family           initial support   last supported version\nrackmac1,1   mid-2002     powerpc 7455 (g4)    10.1.5 (6c115)    server 10.5.8\nrackmac1,2   early 2003                        10.2.4 (6i34)\nrackmac3,1   early 2004   powerpc 970fx (g5)   10.3.0',charsets:{}},{title:"Selecting the right SMBIOS",frontmatter:{search:!1},regularPath:"/extras/smbios.html",relativePath:"extras/smbios.md",key:"v-3a21b4ad",path:"/extras/smbios.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# Selecting the right SMBIOS\n\nPage has been moved here: Choosing the right SMBIOS",normalizedContent:"# selecting the right smbios\n\npage has been moved here: choosing the right smbios",charsets:{}},{title:"Disabling GPU",frontmatter:{},regularPath:"/extras/spoof.html",relativePath:"extras/spoof.md",key:"v-655aff7f",path:"/extras/spoof.html",headers:[{level:3,title:"Boot Flag",slug:"boot-flag",normalizedTitle:"boot flag",charIndex:223},{level:3,title:"DeviceProperties Method",slug:"deviceproperties-method",normalizedTitle:"deviceproperties method",charIndex:645},{level:3,title:"SSDT Method",slug:"ssdt-method",normalizedTitle:"ssdt method",charIndex:1125},{level:2,title:"Windows GPU Selection",slug:"windows-gpu-selection",normalizedTitle:"windows gpu selection",charIndex:2282}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Boot Flag DeviceProperties Method SSDT Method Windows GPU Selection",content:'# Disabling GPU\n\nSo you need to hide your unsupported GPU? Well with OpenCore things are slightly different, specifically that we need to specify to which exact device we want to spoof. There are 3 ways we can do this:\n\n * Boot Flag\n   * Disables all GPUs except the iGPU\n * DeviceProperties\n   * Disables GPU on a per-slot basis\n * SSDT\n   * Disables GPU on a per-slot basis\n\nCSM must be off in the BIOS for the spoofing to work correctly, especially on AMD CPU based systems.\n\n\n# Boot Flag\n\nBy far the simplest way, all you need to do is add the following boot-arg:\n\n-wegnoegpu\n\nDo note that this will disable all GPUs excluding the iGPU.\n\n\n# DeviceProperties Method\n\nHere is quite simple, find the PCI route with gfxutil and then create a new DeviceProperties section with your spoof:\n\npath/to/gfxutil -f GFX0\n\n\nAnd the output will result in something similar:\n\nDevicePath = PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\nWith this, navigate towards Root -> DeviceProperties -> Add and add your PCI route with the following properties:\n\nKEY           TYPE      VALUE\ndisable-gpu   Boolean   True\n\n\n\n\n# SSDT Method\n\nThere are many ways to find the path but generally, the easiest way is to get into Device Manager under windows and find the PCI path.\n\nExample of device path for \\_SB.PCI0.PEG0.PEGP:\n\n\n    DefinitionBlock ("", "SSDT", 2, "DRTNIA", "spoof", 0x00000000)\n    {\n       External (_SB_.PCI0.PEG0.PEGP, DeviceObj)\n\n       Method (_SB.PCI0.PEG0.PEGP._DSM, 4, NotSerialized)\n       {\n          If ((!Arg2 || !(_OSI ("Darwin"))))\n          {\n             Return (Buffer (One)\n             {\n                0x03\n             })\n          }\n\n          Return (Package (0x0A)\n          {\n             "name",\n             Buffer (0x09)\n             {\n                "#display"\n             },\n\n             "IOName",\n             "#display",\n             "class-code",\n             Buffer (0x04)\n             {\n                0xFF, 0xFF, 0xFF, 0xFF\n             },\n          })\n       }\n    }\n\n\n\nA copy of this SSDT can be found here: Spoof-SSDT.dsl. You will need MaciASL to compile this. Remember that .aml is assembled and .dsl is source code. You can compile with MaciASL by selecting File -> Save As -> ACPI Machine Language.\n\nSource: CorpNewt\n\n\n# Windows GPU Selection\n\nDepending on your setup, you may find that Windows renders games or applications using an undesired GPU.\n\nMany users only have two GPUs. NVIDIA and the Intel HD/UHD IGPU. Since NVIDIA no longer works on macOS, they may have the monitor plugged into the motherboards HDMI/DP connection for convenience. As a result, Windows will render all games and applications through the IGPU. You can reroute a specific game or application to a different GPU by going to: Settings > System > Display > Graphics settings\n\n\n\nThe rendered game or application will have its buffer copied to the IGPU. Which is then displayed to you. This does come with a few downsides:\n\n * GSync will no longer work.\n * NVIDIA settings can no longer be opened. This requires the display to be connected to the GPU\n * Decreased frame rate.\n * Increased input latency.\n * Refresh rate cap.\n\nIf your motherboard only has an HDMI connector for the iGPU, the maximum refresh rate for spec 2.1 is 120Hz. This assumes your board and monitor are of the same spec. This means your 144Hz monitor is only seeing a maximum of 120Hz as determined by the hardware. This limitation does not apply if your board has a DP connector for the IGPU.\n\nIf you have more than two GPUs (AMD, NVIDIA and Intel), this setting is limited. A monitor connected to the AMD GPU means Windows will only allow you to select the AMD GPU or the Intel IGPU. The NVIDIA GPU will not show. In a future version of Windows, this limitation is removed.\n\nAs a recommendation, if you use both operating systems equally and prefer no downsides, your best option is an HDMI or DP switch.',normalizedContent:'# disabling gpu\n\nso you need to hide your unsupported gpu? well with opencore things are slightly different, specifically that we need to specify to which exact device we want to spoof. there are 3 ways we can do this:\n\n * boot flag\n   * disables all gpus except the igpu\n * deviceproperties\n   * disables gpu on a per-slot basis\n * ssdt\n   * disables gpu on a per-slot basis\n\ncsm must be off in the bios for the spoofing to work correctly, especially on amd cpu based systems.\n\n\n# boot flag\n\nby far the simplest way, all you need to do is add the following boot-arg:\n\n-wegnoegpu\n\ndo note that this will disable all gpus excluding the igpu.\n\n\n# deviceproperties method\n\nhere is quite simple, find the pci route with gfxutil and then create a new deviceproperties section with your spoof:\n\npath/to/gfxutil -f gfx0\n\n\nand the output will result in something similar:\n\ndevicepath = pciroot(0x0)/pci(0x1,0x0)/pci(0x0,0x0)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\nwith this, navigate towards root -> deviceproperties -> add and add your pci route with the following properties:\n\nkey           type      value\ndisable-gpu   boolean   true\n\n\n\n\n# ssdt method\n\nthere are many ways to find the path but generally, the easiest way is to get into device manager under windows and find the pci path.\n\nexample of device path for \\_sb.pci0.peg0.pegp:\n\n\n    definitionblock ("", "ssdt", 2, "drtnia", "spoof", 0x00000000)\n    {\n       external (_sb_.pci0.peg0.pegp, deviceobj)\n\n       method (_sb.pci0.peg0.pegp._dsm, 4, notserialized)\n       {\n          if ((!arg2 || !(_osi ("darwin"))))\n          {\n             return (buffer (one)\n             {\n                0x03\n             })\n          }\n\n          return (package (0x0a)\n          {\n             "name",\n             buffer (0x09)\n             {\n                "#display"\n             },\n\n             "ioname",\n             "#display",\n             "class-code",\n             buffer (0x04)\n             {\n                0xff, 0xff, 0xff, 0xff\n             },\n          })\n       }\n    }\n\n\n\na copy of this ssdt can be found here: spoof-ssdt.dsl. you will need maciasl to compile this. remember that .aml is assembled and .dsl is source code. you can compile with maciasl by selecting file -> save as -> acpi machine language.\n\nsource: corpnewt\n\n\n# windows gpu selection\n\ndepending on your setup, you may find that windows renders games or applications using an undesired gpu.\n\nmany users only have two gpus. nvidia and the intel hd/uhd igpu. since nvidia no longer works on macos, they may have the monitor plugged into the motherboards hdmi/dp connection for convenience. as a result, windows will render all games and applications through the igpu. you can reroute a specific game or application to a different gpu by going to: settings > system > display > graphics settings\n\n\n\nthe rendered game or application will have its buffer copied to the igpu. which is then displayed to you. this does come with a few downsides:\n\n * gsync will no longer work.\n * nvidia settings can no longer be opened. this requires the display to be connected to the gpu\n * decreased frame rate.\n * increased input latency.\n * refresh rate cap.\n\nif your motherboard only has an hdmi connector for the igpu, the maximum refresh rate for spec 2.1 is 120hz. this assumes your board and monitor are of the same spec. this means your 144hz monitor is only seeing a maximum of 120hz as determined by the hardware. this limitation does not apply if your board has a dp connector for the igpu.\n\nif you have more than two gpus (amd, nvidia and intel), this setting is limited. a monitor connected to the amd gpu means windows will only allow you to select the amd gpu or the intel igpu. the nvidia gpu will not show. in a future version of windows, this limitation is removed.\n\nas a recommendation, if you use both operating systems equally and prefer no downsides, your best option is an hdmi or dp switch.',charsets:{cjk:!0}},{title:"macOS 13: Ventura",frontmatter:{},regularPath:"/extras/ventura.html",relativePath:"extras/ventura.md",key:"v-4694779a",path:"/extras/ventura.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:24},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:69},{level:3,title:"Dropped CPU Support",slug:"dropped-cpu-support",normalizedTitle:"dropped cpu support",charIndex:88},{level:3,title:"Supported SMBIOS",slug:"supported-smbios",normalizedTitle:"supported smbios",charIndex:113},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:135},{level:3,title:"AMD Patches",slug:"amd-patches",normalizedTitle:"amd patches",charIndex:159}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Table of Contents Prerequisites Dropped CPU Support Supported SMBIOS Supported hardware AMD Patches",content:"# macOS 13: Ventura\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * Dropped CPU Support\n   * Supported SMBIOS\n   * Supported hardware\n   * AMD Patches\n\n\n\n\n# Prerequisites\n\n\n# Dropped CPU Support\n\nmacOS Ventura drops support for pre-Haswell CPUs. Much of userspace now requires AVX2 support, along with AMD Polaris GPU drivers and some instances of AVX2 instructions in some kexts. Although the kexts can be patched or downgraded, the Polaris GPU drivers and most of userspace rely on AVX2 too much to be able to be patched.\n\nApple has left a dyld cache that does not use AVX2 instructions in Ventura to support Rosetta on Apple Silicon machines, but this cache is not installed by default. You can use CryptexFixup to force this dyld cache to be installed, but:\n\n * Apple may remove this cache at any time in the future if they add AVX2 support to Rosetta\n * Delta updates (small 1-3GB updates) will no longer be available and you must install the full update (12GB), as delta updates only contain the non-AVX2 cache on Apple Silicon machines\n * Polaris GPUs remain unsupported on machines without AVX2\n\nBecause of these caveats, Dortania will no longer be supporting pre-Haswell CPUs for Ventura and above. The pages for these CPUs will remain updated for Monterey.\n\n\n# Supported SMBIOS\n\nSMBIOS dropped in Ventura:\n\n * iMac17,x and older\n * Macmini7,1 and older\n * MacBook9,1 and older\n * MacBookAir7,x and older\n * MacBookPro13,x and older\n * MacPro6,1 and older\n\nIf your SMBIOS was supported in Monterey and is not included above, you're good to go!\n\nSupported SMBIOS\n * iMac18,x and newer\n * MacPro7,1 and newer\n * iMacPro1,1 and newer\n * Macmini8,1\n * MacBook10,1\n * MacBookAir8,1 and newer\n * MacBookPro14,x and newer\n\nClick here for a full list of supported SMBIOS.\n\nFor those on architectures no longer supported by Ventura:\n\n * All desktops with dGPUs should use iMac18,2, MacPro7,1 or iMacPro1,1. Unsupported GPUs still require OCLP, while supported GPUs do not.\n * All desktops with unsupported iGPUs should use iMac18,1.\n * All unsupported laptops (Haswell, Broadwell, Skylake) should use MacBookPro14,1.\n\n\n# Supported hardware\n\nDropped GPU Hardware:\n\n * Haswell (HD 4200/4400/4600/5000/P4600/P4700, Iris 5100, Iris Pro 5200)\n\n * Broadwell (HD 5300/5500/5600/6000/P5700, Iris 6100, Iris Pro 6200/P6300)\n\n * Skylake (HD 5xx/P5xx, Iris 5xx, Iris Pro 5xx/P5xx)\n   \n   * Skylake can be spoofed as Kaby Lake with WhateverGreen v1.6.1 and up\n   * Change your device-id and AAPL,ig-platform-id to the most similar Kaby Lake model\n   * If using the same EFI to boot Monterey and below, add -igfxsklaskbl to your boot args\n\n * You can use OpenCore-Legacy-Patcher to add back support\n   \n   * No support is provided for Hackintoshes using OCLP!\n   * You will lose access to non-full updates (Small 1-3GB updates)\n   * Requires SIP, Apple Secure Boot, and AMFI disabled.\n\n\n# AMD Patches\n\nFor those on AMD CPUs, make sure to update your kernel patches for Ventura. Don't forget to update your patches as well with the core count of your CPU. The patches which need to be edited are all named algrey - Force cpuid_cores_per_package, and you only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40",normalizedContent:"# macos 13: ventura\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * dropped cpu support\n   * supported smbios\n   * supported hardware\n   * amd patches\n\n\n\n\n# prerequisites\n\n\n# dropped cpu support\n\nmacos ventura drops support for pre-haswell cpus. much of userspace now requires avx2 support, along with amd polaris gpu drivers and some instances of avx2 instructions in some kexts. although the kexts can be patched or downgraded, the polaris gpu drivers and most of userspace rely on avx2 too much to be able to be patched.\n\napple has left a dyld cache that does not use avx2 instructions in ventura to support rosetta on apple silicon machines, but this cache is not installed by default. you can use cryptexfixup to force this dyld cache to be installed, but:\n\n * apple may remove this cache at any time in the future if they add avx2 support to rosetta\n * delta updates (small 1-3gb updates) will no longer be available and you must install the full update (12gb), as delta updates only contain the non-avx2 cache on apple silicon machines\n * polaris gpus remain unsupported on machines without avx2\n\nbecause of these caveats, dortania will no longer be supporting pre-haswell cpus for ventura and above. the pages for these cpus will remain updated for monterey.\n\n\n# supported smbios\n\nsmbios dropped in ventura:\n\n * imac17,x and older\n * macmini7,1 and older\n * macbook9,1 and older\n * macbookair7,x and older\n * macbookpro13,x and older\n * macpro6,1 and older\n\nif your smbios was supported in monterey and is not included above, you're good to go!\n\nsupported smbios\n * imac18,x and newer\n * macpro7,1 and newer\n * imacpro1,1 and newer\n * macmini8,1\n * macbook10,1\n * macbookair8,1 and newer\n * macbookpro14,x and newer\n\nclick here for a full list of supported smbios.\n\nfor those on architectures no longer supported by ventura:\n\n * all desktops with dgpus should use imac18,2, macpro7,1 or imacpro1,1. unsupported gpus still require oclp, while supported gpus do not.\n * all desktops with unsupported igpus should use imac18,1.\n * all unsupported laptops (haswell, broadwell, skylake) should use macbookpro14,1.\n\n\n# supported hardware\n\ndropped gpu hardware:\n\n * haswell (hd 4200/4400/4600/5000/p4600/p4700, iris 5100, iris pro 5200)\n\n * broadwell (hd 5300/5500/5600/6000/p5700, iris 6100, iris pro 6200/p6300)\n\n * skylake (hd 5xx/p5xx, iris 5xx, iris pro 5xx/p5xx)\n   \n   * skylake can be spoofed as kaby lake with whatevergreen v1.6.1 and up\n   * change your device-id and aapl,ig-platform-id to the most similar kaby lake model\n   * if using the same efi to boot monterey and below, add -igfxsklaskbl to your boot args\n\n * you can use opencore-legacy-patcher to add back support\n   \n   * no support is provided for hackintoshes using oclp!\n   * you will lose access to non-full updates (small 1-3gb updates)\n   * requires sip, apple secure boot, and amfi disabled.\n\n\n# amd patches\n\nfor those on amd cpus, make sure to update your kernel patches for ventura. don't forget to update your patches as well with the core count of your cpu. the patches which need to be edited are all named algrey - force cpuid_cores_per_package, and you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40",charsets:{}},{title:"尋找你的硬體",frontmatter:{},regularPath:"/find-hardware.html",relativePath:"find-hardware.md",key:"v-3730ed66",path:"/find-hardware.html",headers:[{level:2,title:"使用 Windows 尋找硬體",slug:"使用-windows-尋找硬體",normalizedTitle:"使用 windows 尋找硬體",charIndex:151},{level:3,title:"CPU 型號",slug:"cpu-型號",normalizedTitle:"cpu 型號",charIndex:172},{level:3,title:"GPU 型號",slug:"gpu-型號",normalizedTitle:"gpu 型號",charIndex:184},{level:3,title:"芯片組 型號",slug:"芯片組-型號",normalizedTitle:"芯片組 型號",charIndex:196},{level:3,title:"鍵盤、觸控板和輕觸屏幕的連接類型",slug:"鍵盤、觸控板和輕觸屏幕的連接類型",normalizedTitle:"鍵盤、觸控板和輕觸屏幕的連接類型",charIndex:208},{level:3,title:"音訊編解碼器",slug:"音訊編解碼器",normalizedTitle:"音訊編解碼器",charIndex:230},{level:3,title:"網路介面控制器型號",slug:"網路介面控制器型號",normalizedTitle:"網路介面控制器型號",charIndex:242},{level:3,title:"硬碟型號",slug:"硬碟型號",normalizedTitle:"硬碟型號",charIndex:257},{level:2,title:"使用 Linux 尋找硬體",slug:"使用-linux-尋找硬體",normalizedTitle:"使用 linux 尋找硬體",charIndex:265},{level:3,title:"CPU 型號",slug:"cpu-型號-2",normalizedTitle:"cpu 型號",charIndex:172},{level:3,title:"GPU 型號",slug:"gpu-型號-2",normalizedTitle:"gpu 型號",charIndex:184},{level:3,title:"芯片組 型號",slug:"芯片組-型號-2",normalizedTitle:"芯片組 型號",charIndex:196},{level:3,title:"鍵盤、觸控板和輕觸屏幕的連接類型",slug:"鍵盤、觸控板和輕觸屏幕的連接類型-2",normalizedTitle:"鍵盤、觸控板和輕觸屏幕的連接類型",charIndex:208},{level:3,title:"音訊編解碼器",slug:"音訊編解碼器-2",normalizedTitle:"音訊編解碼器",charIndex:230},{level:3,title:"網路介面控制器型號",slug:"網路介面控制器型號-2",normalizedTitle:"網路介面控制器型號",charIndex:242},{level:3,title:"硬碟型號",slug:"硬碟型號-2",normalizedTitle:"硬碟型號",charIndex:257},{level:2,title:"使用 OCSysInfo 尋找硬體",slug:"使用-ocsysinfo-尋找硬體",normalizedTitle:"使用 ocsysinfo 尋找硬體",charIndex:377},{level:3,title:"探索硬體",slug:"探索硬體",normalizedTitle:"探索硬體",charIndex:400},{level:3,title:"CPU 型號",slug:"cpu-型號-3",normalizedTitle:"cpu 型號",charIndex:172},{level:3,title:"GPU 型號",slug:"gpu-型號-3",normalizedTitle:"gpu 型號",charIndex:184},{level:3,title:"鍵盤和觸控板的連接類型",slug:"鍵盤和觸控板的連接類型",normalizedTitle:"鍵盤和觸控板的連接類型",charIndex:434},{level:3,title:"音訊編解碼器",slug:"音訊編解碼器-3",normalizedTitle:"音訊編解碼器",charIndex:230},{level:3,title:"網路介面控制器型號",slug:"網路介面控制器型號-3",normalizedTitle:"網路介面控制器型號",charIndex:242},{level:3,title:"硬碟型號",slug:"硬碟型號-3",normalizedTitle:"硬碟型號",charIndex:257}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"使用 Windows 尋找硬體 CPU 型號 GPU 型號 芯片組 型號 鍵盤、觸控板和輕觸屏幕的連接類型 音訊編解碼器 網路介面控制器型號 硬碟型號 使用 Linux 尋找硬體 CPU 型號 GPU 型號 芯片組 型號 鍵盤、觸控板和輕觸屏幕的連接類型 音訊編解碼器 網路介面控制器型號 硬碟型號 使用 OCSysInfo 尋找硬體 探索硬體 CPU 型號 GPU 型號 鍵盤和觸控板的連接類型 音訊編解碼器 網路介面控制器型號 硬碟型號",content:'# 尋找你的硬體\n\n本章主要講述如何尋找目前使用中的硬體的迷你指南；這主要與筆記型電腦和預先組裝電腦用戶有關，因為這些電腦的硬體規格比較難以取得。如果你已經知道你的電腦的硬體，你可以略過本頁，直接了解如何製作 USB 開機隨身碟。\n\n我們假設你已經安裝了 Windows 或 Linux：\n\n\n\n * 使用 Windows 尋找硬體\n   * CPU 型號\n   * GPU 型號\n   * 芯片組 型號\n   * 鍵盤、觸控板和輕觸屏幕的連接類型\n   * 音訊編解碼器\n   * 網路介面控制器型號\n   * 硬碟型號\n * 使用 Linux 尋找硬體\n   * CPU 型號\n   * GPU 型號\n   * 芯片組 型號\n   * 鍵盤、觸控板和輕觸屏幕的連接類型\n   * 音訊編解碼器\n   * 網路介面控制器型號\n   * 硬碟型號\n * 使用 OCSysInfo 尋找硬體\n   * 探索硬體\n   * CPU 型號\n   * GPU 型號\n   * 鍵盤和觸控板的連接類型\n   * 音訊編解碼器\n   * 網路介面控制器型號\n   * 硬碟型號\n\n\n\n\n# 使用 Windows 尋找硬體\n\n我們主要有兩個選擇：\n\n * Windows 内置的裝置管理員\n * AIDA64\n\n由於使用 GUI 更容易，我們建議下載及執行 AIDA64，因為它更容易取得規格。然而我們將向你展示這兩種取得硬體規格的方法。\n\n\n# CPU 型號\n\nAIDA64   裝置管理員\n         \n\n\n# GPU 型號\n\nAIDA64   裝置管理員\n         \n\n\n# 芯片組 型號\n\nAIDA64   裝置管理員\n         \n\n * 注意：Intel 基於 SOC 的 CPU 會在同一個芯片上擁有芯片組和其他功能而不是專用芯片。這意味著嘗試準確檢測芯片組時會有困難\n\n\n# 鍵盤、觸控板和輕觸屏幕的連接類型\n\n裝置管理員\n\n\n不幸的是，AIDA64 無法提供任何關於指標裝置的有用資訊，因此我們建議使用裝置管理員。\n\n * 你可以找到以下這些裝置:\n   \n   * 人性化介面裝置\n   * 鍵盤\n   * 滑鼠及其他指標裝置\n\n * 要查看裝置確實的連接類型，請選擇指標裝置，然後按 檢視 -> 裝置（依連線）。這能確定裝置是否通過 PS2、I2C、SMBus 或 USB 等方式連接。\n\n根據裝置的不同，它可能會顯示在多個名稱和連接方式之下。主要需要關注的是：\n\nSMBus\n\n這些將顯示為獨立的 PCI 裝置，如 Synaptics SMBus Driver 或 ELAN SMBus Driver\n\n * 輕觸式裝置將顯示在 PS2 下的 Synaptics PS2 device/Synaptics Pointing Device 和 PCI 的 Synaptics SMBus Driver\n\n\n\n正如你所看到的，我們在左邊的圖片中有兩個 Synaptics 裝置，但是如果我們仔細地看，我們會看到頂部的裝置是 PS2，而底部的是 SMBus。雖然你可以在任何一種模式下使用觸控板，但 SMBus 通常提供更好的手勢支援和準確性。\n\nUSB\n\nDEVICE BY TYPE   DEVICE BY CONNECTION\n                 \n\n這些裝置會顯示為「PS2 相容的觸控板」。當我們將連接檢視表切換到 **裝置（依連線）** 時，亦會顯示在 USB之下\n\nI2C\n\n它們幾乎總是以微軟的 HID 裝置的形式顯示，不過也可能以其他觸控板的形式顯示。但它們總是在 I2C 下顯示。\n\n\n# 音訊編解碼器\n\nAIDA64   裝置管理員\n         \n\n由於某些 OEM 顯示裝置名稱的方式，你在裝置管理員取得的最準確資訊的方式是通過 PCI ID（例如 PCI 14F1,50F4）。這意味著你需要在 Google 搜尋 ID 並找出確實的裝置 ID；然而，AIDA64 可以正確地顯示名稱，這對終端用戶來說更容易理解。\n\n\n# 網路介面控制器型號\n\nAIDA64   裝置管理員\n         \n\n由於某些 OEM 顯示裝置名稱的方式，你在裝置管理員取得的最準確資訊的方式是通過 PCI ID（例如 PCI\\VEN_14E4&DEV_43A0 對應於 Vender ID 14E4 和 裝置 ID 43A0）。這意味著你需要在 Google 搜尋 ID 並找出確實的裝置 ID；然而，AIDA64 可以正確地顯示名稱，這對終端用戶來說更容易理解。\n\n\n# 硬碟型號\n\nAIDA64   裝置管理員\n         \n\n由於某些 OEM 不會提供有關硬碟的很多資訊，您將需要通過 Google 來確定與顯示名稱匹配的硬碟。\n\n\n# 使用 Linux 尋找硬體\n\n要使用 Linux 尋找硬體，我們將使用一些工具：\n\n * pciutils\n * dmidecode\n\n下面是要在終端上執行的命令列表，幸運的是，大多數 Linux 發行版已經安裝了這些工具。如果沒有，您可以在您的發行版的軟體套件管理系統中找到它們。\n\n\n# CPU 型號\n\ngrep -i "model name" /proc/cpuinfo\n\n\n\n# GPU 型號\n\nlspci | grep -i --color "vga\\|3d\\|2d"\n\n\n\n# 芯片組 型號\n\ndmidecode -t baseboard\n\n\n\n# 鍵盤、觸控板和輕觸屏幕的連接類型\n\ndmesg | grep -i input\n\n\n\n# 音訊編解碼器\n\naplay -l\n\n\n\n# 網路介面控制器型號\n\n基本資訊：\n\nlspci | grep -i network\n\n\n更多深入的資訊：\n\nlshw -class network\n\n\n\n# 硬碟型號\n\nlshw -class disk -class storage\n\n\n\n# 使用 OCSysInfo 尋找硬體\n\n有兩種取得和執行 OCSysInfo 的方法：\n\n * 預編譯二進制檔案\n * 手動克隆 儲存庫\n\n提示\n\n我們建議您下載預編譯的二進制檔案，因為這是最簡單的方法。\n\n如果您想了解關於手動克隆儲存庫的更多資訊，可以查看 OCSysInfo 迷你指南。\n\n\n# 探索硬體\n\n注意\n\n我們建議筆記型電腦用戶在開始之前，斷開任何外部 USB 裝置，因為這可能會導致收集的資訊模棱兩可或沒有必要，可能使你感到困惑。\n\n成功安裝並執行應用程式後，你應該看到以下界面：\n\n\n\n在這裡，你可以輸入 d 並按 ENTER/RETURN，然後，你應該會看到一個與下方類似的介面：\n\n\n\n\n# CPU 型號\n\n\n\n除了 CPU 型号，它還列出了 CPU 的世代、最高可支援的 SSE 版本和 SSSE3 的可用性。\n\n\n# GPU 型號\n\n\n\n在這種情況下，電腦有兩個 GPU：\n\n * iGPU (Intel UHD Graphics 630)\n * dGPU (AMD Radeon R9 390X)\n\n除了型號名稱，它還列出了 GPU 的代號、ACPI 和 PCI 路徑。在你的 hackintosh 過程之中，你可能很快就會發現這些代碼很有用。\n\n\n# 鍵盤和觸控板的連接類型\n\nSMBus 觸控板\n\n觸控板：SMBus\n鍵盤：PS/2\n\n圖片來源：ThatCopy\n\nI2C 觸控板\n\n觸控板：I2C\n鍵盤：PS/2\n\n圖片來源：Mahas\n\nPS/2 觸控板\n\n觸控板：PS/2\n鍵盤：PS/2\n\n圖片來源：Tasty0\n\n\n# 音訊編解碼器\n\n\n\n\n# 網路介面控制器型號\n\n\n\n\n# 硬碟型號\n\n',normalizedContent:'# 尋找你的硬體\n\n本章主要講述如何尋找目前使用中的硬體的迷你指南；這主要與筆記型電腦和預先組裝電腦用戶有關，因為這些電腦的硬體規格比較難以取得。如果你已經知道你的電腦的硬體，你可以略過本頁，直接了解如何製作 usb 開機隨身碟。\n\n我們假設你已經安裝了 windows 或 linux：\n\n\n\n * 使用 windows 尋找硬體\n   * cpu 型號\n   * gpu 型號\n   * 芯片組 型號\n   * 鍵盤、觸控板和輕觸屏幕的連接類型\n   * 音訊編解碼器\n   * 網路介面控制器型號\n   * 硬碟型號\n * 使用 linux 尋找硬體\n   * cpu 型號\n   * gpu 型號\n   * 芯片組 型號\n   * 鍵盤、觸控板和輕觸屏幕的連接類型\n   * 音訊編解碼器\n   * 網路介面控制器型號\n   * 硬碟型號\n * 使用 ocsysinfo 尋找硬體\n   * 探索硬體\n   * cpu 型號\n   * gpu 型號\n   * 鍵盤和觸控板的連接類型\n   * 音訊編解碼器\n   * 網路介面控制器型號\n   * 硬碟型號\n\n\n\n\n# 使用 windows 尋找硬體\n\n我們主要有兩個選擇：\n\n * windows 内置的裝置管理員\n * aida64\n\n由於使用 gui 更容易，我們建議下載及執行 aida64，因為它更容易取得規格。然而我們將向你展示這兩種取得硬體規格的方法。\n\n\n# cpu 型號\n\naida64   裝置管理員\n         \n\n\n# gpu 型號\n\naida64   裝置管理員\n         \n\n\n# 芯片組 型號\n\naida64   裝置管理員\n         \n\n * 注意：intel 基於 soc 的 cpu 會在同一個芯片上擁有芯片組和其他功能而不是專用芯片。這意味著嘗試準確檢測芯片組時會有困難\n\n\n# 鍵盤、觸控板和輕觸屏幕的連接類型\n\n裝置管理員\n\n\n不幸的是，aida64 無法提供任何關於指標裝置的有用資訊，因此我們建議使用裝置管理員。\n\n * 你可以找到以下這些裝置:\n   \n   * 人性化介面裝置\n   * 鍵盤\n   * 滑鼠及其他指標裝置\n\n * 要查看裝置確實的連接類型，請選擇指標裝置，然後按 檢視 -> 裝置（依連線）。這能確定裝置是否通過 ps2、i2c、smbus 或 usb 等方式連接。\n\n根據裝置的不同，它可能會顯示在多個名稱和連接方式之下。主要需要關注的是：\n\nsmbus\n\n這些將顯示為獨立的 pci 裝置，如 synaptics smbus driver 或 elan smbus driver\n\n * 輕觸式裝置將顯示在 ps2 下的 synaptics ps2 device/synaptics pointing device 和 pci 的 synaptics smbus driver\n\n\n\n正如你所看到的，我們在左邊的圖片中有兩個 synaptics 裝置，但是如果我們仔細地看，我們會看到頂部的裝置是 ps2，而底部的是 smbus。雖然你可以在任何一種模式下使用觸控板，但 smbus 通常提供更好的手勢支援和準確性。\n\nusb\n\ndevice by type   device by connection\n                 \n\n這些裝置會顯示為「ps2 相容的觸控板」。當我們將連接檢視表切換到 **裝置（依連線）** 時，亦會顯示在 usb之下\n\ni2c\n\n它們幾乎總是以微軟的 hid 裝置的形式顯示，不過也可能以其他觸控板的形式顯示。但它們總是在 i2c 下顯示。\n\n\n# 音訊編解碼器\n\naida64   裝置管理員\n         \n\n由於某些 oem 顯示裝置名稱的方式，你在裝置管理員取得的最準確資訊的方式是通過 pci id（例如 pci 14f1,50f4）。這意味著你需要在 google 搜尋 id 並找出確實的裝置 id；然而，aida64 可以正確地顯示名稱，這對終端用戶來說更容易理解。\n\n\n# 網路介面控制器型號\n\naida64   裝置管理員\n         \n\n由於某些 oem 顯示裝置名稱的方式，你在裝置管理員取得的最準確資訊的方式是通過 pci id（例如 pci\\ven_14e4&dev_43a0 對應於 vender id 14e4 和 裝置 id 43a0）。這意味著你需要在 google 搜尋 id 並找出確實的裝置 id；然而，aida64 可以正確地顯示名稱，這對終端用戶來說更容易理解。\n\n\n# 硬碟型號\n\naida64   裝置管理員\n         \n\n由於某些 oem 不會提供有關硬碟的很多資訊，您將需要通過 google 來確定與顯示名稱匹配的硬碟。\n\n\n# 使用 linux 尋找硬體\n\n要使用 linux 尋找硬體，我們將使用一些工具：\n\n * pciutils\n * dmidecode\n\n下面是要在終端上執行的命令列表，幸運的是，大多數 linux 發行版已經安裝了這些工具。如果沒有，您可以在您的發行版的軟體套件管理系統中找到它們。\n\n\n# cpu 型號\n\ngrep -i "model name" /proc/cpuinfo\n\n\n\n# gpu 型號\n\nlspci | grep -i --color "vga\\|3d\\|2d"\n\n\n\n# 芯片組 型號\n\ndmidecode -t baseboard\n\n\n\n# 鍵盤、觸控板和輕觸屏幕的連接類型\n\ndmesg | grep -i input\n\n\n\n# 音訊編解碼器\n\naplay -l\n\n\n\n# 網路介面控制器型號\n\n基本資訊：\n\nlspci | grep -i network\n\n\n更多深入的資訊：\n\nlshw -class network\n\n\n\n# 硬碟型號\n\nlshw -class disk -class storage\n\n\n\n# 使用 ocsysinfo 尋找硬體\n\n有兩種取得和執行 ocsysinfo 的方法：\n\n * 預編譯二進制檔案\n * 手動克隆 儲存庫\n\n提示\n\n我們建議您下載預編譯的二進制檔案，因為這是最簡單的方法。\n\n如果您想了解關於手動克隆儲存庫的更多資訊，可以查看 ocsysinfo 迷你指南。\n\n\n# 探索硬體\n\n注意\n\n我們建議筆記型電腦用戶在開始之前，斷開任何外部 usb 裝置，因為這可能會導致收集的資訊模棱兩可或沒有必要，可能使你感到困惑。\n\n成功安裝並執行應用程式後，你應該看到以下界面：\n\n\n\n在這裡，你可以輸入 d 並按 enter/return，然後，你應該會看到一個與下方類似的介面：\n\n\n\n\n# cpu 型號\n\n\n\n除了 cpu 型号，它還列出了 cpu 的世代、最高可支援的 sse 版本和 ssse3 的可用性。\n\n\n# gpu 型號\n\n\n\n在這種情況下，電腦有兩個 gpu：\n\n * igpu (intel uhd graphics 630)\n * dgpu (amd radeon r9 390x)\n\n除了型號名稱，它還列出了 gpu 的代號、acpi 和 pci 路徑。在你的 hackintosh 過程之中，你可能很快就會發現這些代碼很有用。\n\n\n# 鍵盤和觸控板的連接類型\n\nsmbus 觸控板\n\n觸控板：smbus\n鍵盤：ps/2\n\n圖片來源：thatcopy\n\ni2c 觸控板\n\n觸控板：i2c\n鍵盤：ps/2\n\n圖片來源：mahas\n\nps/2 觸控板\n\n觸控板：ps/2\n鍵盤：ps/2\n\n圖片來源：tasty0\n\n\n# 音訊編解碼器\n\n\n\n\n# 網路介面控制器型號\n\n\n\n\n# 硬碟型號\n\n',charsets:{cjk:!0}},{title:"安裝程序",frontmatter:{},regularPath:"/installation/installation-process.html",relativePath:"installation/installation-process.md",key:"v-4b67d32d",path:"/installation/installation-process.html",headers:[{level:2,title:"再次檢查你的準備工作",slug:"再次檢查你的準備工作",normalizedTitle:"再次檢查你的準備工作",charIndex:228},{level:2,title:"以 OpenCore USB 開機",slug:"以-opencore-usb-開機",normalizedTitle:"以 opencore usb 開機",charIndex:685},{level:2,title:"macOS 安裝程式",slug:"macos-安裝程式",normalizedTitle:"macos 安裝程式",charIndex:1330}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"再次檢查你的準備工作 以 OpenCore USB 開機 macOS 安裝程式",content:'# 安裝程序\n\n现在，你已經完成了 OpenCore 的設定，你終於能開始首次開機，需要記住的主要事情：\n\n * 為 macOS 啟用最適當的設定\n * 閱讀 OpenCore 多系統開機指南 和設定 LauncherOption 頁面\n   * 主要適用於打算單磁碟多操作系統的用戶\n * 在其他裝置開啟通用故障診斷頁面\n * 閱讀和了解 macOS 開機過程\n   * 可以幫助第一次安裝的用戶更好地了解他們可能在哪裡出現問題\n * 大量耐性\n\n\n# 再次檢查你的準備工作\n\n在開機之前，讓我們再次檢查一下你的 EFI 設置：\n\n良好的 EFI                      不好的 EFI\n                             \nEFI 資料夾能在 EFI 磁碟分割中找到        找不到 EFI 資料夾\nACPI 檔案都是已編譯的 (.aml)         有 ACPI 檔案是未編譯的 (.dsl)\n不包括 DSDT                     包含了 DSDT\n已移除不需要的驅動程式 (.efi)           保留預設的驅動程式\n已移除不需要的工具程式 (.efi)           保留預設的工具程式\nkext 資料夾的所有檔案皆以 .kext 為副檔名   包含原始碼和資料夾\nconfig.plist 在 EFI/OC 內      既沒有重新命名，也沒有將 .plist 放在正確位置\n只保留需要的 kext                  下載了每一個列出的 kext\n\n\n# 以 OpenCore USB 開機\n\n現在，你終於準備好你的 USB 隨身碟並將其插入電腦啟動了。請注意，大多數電腦仍然會預設使用 Windows 的磁碟區開機，你將需要在 BIOS 開機選單中手動選擇 OpenCore。請查看主版說明書或使用 Google 找出如何進入 BIOS 和開機選單（如：Esc, F2, F10 或 F12）\n\n啟動隨身碟後，你會看到類似下面的開機選項：\n\n 1. Windows\n 2. macOS Base System (External) / Install macOS Big Sur (External) / USB drive name (External)\n 3. OpenShell.efi\n 4. Reset NVRAM\n\nWARNING\n\n你可能需按下空格鍵才能看到安裝程式，因為 OpenCore 較後期的版本已預設啟用 HideAuxiliary。\n\n對我們來說，選項 2 就是我們想要的。根據安裝程式製作方式的不同，它可能會稱為 "macOS Base System (External)"、"Install macOS version name (External)" 或 "Your USB drive\'s name (External)"\n\n你終於進入安裝程式的啟動過程，你可能會看到大量文字。這是「詳細模式」（Verbose Mode），這能幫助你解決開機過程中遇到的問題。如果你在這裡卡住了，請參閱故障診斷指南。\n\n\n# macOS 安裝程式\n\n當你看到畫面從詳細模式變成蘋果標誌的時候，你終於完成安裝程式的啟動過程！\n\n現在你已經走到了這一步，需要記住的主要事情包括：\n\n * 你的 SATA 或 NVME 控制器必須是 macOS 所支援的\n   * 如果無法在磁碟工具程式中找到你的硬碟，可以嘗加入諸如 SATA-unsupported.kext 等針對控制器的内核延伸插件。\n   * AMD 原生的 FCH SATA Controller 是少數連内核延伸插件也不支援的控制器。如果你在 Linux 尋找硬體時只看到這個控制器，你可能要考慮安裝至外置硬碟或放棄了\n * 你希望安装 macOS 的磁碟區 必須 是以 GUID 分割區配置表來格式化的 APFS 磁碟\n   * 在機械硬碟（HDD）上安裝 High Sierra，和所有安裝 Sierra 及更舊的用戶應該使用 macOS 擴充格式 (HFS+)\n * 磁碟 必須 有一個 200MB 的（EFI）分割\n   * macOS 一般會在新磁碟中格式化一個 200MB 的分割\n   * 參閱多系統開機指南 了解有關分割一個已安裝 Windows 的磁碟的更多資訊\n\n開始安裝後，請等待系統重新啟動，然後你將需要再次選擇以 OpenCore 隨身碟開機。不要選擇剛才的隨身碟安裝程式（標示為 External）或是 Recovery，而是要選擇硬碟上的 macOS Installer 來繼續安裝。在經過詳細模式後會出現蘋果標誌，幾分鐘後你會看到底部有計時器，並寫着「剩餘大約 x 分鐘」。這可能是休息或吃東西的好時機，因為這需要一段時間和數次的重新啟動。如果一切順利，它最終會把你帶到「設定你的 Mac」或「選擇你的國家或地區」界面。\n\n\n\n如果你看到這個畫面，你成功了！ 🎉 你可以瀏覽安裝後完善指南來完成後續的系統設定。',normalizedContent:'# 安裝程序\n\n现在，你已經完成了 opencore 的設定，你終於能開始首次開機，需要記住的主要事情：\n\n * 為 macos 啟用最適當的設定\n * 閱讀 opencore 多系統開機指南 和設定 launcheroption 頁面\n   * 主要適用於打算單磁碟多操作系統的用戶\n * 在其他裝置開啟通用故障診斷頁面\n * 閱讀和了解 macos 開機過程\n   * 可以幫助第一次安裝的用戶更好地了解他們可能在哪裡出現問題\n * 大量耐性\n\n\n# 再次檢查你的準備工作\n\n在開機之前，讓我們再次檢查一下你的 efi 設置：\n\n良好的 efi                      不好的 efi\n                             \nefi 資料夾能在 efi 磁碟分割中找到        找不到 efi 資料夾\nacpi 檔案都是已編譯的 (.aml)         有 acpi 檔案是未編譯的 (.dsl)\n不包括 dsdt                     包含了 dsdt\n已移除不需要的驅動程式 (.efi)           保留預設的驅動程式\n已移除不需要的工具程式 (.efi)           保留預設的工具程式\nkext 資料夾的所有檔案皆以 .kext 為副檔名   包含原始碼和資料夾\nconfig.plist 在 efi/oc 內      既沒有重新命名，也沒有將 .plist 放在正確位置\n只保留需要的 kext                  下載了每一個列出的 kext\n\n\n# 以 opencore usb 開機\n\n現在，你終於準備好你的 usb 隨身碟並將其插入電腦啟動了。請注意，大多數電腦仍然會預設使用 windows 的磁碟區開機，你將需要在 bios 開機選單中手動選擇 opencore。請查看主版說明書或使用 google 找出如何進入 bios 和開機選單（如：esc, f2, f10 或 f12）\n\n啟動隨身碟後，你會看到類似下面的開機選項：\n\n 1. windows\n 2. macos base system (external) / install macos big sur (external) / usb drive name (external)\n 3. openshell.efi\n 4. reset nvram\n\nwarning\n\n你可能需按下空格鍵才能看到安裝程式，因為 opencore 較後期的版本已預設啟用 hideauxiliary。\n\n對我們來說，選項 2 就是我們想要的。根據安裝程式製作方式的不同，它可能會稱為 "macos base system (external)"、"install macos version name (external)" 或 "your usb drive\'s name (external)"\n\n你終於進入安裝程式的啟動過程，你可能會看到大量文字。這是「詳細模式」（verbose mode），這能幫助你解決開機過程中遇到的問題。如果你在這裡卡住了，請參閱故障診斷指南。\n\n\n# macos 安裝程式\n\n當你看到畫面從詳細模式變成蘋果標誌的時候，你終於完成安裝程式的啟動過程！\n\n現在你已經走到了這一步，需要記住的主要事情包括：\n\n * 你的 sata 或 nvme 控制器必須是 macos 所支援的\n   * 如果無法在磁碟工具程式中找到你的硬碟，可以嘗加入諸如 sata-unsupported.kext 等針對控制器的内核延伸插件。\n   * amd 原生的 fch sata controller 是少數連内核延伸插件也不支援的控制器。如果你在 linux 尋找硬體時只看到這個控制器，你可能要考慮安裝至外置硬碟或放棄了\n * 你希望安装 macos 的磁碟區 必須 是以 guid 分割區配置表來格式化的 apfs 磁碟\n   * 在機械硬碟（hdd）上安裝 high sierra，和所有安裝 sierra 及更舊的用戶應該使用 macos 擴充格式 (hfs+)\n * 磁碟 必須 有一個 200mb 的（efi）分割\n   * macos 一般會在新磁碟中格式化一個 200mb 的分割\n   * 參閱多系統開機指南 了解有關分割一個已安裝 windows 的磁碟的更多資訊\n\n開始安裝後，請等待系統重新啟動，然後你將需要再次選擇以 opencore 隨身碟開機。不要選擇剛才的隨身碟安裝程式（標示為 external）或是 recovery，而是要選擇硬碟上的 macos installer 來繼續安裝。在經過詳細模式後會出現蘋果標誌，幾分鐘後你會看到底部有計時器，並寫着「剩餘大約 x 分鐘」。這可能是休息或吃東西的好時機，因為這需要一段時間和數次的重新啟動。如果一切順利，它最終會把你帶到「設定你的 mac」或「選擇你的國家或地區」界面。\n\n\n\n如果你看到這個畫面，你成功了！ 🎉 你可以瀏覽安裝後完善指南來完成後續的系統設定。',charsets:{cjk:!0}},{title:"製作引導隨身碟",frontmatter:{},regularPath:"/installer-guide/",relativePath:"installer-guide/README.md",key:"v-a0034d84",path:"/installer-guide/",headers:[{level:3,title:"線上 vs 離線安裝程式",slug:"線上-vs-離線安裝程式",normalizedTitle:"線上 vs 離線安裝程式",charIndex:286},{level:3,title:"製作安裝程式",slug:"製作安裝程式",normalizedTitle:"製作安裝程式",charIndex:523}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"線上 vs 離線安裝程式 製作安裝程式",content:"# 製作引導隨身碟\n\n你需要：\n\n * OpenCorePkg，強烈建議先行使用除錯版本以顯示更多訊息\n * ProperTree，編輯 .plist 檔案（另有一些工具如 OpenCore Configurator 或 OpenCore Auxiliary Tools，但可能已嚴重過時，Mackie 版本的 OCC 更是以損毀檔案而聞名。請盡量避免使用這些工具！）\n * 如果你希望使用 OpenCore 作為主要引導程式，則必須從系統中完全移除 Clover。並保留一個基於 Clover 的 EFI 備份。請參閱從 Clover 轉換了解需要清理的地方。\n\n\n# 線上 vs 離線安裝程式\n\n離線安裝程式有一個完整的 macOS 副本，而線上安裝程式只有一個恢復映像（~500MB），啟動後就可以從蘋果伺服器下載 macOS。\n\n * 離線\n   * 只能在 macOS 下製作\n   * Windows/Linux 沒有整合完整安装程式所需的 APFS／HFS 驅動程式\n * 線上\n   * 可在 macOS/Linux/Windows 下製作\n   * 需要在欲安裝電腦上使用 macOS 支援的網路適配器進行網際網路連接\n\n\n# 製作安裝程式\n\n根據你使用的操作系統，請參閱有關製作引導隨身碟的具體部分：\n\n * macOS 用戶\n   * 支援 OS X 10.4 至目前版本\n   * 提供線上及離線安裝程式\n   * 支援傳統 BIOS 和 UEFI 安裝\n * Windows 用戶\n   * 支援 OS X 10.7 至目前版本\n   * 只提供線上安裝程式\n   * 支援傳統 BIOS 和 UEFI 安裝\n * Linux 用戶（UEFI）\n   * 支援 OS X 10.7 至目前版本\n   * 只提供線上安裝程式\n   * 適用於支援 UEFI 引導的電腦",normalizedContent:"# 製作引導隨身碟\n\n你需要：\n\n * opencorepkg，強烈建議先行使用除錯版本以顯示更多訊息\n * propertree，編輯 .plist 檔案（另有一些工具如 opencore configurator 或 opencore auxiliary tools，但可能已嚴重過時，mackie 版本的 occ 更是以損毀檔案而聞名。請盡量避免使用這些工具！）\n * 如果你希望使用 opencore 作為主要引導程式，則必須從系統中完全移除 clover。並保留一個基於 clover 的 efi 備份。請參閱從 clover 轉換了解需要清理的地方。\n\n\n# 線上 vs 離線安裝程式\n\n離線安裝程式有一個完整的 macos 副本，而線上安裝程式只有一個恢復映像（~500mb），啟動後就可以從蘋果伺服器下載 macos。\n\n * 離線\n   * 只能在 macos 下製作\n   * windows/linux 沒有整合完整安装程式所需的 apfs／hfs 驅動程式\n * 線上\n   * 可在 macos/linux/windows 下製作\n   * 需要在欲安裝電腦上使用 macos 支援的網路適配器進行網際網路連接\n\n\n# 製作安裝程式\n\n根據你使用的操作系統，請參閱有關製作引導隨身碟的具體部分：\n\n * macos 用戶\n   * 支援 os x 10.4 至目前版本\n   * 提供線上及離線安裝程式\n   * 支援傳統 bios 和 uefi 安裝\n * windows 用戶\n   * 支援 os x 10.7 至目前版本\n   * 只提供線上安裝程式\n   * 支援傳統 bios 和 uefi 安裝\n * linux 用戶（uefi）\n   * 支援 os x 10.7 至目前版本\n   * 只提供線上安裝程式\n   * 適用於支援 uefi 引導的電腦",charsets:{cjk:!0}},{title:"取得舊版本的 macOS/OS X",frontmatter:{},regularPath:"/installer-guide/legacy-mac-install.html",relativePath:"installer-guide/legacy-mac-install.md",key:"v-1d1cd917",path:"/installer-guide/legacy-mac-install.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# 取得舊版本的 macOS/OS X\n\n此頁已棄用，請參閱舊版 macOS 安裝程式的相應安裝頁面",normalizedContent:"# 取得舊版本的 macos/os x\n\n此頁已棄用，請參閱舊版 macos 安裝程式的相應安裝頁面",charsets:{cjk:!0}},{title:"在 Linux 中製作安裝程式",frontmatter:{},regularPath:"/installer-guide/linux-install.html",relativePath:"installer-guide/linux-install.md",key:"v-094f9f8d",path:"/installer-guide/linux-install.html",headers:[{level:2,title:"下載 macOS",slug:"下載-macos",normalizedTitle:"下載 macos",charIndex:132},{level:2,title:"製作安裝程式",slug:"製作安裝程式",normalizedTitle:"製作安裝程式",charIndex:11},{level:3,title:"方法 1",slug:"方法-1",normalizedTitle:"方法 1",charIndex:2260},{level:3,title:"方法 2 (若方法 1 不起作用)",slug:"方法-2-若方法-1-不起作用",normalizedTitle:"方法 2 (若方法 1 不起作用)",charIndex:3236},{level:2,title:"現在，所有步驟都完成了，前往設定 EFI 來完成你的工作",slug:"現在-所有步驟都完成了-前往設定-efi-來完成你的工作",normalizedTitle:"現在，所有步驟都完成了，前往設定 efi 來完成你的工作",charIndex:4628}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"下載 macOS 製作安裝程式 方法 1 方法 2 (若方法 1 不起作用) 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作",content:'# 在 Linux 中製作安裝程式\n\n雖然你不需要重新安裝 macOS 來使用 OpenCore，但一些用戶更喜歡升級開機管理器後帶來的全新體驗。\n\n在開始之前，你需要準備以下東西：\n\n * 4GB 的 USB 隨身碟\n * macrecovery.py\n\n\n# 下載 macOS\n\n首先 cd 到macrecovery 的資料夾 並執行以下其中一個命令：\n\n\n\n# Adjust below command to the correct folder\ncd ~/Downloads/OpenCore-0/Utilities/macrecovery/\n\n\n現在根據你想要的 macOS 版本執行以下其中一個命令：\n\n# Lion (10.7):\npython3 ./macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 ./macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 ./macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 ./macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 ./macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 ./macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 ./macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 ./macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 ./macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 ./macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 ./macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# 最新版本\n# ie. Ventura (13)\npython3 ./macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n现在，在終端中執行上面其中一個命令，完成後你將得到類似於下面的內容:\n\n\n\n * 注意: 根據操作系統的不同，您將取得 BaseSystem 或 RecoveryImage 檔案。它們以相同的方式工作，所以當我們引用 BaseSystem 時，相同的資訊同時適用於 RecoveryImage\n\n * macOS 12 及以上版本注意: 由於最新版本的 macOS 對 USB 堆棧進行了更改，因此在安裝 macOS 之前，強烈建議你使用 USBToolBox 來映射 USB 連接埠。\n   \n   * 注意: 在 macOS 11.3 及更新版本中，XhciPortLimit 己經失效，導致開機循環.\n     * 如果你已映射 USB 連接埠且停用了 XhciPortLimit，你可以正常啟動 macOS 11.3+。\n\n\n# 製作安裝程式\n\n本章節的目標是在 USB 隨身碟中建立必要的分區。你可以使用你最喜歡的程式，例如 gdisk fdisk parted gparted 或 gnome-disks。本指南將重點介紹 gdisk ，因為它很好，可以在稍後更改分區類型，因為我們需要它來引導 macOS Recovery HD。（這裡使用的發行版是 Ubuntu 18.04，其他版本或發行版也可以）\n\n感謝 midi1996 為 Internet 安裝指南 所做的工作。\n\n\n# 方法 1\n\n在終端:\n\n 1. 執行 lsblk 並確定你的 USB 隨身碟區塊\n 2. 執行 sudo gdisk /dev/<你的隨身碟區塊>\n    1. 如果你被問到使用什麼分區表，選擇 GPT。\n    2. 輸入 p 來列出你的區塊的磁碟區（並驗證它是否為需要的磁碟區）\n    3. 輸入 o 來清除分區表，並建立一個新的 GPT 表（如果不是空的）\n       1. 輸入 y 確認\n    4. 輸入 n\n       1. partition number：預設為空\n       2. first sector：預設為空\n       3. last sector：整個磁碟保持空白\n       4. Hex code or GUID：0700（Microsoft 基本資料分區類型）\n    5. 輸入 w\n       * 輸入 y 確認\n       * 在某些罕有的情況下需要重啟電腦，但如果你想確定的話，重啟你的電腦。你也可以嘗試重新插入你的隨身碟。\n    6. 輸入 q 來關閉 gdisk（通常它應該自已結束）\n 3. 使用 lsblk 來確定磁碟區的標識符\n 4. 執行 sudo mkfs.vfat -F 32 -n "OPENCORE" /dev/<你的隨身碟區塊> 格式化隨身碟為 FAT32 並命名為 OPENCORE\n 5. cd 到 /OpenCore/Utilities/macrecovery/ 你應該得到一個 .dmg 和 .chunklist 檔案\n    1. 輸入 udisksctl（udisksctl mount -b /dev/<你的隨身碟區塊>，在大多數情況下不需要 sudo）或 mount (sudo mount /dev/<你的隨身碟區塊> /where/your/mount/stuff，必需 sudo) 掛載您的隨身碟磁碟區\n    2. cd 到你的 USB 隨身碟和在 FAT32 隨身碟磁碟區的根目錄下的 mkdir com.apple.recovery.boot\n    3. 現在 cp 或 rsync 將 BaseSystem.dmg 和 BaseSystem.chunklist 放到 com.apple.recovery.boot 資料夾.\n\n\n# 方法 2 (若方法 1 不起作用)\n\n在終端:\n\n 1. 執行 lsblk 並確定你的 USB 隨身碟區塊\n 2. 執行 sudo gdisk /dev/<你的隨身碟區塊>\n    1. 如果你被問到使用什麼分區表，選擇 GPT。\n    2. 輸入 p 來列出你的區塊的磁碟區（並驗證它是否為需要的磁碟區）\n    3. 輸入 o 來清除分區表，並建立一個新的 GPT 表（如果不是空的）\n       1. 輸入 y 確認\n    4. 輸入 n\n       1. partition number：預設為空\n       2. first sector：預設為空\n       3. last sector：+200M 來建立一個 200MB 的磁碟區，稍後將命名為 OPENCORE\n       4. Hex code or GUID：0700（Microsoft 基本資料分區類型）\n    5. 輸入 n\n       1. partition number: 預設為空\n       2. first sector: 預設為空\n       3. last sector: 保持預設（如果你想進一步劃分隨身碟的其餘部分，可以將其設為「+3G」）\n       4. Hex code or GUID: af00（蘋果 HFS/HFS+ 分區類型）\n    6. 輸入 w\n       * 輸入 y 確認\n       * 在某些罕有的情況下需要重啟電腦，但如果你想確定的話，重啟你的電腦。你也可以嘗試重新插入你的隨身碟。\n    7. 輸入 q 來關閉 gdisk（通常它應該自已結束）\n 3. 再次使用 lsblk 來確定 200MB 磁碟區和其他磁碟區\n 4. 執行 sudo mkfs.vfat -F 32 -n "OPENCORE" /dev/<你的 200MB 磁碟區塊> 將 200MB 分區格式化為 FAT32，並命名為 OPENCORE\n 5. cd 到 /OpenCore/Utilities/macrecovery/ 你應該得到一個 .dmg 和 .chunklist 檔案\n    1. 輸入 udisksctl（udisksctl mount -b /dev/<你的隨身碟區塊>，在大多數情況下不需要 sudo）或 mount (sudo mount /dev/<你的隨身碟區塊> /where/your/mount/stuff，必需 sudo) 掛載您的隨身碟磁碟區\n    2. cd 到你的隨身碟，並在你的隨身碟的 FAT32 磁碟區根目錄輸入 mkdir com.apple.recovery.boot\n    3. 下載 dmg2img（在大多數發行版上可用）\n    4. 執行 dmg2img -l BaseSystem.dmg 並確定哪個磁碟區區具有 disk image 屬性\n    5. 執行 sudo dmg2img -p <the partition number> BaseSystem.dmg /dev/<你的 3GB+ 磁碟區塊> 來提取恢復映像並將其寫入磁碟區\n       * 這需要一些時間。尤其是你用的是速度較慢的 USB（我用一個速度較快的 USB 2.0 隨身碟只花了不到 5 分鐘）。\n\n\n# 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作',normalizedContent:'# 在 linux 中製作安裝程式\n\n雖然你不需要重新安裝 macos 來使用 opencore，但一些用戶更喜歡升級開機管理器後帶來的全新體驗。\n\n在開始之前，你需要準備以下東西：\n\n * 4gb 的 usb 隨身碟\n * macrecovery.py\n\n\n# 下載 macos\n\n首先 cd 到macrecovery 的資料夾 並執行以下其中一個命令：\n\n\n\n# adjust below command to the correct folder\ncd ~/downloads/opencore-0/utilities/macrecovery/\n\n\n現在根據你想要的 macos 版本執行以下其中一個命令：\n\n# lion (10.7):\npython3 ./macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 ./macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 ./macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 ./macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 ./macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 ./macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 ./macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 ./macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 ./macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 ./macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 ./macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# 最新版本\n# ie. ventura (13)\npython3 ./macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n现在，在終端中執行上面其中一個命令，完成後你將得到類似於下面的內容:\n\n\n\n * 注意: 根據操作系統的不同，您將取得 basesystem 或 recoveryimage 檔案。它們以相同的方式工作，所以當我們引用 basesystem 時，相同的資訊同時適用於 recoveryimage\n\n * macos 12 及以上版本注意: 由於最新版本的 macos 對 usb 堆棧進行了更改，因此在安裝 macos 之前，強烈建議你使用 usbtoolbox 來映射 usb 連接埠。\n   \n   * 注意: 在 macos 11.3 及更新版本中，xhciportlimit 己經失效，導致開機循環.\n     * 如果你已映射 usb 連接埠且停用了 xhciportlimit，你可以正常啟動 macos 11.3+。\n\n\n# 製作安裝程式\n\n本章節的目標是在 usb 隨身碟中建立必要的分區。你可以使用你最喜歡的程式，例如 gdisk fdisk parted gparted 或 gnome-disks。本指南將重點介紹 gdisk ，因為它很好，可以在稍後更改分區類型，因為我們需要它來引導 macos recovery hd。（這裡使用的發行版是 ubuntu 18.04，其他版本或發行版也可以）\n\n感謝 midi1996 為 internet 安裝指南 所做的工作。\n\n\n# 方法 1\n\n在終端:\n\n 1. 執行 lsblk 並確定你的 usb 隨身碟區塊\n 2. 執行 sudo gdisk /dev/<你的隨身碟區塊>\n    1. 如果你被問到使用什麼分區表，選擇 gpt。\n    2. 輸入 p 來列出你的區塊的磁碟區（並驗證它是否為需要的磁碟區）\n    3. 輸入 o 來清除分區表，並建立一個新的 gpt 表（如果不是空的）\n       1. 輸入 y 確認\n    4. 輸入 n\n       1. partition number：預設為空\n       2. first sector：預設為空\n       3. last sector：整個磁碟保持空白\n       4. hex code or guid：0700（microsoft 基本資料分區類型）\n    5. 輸入 w\n       * 輸入 y 確認\n       * 在某些罕有的情況下需要重啟電腦，但如果你想確定的話，重啟你的電腦。你也可以嘗試重新插入你的隨身碟。\n    6. 輸入 q 來關閉 gdisk（通常它應該自已結束）\n 3. 使用 lsblk 來確定磁碟區的標識符\n 4. 執行 sudo mkfs.vfat -f 32 -n "opencore" /dev/<你的隨身碟區塊> 格式化隨身碟為 fat32 並命名為 opencore\n 5. cd 到 /opencore/utilities/macrecovery/ 你應該得到一個 .dmg 和 .chunklist 檔案\n    1. 輸入 udisksctl（udisksctl mount -b /dev/<你的隨身碟區塊>，在大多數情況下不需要 sudo）或 mount (sudo mount /dev/<你的隨身碟區塊> /where/your/mount/stuff，必需 sudo) 掛載您的隨身碟磁碟區\n    2. cd 到你的 usb 隨身碟和在 fat32 隨身碟磁碟區的根目錄下的 mkdir com.apple.recovery.boot\n    3. 現在 cp 或 rsync 將 basesystem.dmg 和 basesystem.chunklist 放到 com.apple.recovery.boot 資料夾.\n\n\n# 方法 2 (若方法 1 不起作用)\n\n在終端:\n\n 1. 執行 lsblk 並確定你的 usb 隨身碟區塊\n 2. 執行 sudo gdisk /dev/<你的隨身碟區塊>\n    1. 如果你被問到使用什麼分區表，選擇 gpt。\n    2. 輸入 p 來列出你的區塊的磁碟區（並驗證它是否為需要的磁碟區）\n    3. 輸入 o 來清除分區表，並建立一個新的 gpt 表（如果不是空的）\n       1. 輸入 y 確認\n    4. 輸入 n\n       1. partition number：預設為空\n       2. first sector：預設為空\n       3. last sector：+200m 來建立一個 200mb 的磁碟區，稍後將命名為 opencore\n       4. hex code or guid：0700（microsoft 基本資料分區類型）\n    5. 輸入 n\n       1. partition number: 預設為空\n       2. first sector: 預設為空\n       3. last sector: 保持預設（如果你想進一步劃分隨身碟的其餘部分，可以將其設為「+3g」）\n       4. hex code or guid: af00（蘋果 hfs/hfs+ 分區類型）\n    6. 輸入 w\n       * 輸入 y 確認\n       * 在某些罕有的情況下需要重啟電腦，但如果你想確定的話，重啟你的電腦。你也可以嘗試重新插入你的隨身碟。\n    7. 輸入 q 來關閉 gdisk（通常它應該自已結束）\n 3. 再次使用 lsblk 來確定 200mb 磁碟區和其他磁碟區\n 4. 執行 sudo mkfs.vfat -f 32 -n "opencore" /dev/<你的 200mb 磁碟區塊> 將 200mb 分區格式化為 fat32，並命名為 opencore\n 5. cd 到 /opencore/utilities/macrecovery/ 你應該得到一個 .dmg 和 .chunklist 檔案\n    1. 輸入 udisksctl（udisksctl mount -b /dev/<你的隨身碟區塊>，在大多數情況下不需要 sudo）或 mount (sudo mount /dev/<你的隨身碟區塊> /where/your/mount/stuff，必需 sudo) 掛載您的隨身碟磁碟區\n    2. cd 到你的隨身碟，並在你的隨身碟的 fat32 磁碟區根目錄輸入 mkdir com.apple.recovery.boot\n    3. 下載 dmg2img（在大多數發行版上可用）\n    4. 執行 dmg2img -l basesystem.dmg 並確定哪個磁碟區區具有 disk image 屬性\n    5. 執行 sudo dmg2img -p <the partition number> basesystem.dmg /dev/<你的 3gb+ 磁碟區塊> 來提取恢復映像並將其寫入磁碟區\n       * 這需要一些時間。尤其是你用的是速度較慢的 usb（我用一個速度較快的 usb 2.0 隨身碟只花了不到 5 分鐘）。\n\n\n# 現在，所有步驟都完成了，前往設定 efi 來完成你的工作',charsets:{cjk:!0}},{title:"舊版 macOS：磁碟映像",frontmatter:{},regularPath:"/installer-guide/mac-install-dmg.html",relativePath:"installer-guide/mac-install-dmg.md",key:"v-3720f90d",path:"/installer-guide/mac-install-dmg.html",headers:[{level:3,title:"恢復你的磁碟",slug:"恢復你的磁碟",normalizedTitle:"恢復你的磁碟",charIndex:374},{level:3,title:"你完成這些步驟後, 可前往設定 OpenCore 的 EFI 環境",slug:"你完成這些步驟後-可前往設定-opencore-的-efi-環境",normalizedTitle:"你完成這些步驟後, 可前往設定 opencore 的 efi 環境",charIndex:837},{level:3,title:"當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",slug:"當你完成這些步驟後-你可前往設定-opencore-的-efi-環境",normalizedTitle:"當你完成這些步驟後, 你可前往設定 opencore 的 efi 環境",charIndex:1067}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"恢復你的磁碟 你完成這些步驟後, 可前往設定 OpenCore 的 EFI 環境 當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",content:"# 舊版 macOS：磁碟映像\n\n此方法依賴於來自蘋果或 Acidanthera 伺服的映像，並恢復到你的磁碟上。\n\n# Acidanthera 的映像\n\n以下安裝程式是從正版 Mac 電腦的恢復磁碟提取，並刪除它們的 SMBIOS 鎖，OS X 本身的內容沒有以任何方式修改。\n\n * OS X 10.4.10(8R4088)MEGA Mirror\n\n * OS X 10.5.7(9J3050)MEGA Mirror\n\n * OS X 10.6.7(10J4139)MEGA Mirror\n\n# 蘋果的映像\n\n請注意，這些映像需要您擁有 Apple Developer 帳戶才能存取。\n\n * OS X 10.5.0 Golden Master(9a581)\n\n * OS X 10.6.0 Golden Master(10a432)\n\n\n# 恢復你的磁碟\n\n有趣的來了，您首先要打開剛剛下載的 dmg 檔案並掛載它。然後開啟磁碟工具程式，並將您的磁碟格式化為使用 GUID 分區表的 macOS 擴充格式（HFS+）：\n\n\n\n接下來我們有兩個選擇：\n\n * ASR 恢復（Apple Software Restore）\n   * 基於命令列, SIP 啟用時仍可正常運作\n * 磁碟工具程式恢復\n   * 在新版操作系統中可能需要停用 SIP\n\n# ASR\n\n在這裡，你只需要打開終端並執行以下命令：\n\nsudo asr restore -source /Volumes/Mac\\ OS\\ X\\ Install\\ DVD  -target /Volumes/MyVolume -erase -noverify\n\n\n * 注意：這可能與您的設定不一致，請相應更改：\n   * 將 /Volumes/Mac\\ OS\\ X\\ Install\\ DVD 更改為您掛載的磁碟映像的名稱\n   * 將 /Volumes/MyVolume 更改為您的（隨身碟）磁碟區的名稱\n\n\n# 你完成這些步驟後, 可前往設定 OpenCore 的 EFI 環境\n\n# 磁碟工具程式\n\n由於磁盤工具的一些令人討厭的問題，如果啟用 SIP，許多恢復可能會失敗。如果您遇到問題，我們建議您使用 ASR 方法 或停用 SIP。\n\n首先，打開「磁碟工具程式」，你應該會在側邊欄中看到你的 USB 隨身碟和磁碟映像。從這裡，選擇恢復\n\n\n\n疑難排解\n\n如果在恢復過程中出現類似這樣的錯誤：\n\n\n\n這可能意味著需要停用 SIP，但我們建議改用 ASR 方法。\n\n\n# 當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",normalizedContent:"# 舊版 macos：磁碟映像\n\n此方法依賴於來自蘋果或 acidanthera 伺服的映像，並恢復到你的磁碟上。\n\n# acidanthera 的映像\n\n以下安裝程式是從正版 mac 電腦的恢復磁碟提取，並刪除它們的 smbios 鎖，os x 本身的內容沒有以任何方式修改。\n\n * os x 10.4.10(8r4088)mega mirror\n\n * os x 10.5.7(9j3050)mega mirror\n\n * os x 10.6.7(10j4139)mega mirror\n\n# 蘋果的映像\n\n請注意，這些映像需要您擁有 apple developer 帳戶才能存取。\n\n * os x 10.5.0 golden master(9a581)\n\n * os x 10.6.0 golden master(10a432)\n\n\n# 恢復你的磁碟\n\n有趣的來了，您首先要打開剛剛下載的 dmg 檔案並掛載它。然後開啟磁碟工具程式，並將您的磁碟格式化為使用 guid 分區表的 macos 擴充格式（hfs+）：\n\n\n\n接下來我們有兩個選擇：\n\n * asr 恢復（apple software restore）\n   * 基於命令列, sip 啟用時仍可正常運作\n * 磁碟工具程式恢復\n   * 在新版操作系統中可能需要停用 sip\n\n# asr\n\n在這裡，你只需要打開終端並執行以下命令：\n\nsudo asr restore -source /volumes/mac\\ os\\ x\\ install\\ dvd  -target /volumes/myvolume -erase -noverify\n\n\n * 注意：這可能與您的設定不一致，請相應更改：\n   * 將 /volumes/mac\\ os\\ x\\ install\\ dvd 更改為您掛載的磁碟映像的名稱\n   * 將 /volumes/myvolume 更改為您的（隨身碟）磁碟區的名稱\n\n\n# 你完成這些步驟後, 可前往設定 opencore 的 efi 環境\n\n# 磁碟工具程式\n\n由於磁盤工具的一些令人討厭的問題，如果啟用 sip，許多恢復可能會失敗。如果您遇到問題，我們建議您使用 asr 方法 或停用 sip。\n\n首先，打開「磁碟工具程式」，你應該會在側邊欄中看到你的 usb 隨身碟和磁碟映像。從這裡，選擇恢復\n\n\n\n疑難排解\n\n如果在恢復過程中出現類似這樣的錯誤：\n\n\n\n這可能意味著需要停用 sip，但我們建議改用 asr 方法。\n\n\n# 當你完成這些步驟後, 你可前往設定 opencore 的 efi 環境",charsets:{cjk:!0}},{title:"舊版 macOS：離線方法",frontmatter:{},regularPath:"/installer-guide/mac-install-pkg.html",relativePath:"installer-guide/mac-install-pkg.md",key:"v-5c2963cd",path:"/installer-guide/mac-install-pkg.html",headers:[{level:3,title:"提取安裝程式",slug:"提取安裝程式",normalizedTitle:"提取安裝程式",charIndex:583},{level:3,title:"當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",slug:"當你完成這些步驟後-你可前往設定-opencore-的-efi-環境",normalizedTitle:"當你完成這些步驟後, 你可前往設定 opencore 的 efi 環境",charIndex:1948}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"提取安裝程式 當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",content:'# 舊版 macOS：離線方法\n\n此方法讓我們從蘋果下載完整的安裝程式。但是，這個方法只適用於以下 macOS 版本：\n\n * Lion (10.7)\n * Mountain Lion (10.8)\n * Yosemite (10.10)\n * El Capitan (10.11)\n * Sierra (10.12)\n\nTIP\n\nMavericks (10.9) 無法使用這個方法。要下載這個版本，請參閱舊版 macOS：線上方法。\n\n首先，登入以下其中一個網站：\n\n * Mac OS X Lion Installer\n * Mac OS X Mountain Lion Installer\n * How to get old versions of macOS (for 10.10 - 10.12 installers)\n\n下載你想要的版本，應該提供一個 .dmg 檔案，而裡面應有一個 .pkg 檔案。\n\n根據您使用的操作系統，你可以安裝此軟體包, 這將會給你一個 "Install (macOS version).app"（「安裝 (macOS 版本).app」）檔案。然後就可以前往設定安裝程式；但是，如果你收到了這個錯誤：\n\n\n\n代表你的 SMBIOS 太新，無法原生運行這個版本（即使你想為其他電腦製作隨身碟，工具仍然會檢查）。這代表我們將需要手動提取安裝程式。\n\n\n# 提取安裝程式\n\n首先，提取並掛載 InstallMacOSX/InstallOS.dmg：\n\n\n\n然後，開啟終端機並把軟體包提取桌面的任意資料夾內。這需要一些時間。\n\n * Lion 及 Mountain Lion:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install Mac OS X/InstallMacOSX.pkg" OSInstaller\n\n\n * Yosemite 及 El Capitan:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install OS X/InstallMacOSX.pkg" OSInstaller\n\n\n * Sierra:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install macOS/InstallOS.pkg" OSInstaller\n\n\n接下來，（一次過）執行以下命令：\n\n * Lion:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install Mac OS X Lion.app/Contents/SharedSupport/"\nmv "Payload/Install Mac OS X Lion.app" /Applications\n\n\n * Mountain Lion:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X Mountain Lion.app/Contents/SharedSupport/"\nmv "Payload/Install OS X Mountain Lion.app" /Applications\n\n\n * Yosemite:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X Yosemite.app/Contents/SharedSupport/"\nmv "Payload/Install OS X Yosemite.app" /Applications\n\n\n * El Capitan:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X El Capitan.app/Contents/SharedSupport/"\nmv "Payload/Install OS X El Capitan.app" /Applications\n\n\n * Sierra:\n\ncd OSInstaller/InstallOS.pkg\nmv InstallESD.dmg "Payload/Install macOS Sierra.app/Contents/SharedSupport/"\nmv "Payload/Install macOS Sierra.app" /Applications\n\n\n\n# 當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境',normalizedContent:'# 舊版 macos：離線方法\n\n此方法讓我們從蘋果下載完整的安裝程式。但是，這個方法只適用於以下 macos 版本：\n\n * lion (10.7)\n * mountain lion (10.8)\n * yosemite (10.10)\n * el capitan (10.11)\n * sierra (10.12)\n\ntip\n\nmavericks (10.9) 無法使用這個方法。要下載這個版本，請參閱舊版 macos：線上方法。\n\n首先，登入以下其中一個網站：\n\n * mac os x lion installer\n * mac os x mountain lion installer\n * how to get old versions of macos (for 10.10 - 10.12 installers)\n\n下載你想要的版本，應該提供一個 .dmg 檔案，而裡面應有一個 .pkg 檔案。\n\n根據您使用的操作系統，你可以安裝此軟體包, 這將會給你一個 "install (macos version).app"（「安裝 (macos 版本).app」）檔案。然後就可以前往設定安裝程式；但是，如果你收到了這個錯誤：\n\n\n\n代表你的 smbios 太新，無法原生運行這個版本（即使你想為其他電腦製作隨身碟，工具仍然會檢查）。這代表我們將需要手動提取安裝程式。\n\n\n# 提取安裝程式\n\n首先，提取並掛載 installmacosx/installos.dmg：\n\n\n\n然後，開啟終端機並把軟體包提取桌面的任意資料夾內。這需要一些時間。\n\n * lion 及 mountain lion:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install mac os x/installmacosx.pkg" osinstaller\n\n\n * yosemite 及 el capitan:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install os x/installmacosx.pkg" osinstaller\n\n\n * sierra:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install macos/installos.pkg" osinstaller\n\n\n接下來，（一次過）執行以下命令：\n\n * lion:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install mac os x lion.app/contents/sharedsupport/"\nmv "payload/install mac os x lion.app" /applications\n\n\n * mountain lion:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x mountain lion.app/contents/sharedsupport/"\nmv "payload/install os x mountain lion.app" /applications\n\n\n * yosemite:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x yosemite.app/contents/sharedsupport/"\nmv "payload/install os x yosemite.app" /applications\n\n\n * el capitan:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x el capitan.app/contents/sharedsupport/"\nmv "payload/install os x el capitan.app" /applications\n\n\n * sierra:\n\ncd osinstaller/installos.pkg\nmv installesd.dmg "payload/install macos sierra.app/contents/sharedsupport/"\nmv "payload/install macos sierra.app" /applications\n\n\n\n# 當你完成這些步驟後, 你可前往設定 opencore 的 efi 環境',charsets:{cjk:!0}},{title:"舊版 macOS：線上方法",frontmatter:{},regularPath:"/installer-guide/mac-install-recovery.html",relativePath:"installer-guide/mac-install-recovery.md",key:"v-6e88b902",path:"/installer-guide/mac-install-recovery.html",headers:[{level:3,title:"當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",slug:"當你完成這些步驟後-你可前往設定-opencore-的-efi-環境",normalizedTitle:"當你完成這些步驟後, 你可前往設定 opencore 的 efi 環境",charIndex:1911}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",content:"# 舊版 macOS：線上方法\n\n此方法讓我們下載從 10.7 至目前最新的任意 macOS 版本，但它們只包含修復程式，因此需要網際網路連線才能安裝\n\n首先，你要改為使用 macrecovery.py。此工具已經包括在 OpenCorePkg　之中：\n\n\n\n工具的操作非常簡單，只要按你要下載的操作系統執行以下其中一個命令：\n\n# Lion (10.7):\npython3 ./macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 ./macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 ./macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 ./macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 ./macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 ./macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 ./macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 ./macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 ./macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 ./macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 ./macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# 最新版本\n# ie. Ventura (13)\npython3 ./macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n * macOS 12 及以上版本注意: 由於最新版本的 macOS 對 USB 堆棧進行了更改，因此在安裝 macOS 之前，強烈建議你使用 USBToolBox 來映射 USB 連接埠。\n   * 注意: 在 macOS 11.3 及更新版本中，XhciPortLimit 己經失效，導致開機循環.\n     * 如果你已映射 USB 連接埠且停用了 XhciPortLimit，你可以正常啟動 macOS 11.3+。\n\n現在，在終端機執行以上其中一個命令。完成後，你會取得類似下面圖片的輸出：\n\n\n\n當完成後，將你的隨身碟以 GUID 磁碟分割方案格式化為 FAT32：\n\n\n\n最後，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾，並將剛下載好的 BaseSystem/RecoveryImage 檔案放到該資料夾裡：\n\n\n\n\n# 當你完成這些步驟後, 你可前往設定 OpenCore 的 EFI 環境",normalizedContent:"# 舊版 macos：線上方法\n\n此方法讓我們下載從 10.7 至目前最新的任意 macos 版本，但它們只包含修復程式，因此需要網際網路連線才能安裝\n\n首先，你要改為使用 macrecovery.py。此工具已經包括在 opencorepkg　之中：\n\n\n\n工具的操作非常簡單，只要按你要下載的操作系統執行以下其中一個命令：\n\n# lion (10.7):\npython3 ./macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 ./macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 ./macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 ./macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 ./macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 ./macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 ./macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 ./macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 ./macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 ./macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 ./macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# 最新版本\n# ie. ventura (13)\npython3 ./macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n * macos 12 及以上版本注意: 由於最新版本的 macos 對 usb 堆棧進行了更改，因此在安裝 macos 之前，強烈建議你使用 usbtoolbox 來映射 usb 連接埠。\n   * 注意: 在 macos 11.3 及更新版本中，xhciportlimit 己經失效，導致開機循環.\n     * 如果你已映射 usb 連接埠且停用了 xhciportlimit，你可以正常啟動 macos 11.3+。\n\n現在，在終端機執行以上其中一個命令。完成後，你會取得類似下面圖片的輸出：\n\n\n\n當完成後，將你的隨身碟以 guid 磁碟分割方案格式化為 fat32：\n\n\n\n最後，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾，並將剛下載好的 basesystem/recoveryimage 檔案放到該資料夾裡：\n\n\n\n\n# 當你完成這些步驟後, 你可前往設定 opencore 的 efi 環境",charsets:{cjk:!0}},{title:"在 macOS 中製作安裝程式",frontmatter:{},regularPath:"/installer-guide/mac-install.html",relativePath:"installer-guide/mac-install.md",key:"v-76c4d0ed",path:"/installer-guide/mac-install.html",headers:[{level:2,title:"下載 macOS：現代 OS",slug:"下載-macos-現代-os",normalizedTitle:"下載 macos：現代 os",charIndex:202},{level:2,title:"使用 App Store",slug:"使用-app-store",normalizedTitle:"使用 app store",charIndex:538},{level:2,title:"命令列軟體更新工具程式",slug:"命令列軟體更新工具程式",normalizedTitle:"命令列軟體更新工具程式",charIndex:626},{level:2,title:"Munki 的 InstallInstallMacOS 工具程式",slug:"munki-的-installinstallmacos-工具程式",normalizedTitle:"munki 的 installinstallmacos 工具程式",charIndex:641},{level:2,title:"下載 macOS：傳統 OS",slug:"下載-macos-傳統-os",normalizedTitle:"下載 macos：傳統 os",charIndex:259},{level:2,title:"設定安裝程式",slug:"設定安裝程式",normalizedTitle:"設定安裝程式",charIndex:695},{level:2,title:"傳統 BIOS 設定",slug:"傳統-bios-設定",normalizedTitle:"傳統 bios 設定",charIndex:705},{level:2,title:"設定 OpenCore 的 EFI 環境",slug:"設定-opencore-的-efi-環境",normalizedTitle:"設定 opencore 的 efi 環境",charIndex:719},{level:2,title:"現在，所有步驟都完成了，前往設定 EFI 來完成你的工作",slug:"現在-所有步驟都完成了-前往設定-efi-來完成你的工作",normalizedTitle:"現在，所有步驟都完成了，前往設定 efi 來完成你的工作",charIndex:743}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"下載 macOS：現代 OS 使用 App Store 命令列軟體更新工具程式 Munki 的 InstallInstallMacOS 工具程式 下載 macOS：傳統 OS 設定安裝程式 傳統 BIOS 設定 設定 OpenCore 的 EFI 環境 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作",content:'# 在 macOS 中製作安裝程式\n\n雖然你不需要重新安裝 macOS 來使用 OpenCore，但一些用戶更喜歡升級開機管理器後帶來的全新體驗。\n\n首先，我們要找一個 macOS 的副本。如果你只是製作一個可開機的 OpenCore 隨身碟，而不是安裝程式，你可以跳過這一步，直接格式化 USB。對於其他人來說，你可以從 App Store 下載 macOS，也可以使用 Munki 的腳本。\n\n\n# 下載 macOS：現代 OS\n\n此方法允許你下載 macOS 10.13 及更新版本，10.12 及更早版本請參見下載 macOS：傳統 OS。\n\n * macOS 12 及以上版本備註：由於最新版本的 macOS 對 USB 堆棧進行了更改，因此在安裝 macOS 之前，強烈建議你映射 USB 連接埠（使用 USBToolBox）。\n   * 注意： 在 macOS 11.3 及更新版本中，XhciPortLimit 己經失效，導致開機循環。\n     * 如果你已映射 USB 連接埠且停用了 XhciPortLimit，你可以正常啟動 macOS 11.3+。\n\n在符合你想要安裝的 OS 版本要求的 macOS 電腦上，直接進入 App Store：\n\n * 使用 App Store\n\n對於需要特定操作系統版本或無法從 App Store 下載的電腦：\n\n\n\n * 下載 macOS：現代 OS\n * 使用 App Store\n * 命令列軟體更新工具程式\n * Munki 的 InstallInstallMacOS 工具程式\n * 下載 macOS：傳統 OS\n * 設定安裝程式\n * 傳統 BIOS 設定\n * 設定 OpenCore 的 EFI 環境\n * 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作\n\n\n\n\n# 使用 App Store\n\n在符合你想要安裝的操作系統版本要求的 macOS 電腦上，直接進入 App Store 下載所需的操作系統版本，然後繼續設定安裝程式。\n\n\n# 命令列軟體更新工具程式\n\n開啟一個終端窗口，然後複製並貼上下面的命令：\n\nsoftwareupdate --list-full-installers;echo;echo "Please enter version number you wish to download:";read;$(if [ -n "$REPLY" ]; then; echo "softwareupdate --fetch-full-installer --full-installer-version "$REPLY; fi);\n\n\n\n\n這將為你提供一個可供選擇的可用版本列表。 下載後，它將儲存在你的應用程式資料夾。 然後，你可以繼續設定安裝程式。\n\n\n# Munki 的 InstallInstallMacOS 工具程式\n\n執行 macOS Monterey 12.3 或以上版本的用戶請注意\n\n從 macOS Monterey 12.3 開始，蘋果移除了對 python2.7 的支援，如果沒有它，installinstallmacos.py 將出現以下錯誤：\n\nThis tool requires the Python xattr module. Perhaps run \'pip install xattr\' to install it.\n\n\n要解決這個問題，我們建議通過在終端中執行 Xcode -select——install 來安裝 Xcode 命令列工具，然後執行 pip3 install xattr\n\n之後你可以使用 python3 而不是 python 來執行下面相同的命令：\n\nmkdir -p ~/macOS-installer && cd ~/macOS-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python3 installinstallmacos.py\n\n\n要執行它，只需要在終端窗口中複製並貼上下面的命令:\n\nmkdir -p ~/macOS-installer && cd ~/macOS-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python installinstallmacos.py\n\n\n\n\n如你所見，我們得到了一個很好的 macOS 安裝程式列表。如果你需要某個特定版本的 macOS，可以通過在它旁邊輸入數字來選擇它。在這個例子中，我們選擇 10：\n\n\n\n這將需要一段時間，因為我們正在下載一個 8GB 以上的 macOS 安裝程式，所以強烈建議你在等待的同時閱讀指南的其餘部分。\n\n完成後，你會發現在你的 ~/macOS-Installer/ 資料夾中有一個包含 macOS 安裝程式的 DMG 檔案，名為 Install_macOS_11.1-20C69.Dmg。掛載它後，你就會找到安裝程式。\n\n * 注意 1: 我們建議移動 安裝 macOS.app 到 /Applications 資料夾，因為我們將從那裡執行命令。\n * 注意 2: 在 Finder 中執行 Cmd+Shift+G 可以讓你輕鬆跳轉到 ~/macOS-installer\n\n\n\n\n\n到了這裡，跳到設定安裝程式 來完成你的工作。如果你想檢查下載的完整性，你可以查看這個校驗儲存庫，不過請注意，這些校驗和是眾包的，可能不是檢查真實性的可靠方法。\n\n\n# 下載 macOS：傳統 OS\n\n * 此方法允許你下載 OS X 的更老版本，目前支援所有 OS X 的 Intel 版本（10.4到目前版本）\n   \n   * 舊版 macOS：離線方法\n     * 支援 10.7 - 10.12，不包括 10.9\n   * 舊版 macOS：線上方法\n     * 支援 10.7 - 11\n   * 舊版 macOS：磁碟映像\n     * 支援 10.4 - 10.6\n\n\n# 設定安裝程式\n\n現在我們將格式化 USB 來為 macOS 安裝程式和 OpenCore 做準備。我們希望使用帶有 GUID 分區映射的 macOS Extended (HFS+)。這將建立兩個磁碟區：主分區 MyVolume 和第二個名為 EFI 的分區，它用作開機磁碟區，韌體將在其中檢查引導檔案。\n\n * 注意 1：通過格式化 USB 建立的 EFI 分區是隱藏的，除非你掛載它。稍後將在[設定 OpenCore 的 EFI 環境](#設定 OpenCore 的 EFI 環境)時掛載\n * 注意 2：預設情况下，磁碟工具程式只會顯示分區 - 按 Cmd/Win+2 顯示所有設備（或是你可以按顯示方式按鈕）\n * 注意 3：“傳統 macOS：線上方法”部分的用戶可以跳轉到[設定 OpenCore 的 EFI 環境](#設定 OpenCore 的 EFI 環境)\n\n\n\n接下來執行蘋果提供的 createinstallmedia 命令。請注意，該命令是假設在為名稱為 MyVolume 的 USB 建立安裝程式：\n\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n\n在 Apple Silicon 上安裝比 macOS Big Sur 更舊版本的用戶請注意\n\n如果 createinstallmedia 以 zsh:killed 或 killed:9 提示失敗，那麼很可能是安裝程序的代碼簽名有問題。要解決這個問題，你可以執行以下命令：\n\ncd /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/\ncodesign -s - -f --deep /Applications/Install\\ macOS\\ Big\\ Sur.app\n\n\n你需要安裝 Xcode 命令列工具：\n\nxcode-select --install\n\n\n這需要一些時間，所以你可能想要喝杯咖啡或繼續閱讀本指南（公平地說，你真的不應該在沒有閱讀完整內容之前一步步遵循本指南）。\n\n你也可以將 createinstallmedia 路徑替換為安裝程序所在的路徑（與磁碟名稱相同）。\n\n舊版本的 createinstallmedia 命令\n\n來自蘋果官方網站：為 macOS 製作可開機安裝磁碟\n\n# Ventura\nsudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Monterey\nsudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Big Sur\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Catalina\nsudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Mojave\nsudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# High Sierra\nsudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Sierra\nsudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ macOS\\ Sierra.app\n\n# El Capitan\nsudo /Applications/Install\\ OS\\ X\\ El\\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ El\\ Capitan.app\n\n# Yosemite\nsudo /Applications/Install\\ OS\\ X\\ Yosemite.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ Yosemite.app\n\n# Mavericks\nsudo /Applications/Install\\ OS\\ X\\ Mavericks.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ Mavericks.app --nointeraction\n\n\n\n# 傳統 BIOS 設定\n\n對於不支援 UEFI 開機的系統，請參見以下內容:\n\n傳統 BIOS 開機\n\n首先，你需要以下檔案：\n\n * BootInstall_IA32.tool 或 BootInstall_X64.tool\n   * 可以在 OpenCorePkg 的 /utilities/LegacyBoot/ 目錄下找到\n * 安裝隨身碟（在前面建立的）\n\n在你的 OpenCore build 資料夾中，前往 Utilities/LegacyBoot。在這裡你會找到一個名為 BootInstall_ARCH.tool 的檔案。這樣做的目的是將 DuetPkg 安裝到所需的磁碟。\n\n\n\n现在使用 sudo在終端中執行此工具(否則此工具可能會失敗)：\n\n# Replace X64 with IA32 if you have a 32-Bit CPU\nsudo ~/Downloads/OpenCore/Utilities/legacyBoot/BootInstall_X64.tool\n\n\n\n\n這將給你一個可用磁碟的列表，選擇你的磁碟，並提示你寫入一個新的 MBR。選擇 yes [y]，你就完成了。\n\n\n\n\n\n這將為你提供一個包含 bootia32 或 bootx64 檔案的 EFI 分區\n\n\n# 設定 OpenCore 的 EFI 環境\n\n設定 OpenCore 的 EFI 環境很簡單 - 你需要做的就是掛載我們的 EFI 系統分區。當我們使用 GUID 格式化時是會自動生成該分區，但預設是卸載的，這就是我們的朋友 MountEFI 發揮作用的地方：\n\n\n\n你會注意到，打開 EFI 分區後，它是空的。這就是樂趣的開始。\n\n\n\n\n# 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作',normalizedContent:'# 在 macos 中製作安裝程式\n\n雖然你不需要重新安裝 macos 來使用 opencore，但一些用戶更喜歡升級開機管理器後帶來的全新體驗。\n\n首先，我們要找一個 macos 的副本。如果你只是製作一個可開機的 opencore 隨身碟，而不是安裝程式，你可以跳過這一步，直接格式化 usb。對於其他人來說，你可以從 app store 下載 macos，也可以使用 munki 的腳本。\n\n\n# 下載 macos：現代 os\n\n此方法允許你下載 macos 10.13 及更新版本，10.12 及更早版本請參見下載 macos：傳統 os。\n\n * macos 12 及以上版本備註：由於最新版本的 macos 對 usb 堆棧進行了更改，因此在安裝 macos 之前，強烈建議你映射 usb 連接埠（使用 usbtoolbox）。\n   * 注意： 在 macos 11.3 及更新版本中，xhciportlimit 己經失效，導致開機循環。\n     * 如果你已映射 usb 連接埠且停用了 xhciportlimit，你可以正常啟動 macos 11.3+。\n\n在符合你想要安裝的 os 版本要求的 macos 電腦上，直接進入 app store：\n\n * 使用 app store\n\n對於需要特定操作系統版本或無法從 app store 下載的電腦：\n\n\n\n * 下載 macos：現代 os\n * 使用 app store\n * 命令列軟體更新工具程式\n * munki 的 installinstallmacos 工具程式\n * 下載 macos：傳統 os\n * 設定安裝程式\n * 傳統 bios 設定\n * 設定 opencore 的 efi 環境\n * 現在，所有步驟都完成了，前往設定 efi 來完成你的工作\n\n\n\n\n# 使用 app store\n\n在符合你想要安裝的操作系統版本要求的 macos 電腦上，直接進入 app store 下載所需的操作系統版本，然後繼續設定安裝程式。\n\n\n# 命令列軟體更新工具程式\n\n開啟一個終端窗口，然後複製並貼上下面的命令：\n\nsoftwareupdate --list-full-installers;echo;echo "please enter version number you wish to download:";read;$(if [ -n "$reply" ]; then; echo "softwareupdate --fetch-full-installer --full-installer-version "$reply; fi);\n\n\n\n\n這將為你提供一個可供選擇的可用版本列表。 下載後，它將儲存在你的應用程式資料夾。 然後，你可以繼續設定安裝程式。\n\n\n# munki 的 installinstallmacos 工具程式\n\n執行 macos monterey 12.3 或以上版本的用戶請注意\n\n從 macos monterey 12.3 開始，蘋果移除了對 python2.7 的支援，如果沒有它，installinstallmacos.py 將出現以下錯誤：\n\nthis tool requires the python xattr module. perhaps run \'pip install xattr\' to install it.\n\n\n要解決這個問題，我們建議通過在終端中執行 xcode -select——install 來安裝 xcode 命令列工具，然後執行 pip3 install xattr\n\n之後你可以使用 python3 而不是 python 來執行下面相同的命令：\n\nmkdir -p ~/macos-installer && cd ~/macos-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python3 installinstallmacos.py\n\n\n要執行它，只需要在終端窗口中複製並貼上下面的命令:\n\nmkdir -p ~/macos-installer && cd ~/macos-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python installinstallmacos.py\n\n\n\n\n如你所見，我們得到了一個很好的 macos 安裝程式列表。如果你需要某個特定版本的 macos，可以通過在它旁邊輸入數字來選擇它。在這個例子中，我們選擇 10：\n\n\n\n這將需要一段時間，因為我們正在下載一個 8gb 以上的 macos 安裝程式，所以強烈建議你在等待的同時閱讀指南的其餘部分。\n\n完成後，你會發現在你的 ~/macos-installer/ 資料夾中有一個包含 macos 安裝程式的 dmg 檔案，名為 install_macos_11.1-20c69.dmg。掛載它後，你就會找到安裝程式。\n\n * 注意 1: 我們建議移動 安裝 macos.app 到 /applications 資料夾，因為我們將從那裡執行命令。\n * 注意 2: 在 finder 中執行 cmd+shift+g 可以讓你輕鬆跳轉到 ~/macos-installer\n\n\n\n\n\n到了這裡，跳到設定安裝程式 來完成你的工作。如果你想檢查下載的完整性，你可以查看這個校驗儲存庫，不過請注意，這些校驗和是眾包的，可能不是檢查真實性的可靠方法。\n\n\n# 下載 macos：傳統 os\n\n * 此方法允許你下載 os x 的更老版本，目前支援所有 os x 的 intel 版本（10.4到目前版本）\n   \n   * 舊版 macos：離線方法\n     * 支援 10.7 - 10.12，不包括 10.9\n   * 舊版 macos：線上方法\n     * 支援 10.7 - 11\n   * 舊版 macos：磁碟映像\n     * 支援 10.4 - 10.6\n\n\n# 設定安裝程式\n\n現在我們將格式化 usb 來為 macos 安裝程式和 opencore 做準備。我們希望使用帶有 guid 分區映射的 macos extended (hfs+)。這將建立兩個磁碟區：主分區 myvolume 和第二個名為 efi 的分區，它用作開機磁碟區，韌體將在其中檢查引導檔案。\n\n * 注意 1：通過格式化 usb 建立的 efi 分區是隱藏的，除非你掛載它。稍後將在[設定 opencore 的 efi 環境](#設定 opencore 的 efi 環境)時掛載\n * 注意 2：預設情况下，磁碟工具程式只會顯示分區 - 按 cmd/win+2 顯示所有設備（或是你可以按顯示方式按鈕）\n * 注意 3：“傳統 macos：線上方法”部分的用戶可以跳轉到[設定 opencore 的 efi 環境](#設定 opencore 的 efi 環境)\n\n\n\n接下來執行蘋果提供的 createinstallmedia 命令。請注意，該命令是假設在為名稱為 myvolume 的 usb 建立安裝程式：\n\nsudo /applications/install\\ macos\\ big\\ sur.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n\n在 apple silicon 上安裝比 macos big sur 更舊版本的用戶請注意\n\n如果 createinstallmedia 以 zsh:killed 或 killed:9 提示失敗，那麼很可能是安裝程序的代碼簽名有問題。要解決這個問題，你可以執行以下命令：\n\ncd /applications/install\\ macos\\ big\\ sur.app/contents/resources/\ncodesign -s - -f --deep /applications/install\\ macos\\ big\\ sur.app\n\n\n你需要安裝 xcode 命令列工具：\n\nxcode-select --install\n\n\n這需要一些時間，所以你可能想要喝杯咖啡或繼續閱讀本指南（公平地說，你真的不應該在沒有閱讀完整內容之前一步步遵循本指南）。\n\n你也可以將 createinstallmedia 路徑替換為安裝程序所在的路徑（與磁碟名稱相同）。\n\n舊版本的 createinstallmedia 命令\n\n來自蘋果官方網站：為 macos 製作可開機安裝磁碟\n\n# ventura\nsudo /applications/install\\ macos\\ ventura.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# monterey\nsudo /applications/install\\ macos\\ monterey.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# big sur\nsudo /applications/install\\ macos\\ big\\ sur.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# catalina\nsudo /applications/install\\ macos\\ catalina.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# mojave\nsudo /applications/install\\ macos\\ mojave.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# high sierra\nsudo /applications/install\\ macos\\ high\\ sierra.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# sierra\nsudo /applications/install\\ macos\\ sierra.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ macos\\ sierra.app\n\n# el capitan\nsudo /applications/install\\ os\\ x\\ el\\ capitan.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ el\\ capitan.app\n\n# yosemite\nsudo /applications/install\\ os\\ x\\ yosemite.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ yosemite.app\n\n# mavericks\nsudo /applications/install\\ os\\ x\\ mavericks.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ mavericks.app --nointeraction\n\n\n\n# 傳統 bios 設定\n\n對於不支援 uefi 開機的系統，請參見以下內容:\n\n傳統 bios 開機\n\n首先，你需要以下檔案：\n\n * bootinstall_ia32.tool 或 bootinstall_x64.tool\n   * 可以在 opencorepkg 的 /utilities/legacyboot/ 目錄下找到\n * 安裝隨身碟（在前面建立的）\n\n在你的 opencore build 資料夾中，前往 utilities/legacyboot。在這裡你會找到一個名為 bootinstall_arch.tool 的檔案。這樣做的目的是將 duetpkg 安裝到所需的磁碟。\n\n\n\n现在使用 sudo在終端中執行此工具(否則此工具可能會失敗)：\n\n# replace x64 with ia32 if you have a 32-bit cpu\nsudo ~/downloads/opencore/utilities/legacyboot/bootinstall_x64.tool\n\n\n\n\n這將給你一個可用磁碟的列表，選擇你的磁碟，並提示你寫入一個新的 mbr。選擇 yes [y]，你就完成了。\n\n\n\n\n\n這將為你提供一個包含 bootia32 或 bootx64 檔案的 efi 分區\n\n\n# 設定 opencore 的 efi 環境\n\n設定 opencore 的 efi 環境很簡單 - 你需要做的就是掛載我們的 efi 系統分區。當我們使用 guid 格式化時是會自動生成該分區，但預設是卸載的，這就是我們的朋友 mountefi 發揮作用的地方：\n\n\n\n你會注意到，打開 efi 分區後，它是空的。這就是樂趣的開始。\n\n\n\n\n# 現在，所有步驟都完成了，前往設定 efi 來完成你的工作',charsets:{cjk:!0}},{title:"加入 OpenCore 的基礎檔案",frontmatter:{},regularPath:"/installer-guide/opencore-efi.html",relativePath:"installer-guide/opencore-efi.md",key:"v-6a3191c1",path:"/installer-guide/opencore-efi.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# 加入 OpenCore 的基礎檔案\n\n要設定 OpenCore 的資料夾結構，你需要取得 OpenCorePkg 的發行版中的 EFI 資料夾。注意，它們可能位於 IA32 或 X64 資料夾下，前者用於 32 位元韌體，後者用於 64 位元韌體：\n\n\n\n關於 DEBUG 和 RELEASE 版本:\n\n * DEBUG: 可以極大地幫助我們對啟動問題進行除錯，但是會增加一些明顯的啟動時間延遲（例如：3-5 秒後才進入選擇器)。安裝之後，你可以輕鬆地過渡到 RELEASE 版本\n * RELEASE: 更快的啟動時間，但是在 OpenCore 中幾乎沒有提供有用的除錯訊息，這使得故障排除更加困難。\n\n下載後，將 EFI 資料夾（來自 OpenCorePkg）放在 EFI 分區的根目錄：\n\n\n\n注意:\n\n * Windows 用戶： 你需要將 EFI 資料夾放到你之前建立的隨身碟的根目錄下\n * Linux 用戶： 這是我們之前建立的 OPENCORE 磁碟區\n   * 注意，方法 1 只建立 1 個分區，而方法 2 建立 2 個分區\n\n現在讓我們打開 EFI 資料夾，看看裡面有什麼：\n\n\n\n現在你會注意到它在 Drivers 和 Tools 資料夾中有一堆檔案，其中大部分都是我們不想要的：\n\n * 保留以下内容於 Drivers 資料夾內（如果適用）：\n\n驅動                     狀態   描述\nOpenUsbKbDxe.efi       可選   非 UEFI 系統必須（2012 年前）\nOpenPartitionDxe.efi        啟動 macOS 10.7-10.9 恢復程式時需要\nResetNvramEntry.efi         重置系統的 NVRAM 時需要\nOpenRuntime.efi        必須   用於正確操作\n\n內附驅動程式的更多資訊\n * AudioDxe.efi\n   * 與 macOS 中的音訊支援無關\n * CrScreenshotDxe.efi\n   * 在 UEFI 中用於截圖，我們不需要\n * HiiDatabase.efi\n   * 用於修復 GUI 支援，像在 Sandy Bridge 和更老的平台使用 OpenShell.efi\n   * 開機時不需要\n * NvmExpressDxe.efi\n   * 用於 Haswell 和更老的平台等沒有內置 NVMe 驅動程式的韌體\n   * 除非你知道自己在做什麼，否則不要使用\n * OpenCanopy.efi\n   * 這是 OpenCore 的可選 GUI，我們將在安裝後完善指南 中討論如何設定這個，所以現在刪除這個\n * OpenHfsPlus.efi\n   * 開源的 HFS+ 驅動程式，相當慢，所以我們建議不要使用，除非你知道你在做什麼。\n * OpenPartitionDxe.efi\n   * 在 OS X 10.7 到 10.9 上啓動恢復程式時需要\n     * 注意：OpenDuet 用戶（例如：沒有 UEFI）會內置這個驅動程式，一段都不需要它\n * OpenUsbKbDxe.efi\n   * 這是讓傳統 BIOS 系統運行 OpenCore 選擇器，不推薦，甚至在 Ivy Bridge 和更新的系統上有害\n * Ps2KeyboardDxe.efi + Ps2MouseDxe.efi\n   * 當你需要它時便很明顯，USB 鍵盤和滑鼠用戶不需要它\n   * 提醒：PS2 ≠ USB\n * ResetNvramEntry.efi\n   * 允許從啟動選擇器重置 NVRAM\n * UsbMouseDxe.efi\n   * 與 OpenUsbKbDxe 類似的想法，應該只需要在使用 DuetPkg 的傳統系統上\n * XhciDxe.efi\n   * 用於Sandy Bridge和更老的平台，這些電腦的韌體中沒有 XHCI 驅動程式，\n   * 只有在舊電腦上使用 USB 3.0 擴展卡時才需要\n\n * 保留以下内容於 Tools 資料夾內：\n\n工具              狀態   描述\nOpenShell.efi   可選   推薦使用，便於除錯\n\n清理後的 EFI:\n\n\n\n現在你可以將你的必要的韌體驅動程式(.efi)放在 Drivers 資料夾中，將 kext／ACPI 放在它們各自的資料夾中。有關應該使用哪些檔案的更多資訊，請參閱搜集檔案\n\n * 請注意，來自 Clover 的 UEFI 驅動程式不支援 OpenCore！(EmuVariableUEFI, AptioMemoryFix, OsxAptioFixDrv,等)。請參閱 Clover 韌體驅動程式轉換 瞭解更多支援的驅動程式和合併到 OpenCore 的驅動程式。\n\n下面是構置過的 EFI 可能 的樣子（你的可能會有所不同）：\n\n\n\n提醒:\n\n * 將 SSDT 和自訂 DSDT（.aml）放入 ACPI 資料夾\n * 將 kext（.kext）放入 Kexts 資料夾\n * 將韌體驅動程式（.efi）放入 Drivers 資料夾\n\n\n# 現在，所有步驟都完成了，前往搜集檔案 取得所需的 kext 和韌體驅動程式",normalizedContent:"# 加入 opencore 的基礎檔案\n\n要設定 opencore 的資料夾結構，你需要取得 opencorepkg 的發行版中的 efi 資料夾。注意，它們可能位於 ia32 或 x64 資料夾下，前者用於 32 位元韌體，後者用於 64 位元韌體：\n\n\n\n關於 debug 和 release 版本:\n\n * debug: 可以極大地幫助我們對啟動問題進行除錯，但是會增加一些明顯的啟動時間延遲（例如：3-5 秒後才進入選擇器)。安裝之後，你可以輕鬆地過渡到 release 版本\n * release: 更快的啟動時間，但是在 opencore 中幾乎沒有提供有用的除錯訊息，這使得故障排除更加困難。\n\n下載後，將 efi 資料夾（來自 opencorepkg）放在 efi 分區的根目錄：\n\n\n\n注意:\n\n * windows 用戶： 你需要將 efi 資料夾放到你之前建立的隨身碟的根目錄下\n * linux 用戶： 這是我們之前建立的 opencore 磁碟區\n   * 注意，方法 1 只建立 1 個分區，而方法 2 建立 2 個分區\n\n現在讓我們打開 efi 資料夾，看看裡面有什麼：\n\n\n\n現在你會注意到它在 drivers 和 tools 資料夾中有一堆檔案，其中大部分都是我們不想要的：\n\n * 保留以下内容於 drivers 資料夾內（如果適用）：\n\n驅動                     狀態   描述\nopenusbkbdxe.efi       可選   非 uefi 系統必須（2012 年前）\nopenpartitiondxe.efi        啟動 macos 10.7-10.9 恢復程式時需要\nresetnvramentry.efi         重置系統的 nvram 時需要\nopenruntime.efi        必須   用於正確操作\n\n內附驅動程式的更多資訊\n * audiodxe.efi\n   * 與 macos 中的音訊支援無關\n * crscreenshotdxe.efi\n   * 在 uefi 中用於截圖，我們不需要\n * hiidatabase.efi\n   * 用於修復 gui 支援，像在 sandy bridge 和更老的平台使用 openshell.efi\n   * 開機時不需要\n * nvmexpressdxe.efi\n   * 用於 haswell 和更老的平台等沒有內置 nvme 驅動程式的韌體\n   * 除非你知道自己在做什麼，否則不要使用\n * opencanopy.efi\n   * 這是 opencore 的可選 gui，我們將在安裝後完善指南 中討論如何設定這個，所以現在刪除這個\n * openhfsplus.efi\n   * 開源的 hfs+ 驅動程式，相當慢，所以我們建議不要使用，除非你知道你在做什麼。\n * openpartitiondxe.efi\n   * 在 os x 10.7 到 10.9 上啓動恢復程式時需要\n     * 注意：openduet 用戶（例如：沒有 uefi）會內置這個驅動程式，一段都不需要它\n * openusbkbdxe.efi\n   * 這是讓傳統 bios 系統運行 opencore 選擇器，不推薦，甚至在 ivy bridge 和更新的系統上有害\n * ps2keyboarddxe.efi + ps2mousedxe.efi\n   * 當你需要它時便很明顯，usb 鍵盤和滑鼠用戶不需要它\n   * 提醒：ps2 = usb\n * resetnvramentry.efi\n   * 允許從啟動選擇器重置 nvram\n * usbmousedxe.efi\n   * 與 openusbkbdxe 類似的想法，應該只需要在使用 duetpkg 的傳統系統上\n * xhcidxe.efi\n   * 用於sandy bridge和更老的平台，這些電腦的韌體中沒有 xhci 驅動程式，\n   * 只有在舊電腦上使用 usb 3.0 擴展卡時才需要\n\n * 保留以下内容於 tools 資料夾內：\n\n工具              狀態   描述\nopenshell.efi   可選   推薦使用，便於除錯\n\n清理後的 efi:\n\n\n\n現在你可以將你的必要的韌體驅動程式(.efi)放在 drivers 資料夾中，將 kext／acpi 放在它們各自的資料夾中。有關應該使用哪些檔案的更多資訊，請參閱搜集檔案\n\n * 請注意，來自 clover 的 uefi 驅動程式不支援 opencore！(emuvariableuefi, aptiomemoryfix, osxaptiofixdrv,等)。請參閱 clover 韌體驅動程式轉換 瞭解更多支援的驅動程式和合併到 opencore 的驅動程式。\n\n下面是構置過的 efi 可能 的樣子（你的可能會有所不同）：\n\n\n\n提醒:\n\n * 將 ssdt 和自訂 dsdt（.aml）放入 acpi 資料夾\n * 將 kext（.kext）放入 kexts 資料夾\n * 將韌體驅動程式（.efi）放入 drivers 資料夾\n\n\n# 現在，所有步驟都完成了，前往搜集檔案 取得所需的 kext 和韌體驅動程式",charsets:{cjk:!0}},{title:"在 Windows 中製作安裝程式",frontmatter:{},regularPath:"/installer-guide/windows-install.html",relativePath:"installer-guide/windows-install.md",key:"v-6a91c3ed",path:"/installer-guide/windows-install.html",headers:[{level:2,title:"下載 macOS",slug:"下載-macos",normalizedTitle:"下載 macos",charIndex:206},{level:2,title:"製作安裝程式",slug:"製作安裝程式",normalizedTitle:"製作安裝程式",charIndex:13},{level:3,title:"磁碟管理方法",slug:"磁碟管理方法",normalizedTitle:"磁碟管理方法",charIndex:2136},{level:3,title:"Rufus 方法",slug:"rufus-方法",normalizedTitle:"rufus 方法",charIndex:2192},{level:3,title:"diskpart 方法",slug:"diskpart-方法",normalizedTitle:"diskpart 方法",charIndex:2253},{level:2,title:"現在，所有步驟都完成了，前往設定 EFI 來完成你的工作",slug:"現在-所有步驟都完成了-前往設定-efi-來完成你的工作",normalizedTitle:"現在，所有步驟都完成了，前往設定 efi 來完成你的工作",charIndex:4783}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"下載 macOS 製作安裝程式 磁碟管理方法 Rufus 方法 diskpart 方法 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作",content:'# 在 Windows 中製作安裝程式\n\n雖然你不需要重新安裝 macOS 來使用 OpenCore，但一些用戶更喜歡升級開機管理器後帶來的全新體驗。\n\n在開始之前，你需要準備以下東西：\n\n * 4GB 的 USB 隨身碟\n\n * 對於大於 16GB 的隨身碟，使用 Rufus method 格式化成 FAT32。\n\n * macrecovery.py\n   \n   * 這需要安裝 Python 3\n\n\n# 下載 macOS\n\n要取得傳統的安裝程式非常容易，首先下載 OpenCorePkg 然後轉到 /Utilities/macrecovery/. 接下來，點擊目前資料夾路徑旁邊後輸入 cmd，就能在目前目錄中打開命令提示字符：\n\n\n\n現在根據你想要的 macOS 版本執行以下其中一個命令（注意：這些腳本依賴於 Python 3 的支援，如果你還沒有的話請先安裝）：\n\n# Lion (10.7):\npython3 macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# 最新版本\n# ie. Ventura (13)\npython3 macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n * macOS 12 及以上版本注意: 由於最新版本的 macOS 對 USB 堆棧進行了更改，因此在安裝 macOS 之前，強烈建議你使用 USBToolBox 來映射 USB 連接埠。\n   * 注意: 在 macOS 11.3 及更新版本中，XhciPortLimit 己經失效，導致開機循環.\n     * 如果你已映射 USB 連接埠且停用了 XhciPortLimit，你可以正常啟動 macOS 11.3+。\n\n這需要一些時間，命令執行完畢後，你應該會找到 BaseSystem 或 RecoveryImage 檔案：\n\n\n\nBASESYSTEM   RECOVERYIMAGE\n             \n\n現在安裝程式已經下載完畢，接下來我們要把隨身碟格式化。\n\n\n# 製作安裝程式\n\n在這裡，我們將格式化我們的 USB 隨身碟並將 macOS 檔案放進隨身碟裡，我們有三個選擇（實際上其中兩個使用了同一工具）：\n\n * 磁碟管理方法\n   * 基於 GUI，最簡單的方式\n   * 只支援 UEFI 系统（例如：2012+）\n * Rufus 方法\n   * 基於 GUI，最簡單的方式\n   * 適用於大容量的 USB 隨身碟（16GB 以上）\n * diskpart 方法\n   * 基於命令列，更多的工作\n   * 對舊版系統是必需的（如：非 UEFI、2012 年之前）\n\n\n# 磁碟管理方法\n\n只需打開磁碟管理，並將隨身碟格式化為 FAT32：\n\n 1. 右鍵點擊工作列上的「開始」按鈕並選擇“磁碟管理”。\n 2. 您應該會看到所有磁碟和磁碟區。在下半部分，你會看到你的裝置。找出你的隨身碟。\n 3. 你需要將隨身碟格式化為 FAT32 磁碟區。\n\n * 如果你的隨身碟上有多個分區，右鍵點擊每個隨身碟的磁碟區並按移除磁碟區（這將刪除所有資料，請確保你已備份，只刪除 USB 的分區）\n   * 之後，右鍵點擊未分配的空間,建立一個新的簡單磁碟區。請確保它是 FAT32，並且至少有 1GB 或 2GB 大。命名為「EFI」。\n * 否則，鍵點擊隨身碟的磁碟區，按「格式化」，並設定為 FAT32。\n\n\n\n接下來，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾。然後將下載的 baseSystem 或 RecoveryImage 檔案移動到這裡。請確保將 .dmg 和 .chunklist 檔案都複製到這個資料夾：\n\n\n\n現在取得之前下載的 OpenCorePkg 並打開它：\n\n\n\n這裡我們看到 IA32（32 位元 CPU）和 X64（64 位元 CPU）資料夾，根據你的硬體選擇一個最適合的，並打開它。接下来，取得裡面的 EFI 資料夾，並將其與 com.apple.recovery.boot 一起放在隨身碟的根目錄上。完成後，它看起來應該像這樣：\n\n\n\n\n# Rufus 方法\n\n 1. 下載 Rufus\n 2. 將 BOOT 選項設置為「無引導」\n 3. 設定檔案系統為 Large FAT32\n 4. 按「開始」\n 5. 刪除隨身碟中所有「autorun」檔案\n\n\n\n接下來，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾。然後將下載的 baseSystem 或 RecoveryImage 檔案移動到這裡。請確保將 .dmg 和 .chunklist 檔案都複製到這個資料夾：\n\n\n\n現在取得之前下載的 OpenCorePkg 並打開它：\n\n\n\n這裡我們看到 IA32（32 位元 CPU）和 X64（64 位元 CPU）資料夾，根據你的硬體選擇一個最適合的，並打開它。接下来，取得裡面的 EFI 資料夾，並將其與 com.apple.recovery.boot 一起放在隨身碟的根目錄上。完成後，它看起來應該像這樣：\n\n\n\n\n# diskpart 方法\n\ndiskpart 方法\n\n按 Windows+R 並输入 diskpart 。\n\n執行以下命令：\n\n# List available disks\nlist disk\n# Select your disk(ie. disk 1)\nselect disk 1\n# Format the drive\nclean\n# Convert to GPT\n# Due to an odd bug with BOOTICE and DuetPkg, MBR disks will fail to boot\nconvert gpt\n# Create a new partition\ncreate partition primary\n# Select your partition\n# Running clean ensures we only have 1 partition so it will be "partition 1"\nselect partition 1\n# Format the drive as FAT32\nformat fs=fat32 quick\n# Assign a drive letter(ie. Drive E, ensure it\'s not currently in use)\nASSIGN LETTER=E\n\n\n接下來，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾。然後將下載的 baseSystem 或 RecoveryImage 檔案移動到這裡。請確保將 .dmg 和 .chunklist 檔案都複製到這個資料夾：\n\n\n\n現在取得之前下載的 OpenCorePkg 並打開它：\n\n\n\n這裡我們看到 IA32（32 位元 CPU）和 X64（64 位元 CPU）資料夾，根據你的硬體選擇一個最適合的，並打開它。接下来，取得裡面的 EFI 資料夾，並將其與 com.apple.recovery.boot 一起放在隨身碟的根目錄上。完成後，它看起來應該像這樣：\n\n\n\n傳統 BIOS 安裝設定\n\n如果您的韌體不支援 UEFI，請參閱以下說明:\n\n首先，你需要以下東西：\n\n * 7-Zip\n * BOOTICE\n * OpenCorePkg\n\n接下來，打開 BOOTICE 並確保選擇了正確的磁碟。\n\n\n\n接下來，按「Process MBR」，然後按「Restore MBR」，並在 OpenCorePkg 中從 Utilities/LegacyBoot/ 中選擇 boot0 檔案：\n\nRESTORE MBR   RESTORE BOOT0 FILE\n              \n\n返回主界面，按「Process MBR」，然後按「Restore MBR」，從 OpenCorePkg 的 Utilities/LegacyBoot/ 中選擇 boot1f32 檔案：\n\nRESTORE PBR   RESTORE BOOT1F32 FILE\n              \n\n完成後，回到你的隨身碟，做最後一件事。從 Utilities/LegacyBoot/ 中取得 bootx64（64 位元 CPU）或 bootia32（32位元 CPU）檔案，並將其放在隨身碟的根目錄下。 將這個檔案重新命名為 boot 以確保 DuetPkg 可以正常執行:\n\n\n\n\n# 現在，所有步驟都完成了，前往設定 EFI 來完成你的工作',normalizedContent:'# 在 windows 中製作安裝程式\n\n雖然你不需要重新安裝 macos 來使用 opencore，但一些用戶更喜歡升級開機管理器後帶來的全新體驗。\n\n在開始之前，你需要準備以下東西：\n\n * 4gb 的 usb 隨身碟\n\n * 對於大於 16gb 的隨身碟，使用 rufus method 格式化成 fat32。\n\n * macrecovery.py\n   \n   * 這需要安裝 python 3\n\n\n# 下載 macos\n\n要取得傳統的安裝程式非常容易，首先下載 opencorepkg 然後轉到 /utilities/macrecovery/. 接下來，點擊目前資料夾路徑旁邊後輸入 cmd，就能在目前目錄中打開命令提示字符：\n\n\n\n現在根據你想要的 macos 版本執行以下其中一個命令（注意：這些腳本依賴於 python 3 的支援，如果你還沒有的話請先安裝）：\n\n# lion (10.7):\npython3 macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# 最新版本\n# ie. ventura (13)\npython3 macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n * macos 12 及以上版本注意: 由於最新版本的 macos 對 usb 堆棧進行了更改，因此在安裝 macos 之前，強烈建議你使用 usbtoolbox 來映射 usb 連接埠。\n   * 注意: 在 macos 11.3 及更新版本中，xhciportlimit 己經失效，導致開機循環.\n     * 如果你已映射 usb 連接埠且停用了 xhciportlimit，你可以正常啟動 macos 11.3+。\n\n這需要一些時間，命令執行完畢後，你應該會找到 basesystem 或 recoveryimage 檔案：\n\n\n\nbasesystem   recoveryimage\n             \n\n現在安裝程式已經下載完畢，接下來我們要把隨身碟格式化。\n\n\n# 製作安裝程式\n\n在這裡，我們將格式化我們的 usb 隨身碟並將 macos 檔案放進隨身碟裡，我們有三個選擇（實際上其中兩個使用了同一工具）：\n\n * 磁碟管理方法\n   * 基於 gui，最簡單的方式\n   * 只支援 uefi 系统（例如：2012+）\n * rufus 方法\n   * 基於 gui，最簡單的方式\n   * 適用於大容量的 usb 隨身碟（16gb 以上）\n * diskpart 方法\n   * 基於命令列，更多的工作\n   * 對舊版系統是必需的（如：非 uefi、2012 年之前）\n\n\n# 磁碟管理方法\n\n只需打開磁碟管理，並將隨身碟格式化為 fat32：\n\n 1. 右鍵點擊工作列上的「開始」按鈕並選擇“磁碟管理”。\n 2. 您應該會看到所有磁碟和磁碟區。在下半部分，你會看到你的裝置。找出你的隨身碟。\n 3. 你需要將隨身碟格式化為 fat32 磁碟區。\n\n * 如果你的隨身碟上有多個分區，右鍵點擊每個隨身碟的磁碟區並按移除磁碟區（這將刪除所有資料，請確保你已備份，只刪除 usb 的分區）\n   * 之後，右鍵點擊未分配的空間,建立一個新的簡單磁碟區。請確保它是 fat32，並且至少有 1gb 或 2gb 大。命名為「efi」。\n * 否則，鍵點擊隨身碟的磁碟區，按「格式化」，並設定為 fat32。\n\n\n\n接下來，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾。然後將下載的 basesystem 或 recoveryimage 檔案移動到這裡。請確保將 .dmg 和 .chunklist 檔案都複製到這個資料夾：\n\n\n\n現在取得之前下載的 opencorepkg 並打開它：\n\n\n\n這裡我們看到 ia32（32 位元 cpu）和 x64（64 位元 cpu）資料夾，根據你的硬體選擇一個最適合的，並打開它。接下来，取得裡面的 efi 資料夾，並將其與 com.apple.recovery.boot 一起放在隨身碟的根目錄上。完成後，它看起來應該像這樣：\n\n\n\n\n# rufus 方法\n\n 1. 下載 rufus\n 2. 將 boot 選項設置為「無引導」\n 3. 設定檔案系統為 large fat32\n 4. 按「開始」\n 5. 刪除隨身碟中所有「autorun」檔案\n\n\n\n接下來，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾。然後將下載的 basesystem 或 recoveryimage 檔案移動到這裡。請確保將 .dmg 和 .chunklist 檔案都複製到這個資料夾：\n\n\n\n現在取得之前下載的 opencorepkg 並打開它：\n\n\n\n這裡我們看到 ia32（32 位元 cpu）和 x64（64 位元 cpu）資料夾，根據你的硬體選擇一個最適合的，並打開它。接下来，取得裡面的 efi 資料夾，並將其與 com.apple.recovery.boot 一起放在隨身碟的根目錄上。完成後，它看起來應該像這樣：\n\n\n\n\n# diskpart 方法\n\ndiskpart 方法\n\n按 windows+r 並输入 diskpart 。\n\n執行以下命令：\n\n# list available disks\nlist disk\n# select your disk(ie. disk 1)\nselect disk 1\n# format the drive\nclean\n# convert to gpt\n# due to an odd bug with bootice and duetpkg, mbr disks will fail to boot\nconvert gpt\n# create a new partition\ncreate partition primary\n# select your partition\n# running clean ensures we only have 1 partition so it will be "partition 1"\nselect partition 1\n# format the drive as fat32\nformat fs=fat32 quick\n# assign a drive letter(ie. drive e, ensure it\'s not currently in use)\nassign letter=e\n\n\n接下來，在這個隨身碟的根目錄下建立一個名為 com.apple.recovery.boot 的資料夾。然後將下載的 basesystem 或 recoveryimage 檔案移動到這裡。請確保將 .dmg 和 .chunklist 檔案都複製到這個資料夾：\n\n\n\n現在取得之前下載的 opencorepkg 並打開它：\n\n\n\n這裡我們看到 ia32（32 位元 cpu）和 x64（64 位元 cpu）資料夾，根據你的硬體選擇一個最適合的，並打開它。接下来，取得裡面的 efi 資料夾，並將其與 com.apple.recovery.boot 一起放在隨身碟的根目錄上。完成後，它看起來應該像這樣：\n\n\n\n傳統 bios 安裝設定\n\n如果您的韌體不支援 uefi，請參閱以下說明:\n\n首先，你需要以下東西：\n\n * 7-zip\n * bootice\n * opencorepkg\n\n接下來，打開 bootice 並確保選擇了正確的磁碟。\n\n\n\n接下來，按「process mbr」，然後按「restore mbr」，並在 opencorepkg 中從 utilities/legacyboot/ 中選擇 boot0 檔案：\n\nrestore mbr   restore boot0 file\n              \n\n返回主界面，按「process mbr」，然後按「restore mbr」，從 opencorepkg 的 utilities/legacyboot/ 中選擇 boot1f32 檔案：\n\nrestore pbr   restore boot1f32 file\n              \n\n完成後，回到你的隨身碟，做最後一件事。從 utilities/legacyboot/ 中取得 bootx64（64 位元 cpu）或 bootia32（32位元 cpu）檔案，並將其放在隨身碟的根目錄下。 將這個檔案重新命名為 boot 以確保 duetpkg 可以正常執行:\n\n\n\n\n# 現在，所有步驟都完成了，前往設定 efi 來完成你的工作',charsets:{cjk:!0}},{title:"搜集檔案",frontmatter:{},regularPath:"/ktext.html",relativePath:"ktext.md",key:"v-2d36c3cd",path:"/ktext.html",headers:[{level:2,title:"韌體驅動",slug:"韌體驅動",normalizedTitle:"韌體驅動",charIndex:220},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:230},{level:3,title:"老舊系統用戶",slug:"老舊系統用戶",normalizedTitle:"老舊系統用戶",charIndex:238},{level:2,title:"Kexts",slug:"kexts",normalizedTitle:"kexts",charIndex:248},{level:3,title:"必要的檔案",slug:"必要的檔案",normalizedTitle:"必要的檔案",charIndex:259},{level:3,title:"VirtualSMC 插件",slug:"virtualsmc-插件",normalizedTitle:"virtualsmc 插件",charIndex:270},{level:3,title:"顯示",slug:"顯示",normalizedTitle:"顯示",charIndex:289},{level:3,title:"音訊",slug:"音訊",normalizedTitle:"音訊",charIndex:297},{level:3,title:"乙太網路卡",slug:"乙太網路卡",normalizedTitle:"乙太網路卡",charIndex:305},{level:3,title:"USB",slug:"usb",normalizedTitle:"usb",charIndex:316},{level:3,title:"Wi-Fi 和 藍牙",slug:"wi-fi-和-藍牙",normalizedTitle:"wi-fi 和 藍牙",charIndex:325},{level:3,title:"AMD CPU 專用 kext",slug:"amd-cpu-專用-kext",normalizedTitle:"amd cpu 專用 kext",charIndex:341},{level:3,title:"額外",slug:"額外",normalizedTitle:"額外",charIndex:362},{level:3,title:"筆記型電腦輸入",slug:"筆記型電腦輸入",normalizedTitle:"筆記型電腦輸入",charIndex:370},{level:2,title:"SSDT",slug:"ssdt",normalizedTitle:"ssdt",charIndex:381},{level:3,title:"桌面電腦",slug:"桌面電腦",normalizedTitle:"桌面電腦",charIndex:391},{level:3,title:"高端桌面電腦",slug:"高端桌面電腦",normalizedTitle:"高端桌面電腦",charIndex:401},{level:3,title:"筆記型電腦",slug:"筆記型電腦",normalizedTitle:"筆記型電腦",charIndex:370}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"韌體驅動 通用 老舊系統用戶 Kexts 必要的檔案 VirtualSMC 插件 顯示 音訊 乙太網路卡 USB Wi-Fi 和 藍牙 AMD CPU 專用 kext 額外 筆記型電腦輸入 SSDT 桌面電腦 高端桌面電腦 筆記型電腦",content:"# 搜集檔案\n\n本章節是為了收集令 macOS 開機的各類檔案，我們希望你在開始之前已經很好地了解你的硬體，並且最好有安裝 Hackintosh 的經驗，因為我們不會在這裡深入探討。\n\n> 知道我的硬體是否被支援的最佳方法是什麼？\n\n請參閱硬體限制頁面 ，以更好地了解 macOS 啟動時需要什麼，Clover 和 OpenCore 之間的硬體支援非常相似。\n\n> 有什麼方法可以找出我有什麼硬體？\n\n參閱上一頁：尋找你的硬體\n\n\n\n * 韌體驅動\n   * 通用\n   * 老舊系統用戶\n * Kexts\n   * 必要的檔案\n   * VirtualSMC 插件\n   * 顯示\n   * 音訊\n   * 乙太網路卡\n   * USB\n   * Wi-Fi 和 藍牙\n   * AMD CPU 專用 kext\n   * 額外\n   * 筆記型電腦輸入\n * SSDT\n   * 桌面電腦\n   * 高端桌面電腦\n   * 筆記型電腦\n\n\n\n\n# 韌體驅動\n\n韌體驅動程式是 OpenCore 在 UEFI 環境中使用的驅動程式。它們主要是通過擴展 OpenCore 的補丁功能或在 OpenCore 選擇器（例如 HFS 磁碟）中向你顯示不同類型的磁碟來啟動電腦。\n\n * 位置說明: 這些檔案 必須 放在 EFI/OC/Drivers/ 目錄下\n\n\n# 通用\n\n必需的驅動程式\n\n對於大多數系統，你只需要 2 個 .efi 的驅動程式來開機和運行:\n\n * HfsPlus.efi(必需)\n   * 用於檢查和顯示 HFS 磁碟（例如：macOS 安裝程式和恢復磁碟區／映像）。不要混合使用其他 HFS 驅動程式\n   * 對於 Sandy Bridge 和更老的平台（及低端 Ivy Bridge（i3 和 Celeron）），請參閱下面的老舊系統部分\n * OpenRuntime.efi(必需)\n   * 代替 AptioMemoryFix.efi, 用作 OpenCore 的擴展，以幫助修補 boot.efi 來修復 NVRAM 和更好的記憶體管理。\n   * 提醒，這個檔案已包含在我們之前下載的 OpenCorePkg 裡\n\n\n# 老舊系統用戶\n\n除上述外，如果您的硬體不支援 UEFI（2011 年和更早），那麼您將需要以下驅動程式。請密切關注每一項的內容，因為你可能無需要全數使用：\n\n * OpenUsbKbDxe.efi\n   * 用於讓使用 DuetPkg 的老舊系統上運行 OpenCore 選擇器， 不推薦，甚至在 UEFI（Ivy Bridge 和更新的）系統上有害\n * HfsPlusLegacy.efi\n   * HfsPlus 的舊版變體，用於缺少 RDRAND 指令支持的系統。這通常在 Sandy Bridge和更老的（以及低端的 Ivy Bridge（i3 和 Celeron））平台出現\n   * 不要將其與 HfsPlus.efi 混合使用，請根據您的硬體選擇其中之一\n * OpenPartitionDxe\n   * 在 OS X 10.7 到 10.9 上啟動恢復程式時需要\n     * 此文件已包含在 OpenCorePkg 的 EFI/OC/Drivers 之下\n     * 注意：OpenDuet 用戶（例如：沒有 UEFI）將內置此驅動程式，這些電腦並不需要它\n\n將這些文件放在 EFI 的 Drivers 資料夾中\n\n32 位元的詳細資訊\n\n對於那些使用 32 位元的處理器，您也需要取得這些驅動程式\n\n * HfsPlus32\n   * 用於 32 位元 CPU 的 HfsPlusLegacy 的替代品，不要將其與其他 HFS.efi 驅動程式混合使用\n\n\n# Kexts\n\nkext 是指 kernel extension，你可以把它想像成 macOS 的驅動程式，這些文件將放進 EFI 中的 Kexts 資料夾。\n\n * Windows 和 Linux 注意：這些操作系統視 kext 為普通的資料夾，請仔細檢查你正在安裝的資料夾是否帶有 .kext 副檔名（如果缺少，不要手動添加）。\n   * 如果任意 kext 還包含一個 .dSYM 檔案，你可以簡單地刪除它。它們只用於除錯目的。\n * 位置注意: 這些檔案 必須 放在 EFI/OC/Kexts/ 目錄下。\n\n下面列出的大多數預編譯 kext 都可以在 build repo 中找到。這裡的 kext 在每次有新的提交時都會編譯一次。\n\n\n# 必要的檔案\n\n必要的 kext\n\n如果沒有下面的 2 個檔案，系統就無法啟動：\n\n * Lilu(必需)\n   * 一個修補許多處理程序的 kext，被 AppleALC、WhateverGreen、VirtualSMC 和許多其他 kext 所依賴。沒有 Lilu，他們就無法工作。\n   * 請注意，雖然 Lilu 最低支援 Mac OS X 10.4 版本，但許多插件只能在較新的版本上使用。\n * VirtualSMC(必需)\n   * 模擬真實 Mac 上的 SMC 芯片，如果沒有這個，macOS 將無法啟動\n   * 要求 Mac OS X 10.4 或更新版本\n\n\n# VirtualSMC 插件\n\n電腦開機時不需要以下插件，因為它們僅增加額外的硬體監控等系統功能。除非另有說明，這些插件都是隨 VirtualSMC 附帶的\n\n提示\n\n雖然 VirtualSMC 支持 10.4，但插件可能需要更新的版本。\n\n * SMCProcessor.kext\n   * 用於監控 Intel CPU 的溫度\n   * 不適用於 AMD CPU 系統\n   * 需要 Mac OS X 10.7 或更新版本\n * SMCAMDProcessor\n   * 用於監控 AMD Zen 系列 CPU 的溫度\n   * 正在積極開發中，可能不穩定\n   * 需要 AMDRyzenCPUPowerManagement (參見 AMD CPU 專用的 Kext)\n   * 需要 macOS 10.13 或更新版本\n * SMCRadeonGPU\n   * 用於監控 AMD GPU 的溫度\n   * 需要來自相同儲存庫的 RadeonSensor\n   * 需要 macOS 11 或更新版本\n * SMCSuperIO.kext\n   * 用於監控風扇轉速\n   * 不適用於基於 AMD CPU 的系統\n   * 需要 Mac OS X 10.6 或更新的版本\n * SMCLightSensor.kext\n   * 用於筆記型電腦的環境光傳感器\n   * 如果你沒有環境光傳感器，請不要使用。（例如桌面電腦），否則會導致問題\n   * 需要 Mac OS X 10.6 或更新的版本\n * SMCBatteryManager.kext\n   * 用於測量筆記型電腦的電池讀數\n   * 不要在桌面電腦上使用\n   * 需要 Mac OS X 10.4 或更新的版本\n * SMCDellSensors.kext\n   * 允許對支持系統管理模式（SMM）的 Dell 電腦的風扇進行更精細的監控和控制\n   * 如果你沒有支援的 Dell 電腦，請不要使用，主要是 Dell 筆記型電腦可以從這個 kext 中受益\n   * 需要 Mac OS X 10.7 或更新的版本\n\n\n# 顯示\n\n * WhateverGreen(必需)\n   * 用於圖形修補、DRM 修復、Board ID 檢查、幀緩衝區修復等等的 Lilu 插件；（幾乎）所有 GPU 都因為這個 kext 而受益。\n   * 注意內附的 SSDT-PNLF.dsl 文件只適用於筆記本電腦和 AIO，請參閱ACPI 入門教學 以取得更多資訊\n   * 如果你使用 AMD Vega iGPU，請不要使用，請參閱 AMD CPU 專用的 Kext\n   * 需要 Mac OS X 10.6 或更新的版本\n\n\n# 音訊\n\n * AppleALC\n   * 用於修補 AppleHDA，支援大多數集成的聲音控制器\n   * AppleALCU.kext 是 AppleALC 的精簡版，只支持數位音訊，但你仍然可以使用 AppleALC.kext 在數位音訊系統上\n   * AMD 15h/16h 使用 AppleALC 可能會有問題。而麥克風的支援在 Ryzen/Threadripper 系統則很少見\n   * 需要 OS X 10.4 或更新版本\n\n舊版音訊 Kext\n\n對於那些計劃使用 10.7 或更舊版本的用戶，可以選擇這些 kext：\n\n * VoodooHDA\n   \n   * 需要 OS X 10.6 或更新版本\n\n * VoodooHDA-FAT\n   \n   * 與上述類似，但是支援 32 及 64 位元內核，因此非常適合用於 OS X 10.4-5 和 32 位元 CPU\n\n\n# 乙太網路卡\n\n在這裡，我們假設您知道系統的網路卡型號。提醒您：產品規格頁面很可能會列出網路卡的類型。\n\n * IntelMausi\n   * 對於大多數 Intel 網路卡，基於 I211 的芯片組將需要 SmallTreeIntel82576 kext\n   * 支援 Intel 的 82578、82579、I217、I218 和 I219 網路卡\n   * 需要 OS X 10.9 或更新版本，舊版的 10.6-10.8 操作系統用戶可以使用 IntelSnowMausi 代替\n * AppleIGB\n   * 在 macOS Monterey 及以上版本上使用 I211 網路卡時需要\n   * 可能在一些網路卡上出現不穩定的問題，建議留在 Big Sur 並使用 SmallTree\n   * 大多數使用 Intel 網路卡的 AMD 主板都需要\n   * 需要 macOS 12 及以上版本\n * SmallTreeIntel82576\n   * 在 macOS Big Sur 及以下版本使用 I211 網路卡時需要，基於 SmallTree kext，但有所修補以支援 I211（在 macOS 12 Monterey 或以上不起作用）\n   * 大多數使用 Intel 網路卡的 AMD 主板都需要\n   * 需要 OS X 10.9-12 (v1.0.6)，macOS 10.13-14 (v1.2.5)，macOS 10.15+ (v1.3.0)\n * AtherosE2200Ethernet\n   * 用於 Atheros 和 Killer 網路卡\n   * 需要 OS X 10.8 或更新的版本\n   * 注意:Atheros Killer E2500 型號實際上是基於 Realtek 的，這些電腦的用戶請使用 RealtekRTL8111 代替\n * RealtekRTL8111\n   * 用於 Realtek 的千兆以太網路卡\n   * v2.2.0 及以下版本需要 OS X 10.8 及以上，v2.2.2 版本需要 macOS 10.12 及以上，v2.3.0 及以上版本需要 macOS 10.14 及以上\n   * **注意：**有時最新版本的 kext 可能無法在讓您的以太網正常工作。如果你遇到這個問題，請嘗試舊版本。\n * LucyRTL8125Ethernet\n   * 用於 Realtek的 2.5Gb 以太網路卡\n   * 需要 macOS 10.15 或更新的版本\n * 對於 Intel 的 I225-V 網路卡，相關修補已在桌面平台 Comet Lake 的 DeviceProperties 部分中提到，不需要 kext。\n   * 需要 macOS 10.15 或更新的版本\n * 對於 Intel 的 I350 網路卡，相關修補已在 HEDT 平台 Sandy 和 Ivy Bridge-E 的 DeviceProperties 部分中提到，不需要 kext。\n   * 需要 OS X 10.10 或更新的版本\n\n舊版乙太網路卡的 Kexts\n\n無論是安裝舊版 macOS 還是舊的電腦硬體。\n\n * AppleIntele1000e\n   * 主要用於基於 10/100MBe 的 Intel 以太網路卡\n   * 需要 OS X 10.6 或更新的版本\n * RealtekRTL8100\n   * 主要用於基於 10/100MBe 的 Realtek 以太網路卡\n   * 需要 macOS 10.12 或更新的版本（v2.0.0+）\n * BCM5722D\n   * 主要用於基於 BCM5722 的 Broadcom 以太網路卡\n   * 需要 OS X 10.6 或更新的版本\n\n請記住，某些網路卡實際上在 macOS 中是原生支援的：\n\n原生支援的網路卡\n\n# Aquantia 系列\n\n# AppleEthernetAquantiaAqtion.kext\npci1d6a,1    = Aquantia AQC107\npci1d6a,d107 = Aquantia AQC107\npci1d6a,7b1  = Aquantia AQC107\npci1d6a,80b1 = Aquantia AQC107\npci1d6a,87b1 = Aquantia AQC107\npci1d6a,88b1 = Aquantia AQC107\npci1d6a,89b1 = Aquantia AQC107\npci1d6a,91b1 = Aquantia AQC107\npci1d6a,92b1 = Aquantia AQC107\npci1d6a,c0   = Aquantia AQC113\npci1d6a,4c0  = Aquantia AQC113\n\n\n注意：由於許多 Aquania 網路卡上的韌體都是過時的，您可能需要在 Linux/Windows 中更新韌體，以確保它與 macOS 相容。\n\n# Intel 系列\n\n# AppleIntel8254XEthernet.kext\npci8086,1096 = Intel 80003ES2LAN\npci8086,100f = Intel 82545EM\npci8086,105e = Intel 82571EB/82571GB\n\n# AppleIntelI210Ethernet.kext\npci8086,1533 = Intel I210\npci8086,15f2 = Intel I225LM (macOS 10.15新增)\n\n# Intel82574L.kext\npci8086,104b = Intel 82566DC\npci8086,10f6 = Intel 82574L\n\n\n\n# Broadcom 系列\n\n# AppleBCM5701Ethernet.kext\npci14e4,1684 = Broadcom BCM5764M\npci14e4,16b0 = Broadcom BCM57761\npci14e4,16b4 = Broadcom BCM57765\npci14e4,1682 = Broadcom BCM57762\npci14e4,1686 = Broadcom BCM57766\n\n\n\n# USB\n\n * USBToolBox（tool 和 kext）\n   \n   * 用於 Windows 和 macOS 的 USB 映射工具。\n   * 強烈建議在安裝 macOS 之前映射你的 USB 連接埠，以避免任何連接埠限制問題\n   * 功能\n     * 支援從 Windows 和 macOS 映射(Linux 支援正在開發中)\n     * 可以使用 USBToolBox kext 或本機 Apple kext 構建一個映射表（AppleUSBHostMergeProperties）\n     * 支持多種匹配方式\n     * 支持配套連接埠（Windows）\n\n * XHCI-unsupported\n   \n   * 有使用非原生 USB 控制器的電腦需要這個 kext\n   * 基於 AMD CPU 的系統則不需要\n   * 需要這些的常見芯片組：\n     * H370\n     * B360\n     * H310\n     * Z390 (Mojave 和更新版本不需要)\n     * X79\n     * X99\n     * ASRock Intel 主板 (B460/Z490+ 板不需要)\n\n\n# Wi-Fi 和 藍牙\n\n# 非原生藍牙卡\n\n * BlueToolFixup\n   * 修補 macOS 12 及以上版本的藍牙協議堆棧以支援第三方藍牙卡\n   * 所有非原生（非蘋果原廠的 Broadcom、Intel 等）的藍牙卡都需要這個 kext\n   * 包含在BrcmPatchRAM zip 檔案中\n   * 不要在 macOS 11 和更舊的版本使用\n\n# Intel\n\n * AirportItlwm\n   * 增加了對多種 Intel 無線網卡的支援，並集成了 IO80211Family，讓網卡能在恢復模式中工作\n   * 需要 macOS 10.13 或更新版本，並且要啟用蘋果的安全開機才能正常運行\n * Itlwm\n   * AirportItlwm 的替代品，針對無法啟用蘋果安全開機的系統\n   * 需要 Heliport\n   * 它將被視為以太網路卡，你必須通過 Heliport 連接 Wi-Fi\n   * 在 macOS 恢復模式中無法使用\n * IntelBluetoothFirmware\n   * 為 macOS 增加 Intel 無線網卡的藍牙支援（如無線網卡同時支援藍牙）\n   * 除了修補 macOS 中的錯誤之外，還可以使用 IntelBTPatcher（已包含）\n   * 需要 macOS 10.13 或更新的版本\n   * 在 macOS 10.13 - 11 中，你還需要 IntelBluetoothInjector（已包含）\n\n更多關於啟用 AirportItlwm 的資訊\n\n要讓 OpenCore 支援並啟用 AirportItlwm，你需要：\n\n * 啟用 Misc -> Security -> SecureBootModel 並將其設置為 Default 或其他有效值\n   * 這將在本指南後部和安裝後完善指南中討論：Apple Secure Boot\n * 如果你不能啟用 SecureBootModel，你仍然可以強制注入 IO80211Family（非常不建议）\n   * 在 config.plist 檔案的 Kernel -> Force 下設定以下内容。（稍後將會討論）：\n\n\n\n# Broadcom\n\n * AirportBrcmFixup\n   * 修補非蘋果或 fenvi 的 Broadcom 無線網卡 不能在 Intel, Killer, Realtek 等網卡上工作\n   * 需要 OS X 10.10 或更新的版本\n   * 關於 Big Sur，請參見Big Sur 已知問題 了解對 AirPortBrcm4360 驅動程式的額外設定步驟。\n * BrcmPatchRAM\n   * 用於把 Broadcom 藍牙芯片組的韌體上傳至電腦，所有非蘋果或 fenvi 的 Airport 卡都需要這個 kext。\n   * 需與 BrcmFirmwareData.kext 配對\n     * BrcmPatchRAM3 用于 10.15+（必須與 BrcmBluetoothInjector 配對）\n     * BrcmPatchRAM2 用于 10.11-10.14\n     * BrcmPatchRAM 用于 10.8-10.10\n   * 在 macOS 10.11-11.0 中，你還需要 BrcmBluetoothInjector（已包含）\n\nBrcmPatchRAM 載入順序\n\nKernel -> Add 中的順序應該是:\n\n 1. BrcmBluetoothInjector（如果需要）\n 2. BrcmFirmwareData\n 3. BrcmPatchRAM3 (或 BrcmPatchRAM2/BrcmPatchRAM)\n\nBlueToolFixup 可以放在 Lilu 之後的任何地方。\n\n然而，ProperTree 將為您處理此問題，因此您無需擔心\n\n\n# AMD CPU 專用 kext\n\n * XLNCUSBFIX\n   * AMD FX 系統的 USB 修復，不建議在 Ryzen 電腦使用\n   * 需要 macOS 10.13 或更新的版本\n * VoodooHDA\n   * 用於 FX 系統的音訊支援和 Ryzen 系統的前面板麥克風及音訊支援，不要與 AppleALC 混合使用。音訊質量明顯比 Zen CPU 上的 AppleALC 差\n   * 需要 OS X 10.6 或更新的版本\n   * 不建議在 macOS 11.3 或更高版本上使用此 kext，因為你需要修改 macOS 檔案系統並停用 SIP\n * AMDRyzenCPUPowerManagement\n   * Ryzen 系統的 CPU 電源管理\n   * 正在積極開發中，可能不穩定\n   * 需要 macOS 10.13 或更新的版本\n * NootedRed\n   * 用於 Vega iGPU 的圖形修補、Board ID 檢查、幀緩衝區修復等等的 Lilu 插件\n   * 不可同時使用「WhateverGreen」\n   * 正在積極開發中，不穩定。目前尚未正式發布，測試版需要 GitHub 帳號才能下載\n   * 需要 macOS 11 或更新的版本\n\n\n# 額外\n\n * AppleMCEReporterDisabler\n   * 在使用 macOS 12.3 和更高版本的 AMD 系統上，及使用 macOS 10.15 和更高版本的雙插槽 Intel 系統上都需要安裝。\n   * 受影響的 SMBIOS:\n     * MacPro6,1\n     * MacPro7,1\n     * iMacPro1,1\n * CpuTscSync\n   * 在 Intel HEDT 和伺服器主板同步 TSC 時需要這個 kext，否則 macOS 可能非常緩慢甚至無法開機。\n   * 不能在 AMD CPU 上工作\n   * 需要 OS X 10.8 或更新的版本\n * NVMeFix\n   * 用於修復非蘋果 NVMe 上的電源管理和初始化\n   * 需要 macOS 10.14 或更新的版本\n * SATA-Unsupported\n   * 增加了大量 SATA 控制器的支援，主要適用於在 macOS 中遇到 SATA 磁碟問題的筆記型電腦。我們建議首先在沒有這個 kext 的情況下進行測試。\n   * Big Sur+ 註：請改為使用 CtlnaAHCIPort ，因為有許多控制器遭到刪除\n   * Catalina 和更舊的則不必擔心\n * CPUTopologyRebuild\n   * 一個實驗性的 Lilu 插件，用於優化 Alder Lake 的異構核心配置。 只適用於 Alder Lake CPU\n * RestrictEvents\n   * macOS 各種功能的修補 kext，詳情見 README\n * EmeraldSDHC\n   * 讓 macOS 支援 eMMC 的 kext。目前僅支援 eMMC 或 MMC 卡，最高速度為 HS200。此驅動程式目前正在開發中，在某些裝置上可能會出現性能不佳或無法使用的情況。目前不支持 SD 卡。\n\n舊版 SATA kext\n * AppleIntelPIIXATA.kext\n   * 適用於老舊的 Core 2 Duo/Quad 和 Pentium 4 系統的舊版 IDE 和 ATA kext。macOS 11（Big Sur）和更新的版本需要這個 kext，因為它已在 macOS 10.15（Catalina）中刪除\n * AHCIPortInjector\n   * 舊版 SATA/AHCI 注入器，主要適用於 Penryn 時代的老舊電腦\n * ATAPortInjector\n   * 舊版 ATA 注入器，主要與 IDE 和 ATA 裝置相關（例如：當 BIOS 中沒有 AHCI 選項時）\n\n\n# 筆記型電腦輸入\n\n要弄清楚你使用的是什麼的鍵盤和觸控板，請用 Windows 中的裝置管理員或 Linux 中的 dmesg | grep -i input 來檢查\n\nWARNING\n\n大多數筆記型電腦的鍵盤都是 PS2！即使你有 I2C、USB 或 SMBus 觸控板，你也可能需要使用 VoodooPS2。\n\n# PS2 鍵盤／觸控板\n\n * VoodooPS2\n   * 適用於各種 PS2 鍵盤，滑鼠和觸控板\n   * 需要 macOS 10.11 或更新才能使用 MT2（Magic Trackpad 2）\n * RehabMan's VoodooPS2\n   * 適用於帶有 PS2 鍵盤、滑鼠和觸控板的舊系統，或者當你不想使用 VoodooInput 時可用\n   * 支援 macOS 10.6 +\n\n# SMBus 觸控板\n\n * VoodooRMI\n   * 適用於帶有 Synaptics SMBus 觸控板的系統\n   * 需要 macOS 10.11 或更新版本才能使用 MT2（Magic Trackpad 2）\n   * 依賴於 Acidanthera 的 VoodooPS2\n * VoodooSMBus\n   * 適用於帶有 ELAN SMBus 觸控板的系统\n   * 目前支援 macOS 10.14 或更新版本\n\n# I2C/USB HID 裝置\n\n * VoodooI2C\n   * 支援 macOS 10.11 或更新版本\n   * 連接到 I2C 控制器，允許插件與 I2C 觸控板交互\n   * 使用以下插件的 USB 裝置仍然需要 VoodooI2C\n   * 必須與一個或多個插件配合，如下所示:\n\nVoodooI2C 插件\n\n連接類型                        插件                  說明\nMultitouch HID              VoodooI2CHID        可以與 I2C/USB 輕觸屏幕和觸控板一起使用\nELAN Proprietary            VoodooI2CElan       ELAN1200+ 則需要 VoodooI2CHID\nFTE1001 touchpad            VoodooI2CFTE        \nAtmel Multitouch Protocol   VoodooI2CAtmelMXT   \nSynaptics HID               VoodooRMI           I2C Synaptic 觸控板（只在 I2C 模式下需要 VoodooI2C)\nAlps HID                    AlpsHID             可配合 USB 或 I2C Alps 觸控板使用。主要出現在戴爾 (Dell) 筆記型電腦和惠普 (HP) 的一些\n                                                EliteBook 機型上\n\n# 雜項\n\n * ECEnabler\n   * 修復在許多設備上讀取電池狀態時的問題（允許讀取超過 8 位元的 EC 字段）\n   * 支援 OS X 10.7 及以上版本（10.4 - 10.6 版本不需要）\n * BrightnessKeys\n   * 自動修復亮度快捷鍵\n\n請參考 Kexts.md 取得支援的 kext 的完整列表\n\n\n# SSDT\n\n你在 AcpiSamples 資料夾中可以看到所有 SSDT，你可能想知道是否需要它們。對於我們來說，我們將在 config.plist 中有關你的平台特定的 ACPI 部分中討論你需要的 SSDT，因為您需要的 SSDT 是按平台獨立設定的。有些甚至需要特定的系統並要進行額外的設定，如果我現在就給你一個 SSDT 列表讓你選擇，你很容易就會迷失方向。\n\nACPI 入門教學 有更多關於 SSDT 的內容，包括在不同的平台上編譯它們。\n\n對需要的 SSDT 感到 TL;DR 的話（這是原始碼，你必須將它們編譯為 .aml 檔案）:\n\n\n# 桌面電腦\n\n平台                        CPU                           EC             AWAC        NVRAM      USB\nPenryn                    N/A                           SSDT-EC        N/A         N/A        N/A\nLynnfield and Clarkdale\nSandyBridge               CPU-PM (安裝完畢後執行)\nIvy Bridge\nHaswell                   SSDT-PLUG\nBroadwell\nSkylake                                                 SSDT-EC-USBX\nKaby Lake\nCoffee Lake                                                            SSDT-AWAC   SSDT-PMC\nComet Lake                                                                         N/A        SSDT-RHUB\nAMD (15/16h)              N/A                                          N/A                    N/A\nAMD (17/19h)              SSDT-CPUR for B550 and A520\n\n\n# 高端桌面電腦\n\n平台                     CPU         EC             RTC               PCI\nNehalem and Westmere   N/A         SSDT-EC        N/A               N/A\nSandy Bridge-E                                                      SSDT-UNC\nIvy Bridge-E\nHaswell-E              SSDT-PLUG   SSDT-EC-USBX   SSDT-RTC0-RANGE\nBroadwell-E\nSkylake-X                                                           N/A\n\n\n# 筆記型電腦\n\n平台                                       CPU                            EC             BACKLIGHT   I2C TRACKPAD   AWAC        USB         IRQ\nClarksfield and Arrandale                N/A                            SSDT-EC        SSDT-PNLF   N/A            N/A         N/A         IRQ SSDT\nSandyBridge                              CPU-PM (Run in Post-Install)\nIvy Bridge\nHaswell                                  SSDT-PLUG                                                 SSDT-GPI0\nBroadwell\nSkylake                                                                 SSDT-EC-USBX                                                      N/A\nKaby Lake\nCoffee Lake (8th Gen) and Whiskey Lake                                                 SSDT-PNLF                  SSDT-AWAC\nCoffee Lake (9th Gen)\nComet Lake\nIce Lake                                                                                                                      SSDT-RHUB\n\n繼續：\n\n平台                                       NVRAM      IMEI\nClarksfield and Arrandale                N/A        N/A\nSandy Bridge                                        SSDT-IMEI\nIvy Bridge\nHaswell                                             N/A\nBroadwell\nSkylake\nKaby Lake\nCoffee Lake (8th Gen) and Whiskey Lake\nCoffee Lake (9th Gen)                    SSDT-PMC\nComet Lake                               N/A\nIce Lake\n\n\n# 現在，這些步驟都完成了，你可前往 ACPI 入門教學",normalizedContent:"# 搜集檔案\n\n本章節是為了收集令 macos 開機的各類檔案，我們希望你在開始之前已經很好地了解你的硬體，並且最好有安裝 hackintosh 的經驗，因為我們不會在這裡深入探討。\n\n> 知道我的硬體是否被支援的最佳方法是什麼？\n\n請參閱硬體限制頁面 ，以更好地了解 macos 啟動時需要什麼，clover 和 opencore 之間的硬體支援非常相似。\n\n> 有什麼方法可以找出我有什麼硬體？\n\n參閱上一頁：尋找你的硬體\n\n\n\n * 韌體驅動\n   * 通用\n   * 老舊系統用戶\n * kexts\n   * 必要的檔案\n   * virtualsmc 插件\n   * 顯示\n   * 音訊\n   * 乙太網路卡\n   * usb\n   * wi-fi 和 藍牙\n   * amd cpu 專用 kext\n   * 額外\n   * 筆記型電腦輸入\n * ssdt\n   * 桌面電腦\n   * 高端桌面電腦\n   * 筆記型電腦\n\n\n\n\n# 韌體驅動\n\n韌體驅動程式是 opencore 在 uefi 環境中使用的驅動程式。它們主要是通過擴展 opencore 的補丁功能或在 opencore 選擇器（例如 hfs 磁碟）中向你顯示不同類型的磁碟來啟動電腦。\n\n * 位置說明: 這些檔案 必須 放在 efi/oc/drivers/ 目錄下\n\n\n# 通用\n\n必需的驅動程式\n\n對於大多數系統，你只需要 2 個 .efi 的驅動程式來開機和運行:\n\n * hfsplus.efi(必需)\n   * 用於檢查和顯示 hfs 磁碟（例如：macos 安裝程式和恢復磁碟區／映像）。不要混合使用其他 hfs 驅動程式\n   * 對於 sandy bridge 和更老的平台（及低端 ivy bridge（i3 和 celeron）），請參閱下面的老舊系統部分\n * openruntime.efi(必需)\n   * 代替 aptiomemoryfix.efi, 用作 opencore 的擴展，以幫助修補 boot.efi 來修復 nvram 和更好的記憶體管理。\n   * 提醒，這個檔案已包含在我們之前下載的 opencorepkg 裡\n\n\n# 老舊系統用戶\n\n除上述外，如果您的硬體不支援 uefi（2011 年和更早），那麼您將需要以下驅動程式。請密切關注每一項的內容，因為你可能無需要全數使用：\n\n * openusbkbdxe.efi\n   * 用於讓使用 duetpkg 的老舊系統上運行 opencore 選擇器， 不推薦，甚至在 uefi（ivy bridge 和更新的）系統上有害\n * hfspluslegacy.efi\n   * hfsplus 的舊版變體，用於缺少 rdrand 指令支持的系統。這通常在 sandy bridge和更老的（以及低端的 ivy bridge（i3 和 celeron））平台出現\n   * 不要將其與 hfsplus.efi 混合使用，請根據您的硬體選擇其中之一\n * openpartitiondxe\n   * 在 os x 10.7 到 10.9 上啟動恢復程式時需要\n     * 此文件已包含在 opencorepkg 的 efi/oc/drivers 之下\n     * 注意：openduet 用戶（例如：沒有 uefi）將內置此驅動程式，這些電腦並不需要它\n\n將這些文件放在 efi 的 drivers 資料夾中\n\n32 位元的詳細資訊\n\n對於那些使用 32 位元的處理器，您也需要取得這些驅動程式\n\n * hfsplus32\n   * 用於 32 位元 cpu 的 hfspluslegacy 的替代品，不要將其與其他 hfs.efi 驅動程式混合使用\n\n\n# kexts\n\nkext 是指 kernel extension，你可以把它想像成 macos 的驅動程式，這些文件將放進 efi 中的 kexts 資料夾。\n\n * windows 和 linux 注意：這些操作系統視 kext 為普通的資料夾，請仔細檢查你正在安裝的資料夾是否帶有 .kext 副檔名（如果缺少，不要手動添加）。\n   * 如果任意 kext 還包含一個 .dsym 檔案，你可以簡單地刪除它。它們只用於除錯目的。\n * 位置注意: 這些檔案 必須 放在 efi/oc/kexts/ 目錄下。\n\n下面列出的大多數預編譯 kext 都可以在 build repo 中找到。這裡的 kext 在每次有新的提交時都會編譯一次。\n\n\n# 必要的檔案\n\n必要的 kext\n\n如果沒有下面的 2 個檔案，系統就無法啟動：\n\n * lilu(必需)\n   * 一個修補許多處理程序的 kext，被 applealc、whatevergreen、virtualsmc 和許多其他 kext 所依賴。沒有 lilu，他們就無法工作。\n   * 請注意，雖然 lilu 最低支援 mac os x 10.4 版本，但許多插件只能在較新的版本上使用。\n * virtualsmc(必需)\n   * 模擬真實 mac 上的 smc 芯片，如果沒有這個，macos 將無法啟動\n   * 要求 mac os x 10.4 或更新版本\n\n\n# virtualsmc 插件\n\n電腦開機時不需要以下插件，因為它們僅增加額外的硬體監控等系統功能。除非另有說明，這些插件都是隨 virtualsmc 附帶的\n\n提示\n\n雖然 virtualsmc 支持 10.4，但插件可能需要更新的版本。\n\n * smcprocessor.kext\n   * 用於監控 intel cpu 的溫度\n   * 不適用於 amd cpu 系統\n   * 需要 mac os x 10.7 或更新版本\n * smcamdprocessor\n   * 用於監控 amd zen 系列 cpu 的溫度\n   * 正在積極開發中，可能不穩定\n   * 需要 amdryzencpupowermanagement (參見 amd cpu 專用的 kext)\n   * 需要 macos 10.13 或更新版本\n * smcradeongpu\n   * 用於監控 amd gpu 的溫度\n   * 需要來自相同儲存庫的 radeonsensor\n   * 需要 macos 11 或更新版本\n * smcsuperio.kext\n   * 用於監控風扇轉速\n   * 不適用於基於 amd cpu 的系統\n   * 需要 mac os x 10.6 或更新的版本\n * smclightsensor.kext\n   * 用於筆記型電腦的環境光傳感器\n   * 如果你沒有環境光傳感器，請不要使用。（例如桌面電腦），否則會導致問題\n   * 需要 mac os x 10.6 或更新的版本\n * smcbatterymanager.kext\n   * 用於測量筆記型電腦的電池讀數\n   * 不要在桌面電腦上使用\n   * 需要 mac os x 10.4 或更新的版本\n * smcdellsensors.kext\n   * 允許對支持系統管理模式（smm）的 dell 電腦的風扇進行更精細的監控和控制\n   * 如果你沒有支援的 dell 電腦，請不要使用，主要是 dell 筆記型電腦可以從這個 kext 中受益\n   * 需要 mac os x 10.7 或更新的版本\n\n\n# 顯示\n\n * whatevergreen(必需)\n   * 用於圖形修補、drm 修復、board id 檢查、幀緩衝區修復等等的 lilu 插件；（幾乎）所有 gpu 都因為這個 kext 而受益。\n   * 注意內附的 ssdt-pnlf.dsl 文件只適用於筆記本電腦和 aio，請參閱acpi 入門教學 以取得更多資訊\n   * 如果你使用 amd vega igpu，請不要使用，請參閱 amd cpu 專用的 kext\n   * 需要 mac os x 10.6 或更新的版本\n\n\n# 音訊\n\n * applealc\n   * 用於修補 applehda，支援大多數集成的聲音控制器\n   * applealcu.kext 是 applealc 的精簡版，只支持數位音訊，但你仍然可以使用 applealc.kext 在數位音訊系統上\n   * amd 15h/16h 使用 applealc 可能會有問題。而麥克風的支援在 ryzen/threadripper 系統則很少見\n   * 需要 os x 10.4 或更新版本\n\n舊版音訊 kext\n\n對於那些計劃使用 10.7 或更舊版本的用戶，可以選擇這些 kext：\n\n * voodoohda\n   \n   * 需要 os x 10.6 或更新版本\n\n * voodoohda-fat\n   \n   * 與上述類似，但是支援 32 及 64 位元內核，因此非常適合用於 os x 10.4-5 和 32 位元 cpu\n\n\n# 乙太網路卡\n\n在這裡，我們假設您知道系統的網路卡型號。提醒您：產品規格頁面很可能會列出網路卡的類型。\n\n * intelmausi\n   * 對於大多數 intel 網路卡，基於 i211 的芯片組將需要 smalltreeintel82576 kext\n   * 支援 intel 的 82578、82579、i217、i218 和 i219 網路卡\n   * 需要 os x 10.9 或更新版本，舊版的 10.6-10.8 操作系統用戶可以使用 intelsnowmausi 代替\n * appleigb\n   * 在 macos monterey 及以上版本上使用 i211 網路卡時需要\n   * 可能在一些網路卡上出現不穩定的問題，建議留在 big sur 並使用 smalltree\n   * 大多數使用 intel 網路卡的 amd 主板都需要\n   * 需要 macos 12 及以上版本\n * smalltreeintel82576\n   * 在 macos big sur 及以下版本使用 i211 網路卡時需要，基於 smalltree kext，但有所修補以支援 i211（在 macos 12 monterey 或以上不起作用）\n   * 大多數使用 intel 網路卡的 amd 主板都需要\n   * 需要 os x 10.9-12 (v1.0.6)，macos 10.13-14 (v1.2.5)，macos 10.15+ (v1.3.0)\n * atherose2200ethernet\n   * 用於 atheros 和 killer 網路卡\n   * 需要 os x 10.8 或更新的版本\n   * 注意:atheros killer e2500 型號實際上是基於 realtek 的，這些電腦的用戶請使用 realtekrtl8111 代替\n * realtekrtl8111\n   * 用於 realtek 的千兆以太網路卡\n   * v2.2.0 及以下版本需要 os x 10.8 及以上，v2.2.2 版本需要 macos 10.12 及以上，v2.3.0 及以上版本需要 macos 10.14 及以上\n   * **注意：**有時最新版本的 kext 可能無法在讓您的以太網正常工作。如果你遇到這個問題，請嘗試舊版本。\n * lucyrtl8125ethernet\n   * 用於 realtek的 2.5gb 以太網路卡\n   * 需要 macos 10.15 或更新的版本\n * 對於 intel 的 i225-v 網路卡，相關修補已在桌面平台 comet lake 的 deviceproperties 部分中提到，不需要 kext。\n   * 需要 macos 10.15 或更新的版本\n * 對於 intel 的 i350 網路卡，相關修補已在 hedt 平台 sandy 和 ivy bridge-e 的 deviceproperties 部分中提到，不需要 kext。\n   * 需要 os x 10.10 或更新的版本\n\n舊版乙太網路卡的 kexts\n\n無論是安裝舊版 macos 還是舊的電腦硬體。\n\n * appleintele1000e\n   * 主要用於基於 10/100mbe 的 intel 以太網路卡\n   * 需要 os x 10.6 或更新的版本\n * realtekrtl8100\n   * 主要用於基於 10/100mbe 的 realtek 以太網路卡\n   * 需要 macos 10.12 或更新的版本（v2.0.0+）\n * bcm5722d\n   * 主要用於基於 bcm5722 的 broadcom 以太網路卡\n   * 需要 os x 10.6 或更新的版本\n\n請記住，某些網路卡實際上在 macos 中是原生支援的：\n\n原生支援的網路卡\n\n# aquantia 系列\n\n# appleethernetaquantiaaqtion.kext\npci1d6a,1    = aquantia aqc107\npci1d6a,d107 = aquantia aqc107\npci1d6a,7b1  = aquantia aqc107\npci1d6a,80b1 = aquantia aqc107\npci1d6a,87b1 = aquantia aqc107\npci1d6a,88b1 = aquantia aqc107\npci1d6a,89b1 = aquantia aqc107\npci1d6a,91b1 = aquantia aqc107\npci1d6a,92b1 = aquantia aqc107\npci1d6a,c0   = aquantia aqc113\npci1d6a,4c0  = aquantia aqc113\n\n\n注意：由於許多 aquania 網路卡上的韌體都是過時的，您可能需要在 linux/windows 中更新韌體，以確保它與 macos 相容。\n\n# intel 系列\n\n# appleintel8254xethernet.kext\npci8086,1096 = intel 80003es2lan\npci8086,100f = intel 82545em\npci8086,105e = intel 82571eb/82571gb\n\n# appleinteli210ethernet.kext\npci8086,1533 = intel i210\npci8086,15f2 = intel i225lm (macos 10.15新增)\n\n# intel82574l.kext\npci8086,104b = intel 82566dc\npci8086,10f6 = intel 82574l\n\n\n\n# broadcom 系列\n\n# applebcm5701ethernet.kext\npci14e4,1684 = broadcom bcm5764m\npci14e4,16b0 = broadcom bcm57761\npci14e4,16b4 = broadcom bcm57765\npci14e4,1682 = broadcom bcm57762\npci14e4,1686 = broadcom bcm57766\n\n\n\n# usb\n\n * usbtoolbox（tool 和 kext）\n   \n   * 用於 windows 和 macos 的 usb 映射工具。\n   * 強烈建議在安裝 macos 之前映射你的 usb 連接埠，以避免任何連接埠限制問題\n   * 功能\n     * 支援從 windows 和 macos 映射(linux 支援正在開發中)\n     * 可以使用 usbtoolbox kext 或本機 apple kext 構建一個映射表（appleusbhostmergeproperties）\n     * 支持多種匹配方式\n     * 支持配套連接埠（windows）\n\n * xhci-unsupported\n   \n   * 有使用非原生 usb 控制器的電腦需要這個 kext\n   * 基於 amd cpu 的系統則不需要\n   * 需要這些的常見芯片組：\n     * h370\n     * b360\n     * h310\n     * z390 (mojave 和更新版本不需要)\n     * x79\n     * x99\n     * asrock intel 主板 (b460/z490+ 板不需要)\n\n\n# wi-fi 和 藍牙\n\n# 非原生藍牙卡\n\n * bluetoolfixup\n   * 修補 macos 12 及以上版本的藍牙協議堆棧以支援第三方藍牙卡\n   * 所有非原生（非蘋果原廠的 broadcom、intel 等）的藍牙卡都需要這個 kext\n   * 包含在brcmpatchram zip 檔案中\n   * 不要在 macos 11 和更舊的版本使用\n\n# intel\n\n * airportitlwm\n   * 增加了對多種 intel 無線網卡的支援，並集成了 io80211family，讓網卡能在恢復模式中工作\n   * 需要 macos 10.13 或更新版本，並且要啟用蘋果的安全開機才能正常運行\n * itlwm\n   * airportitlwm 的替代品，針對無法啟用蘋果安全開機的系統\n   * 需要 heliport\n   * 它將被視為以太網路卡，你必須通過 heliport 連接 wi-fi\n   * 在 macos 恢復模式中無法使用\n * intelbluetoothfirmware\n   * 為 macos 增加 intel 無線網卡的藍牙支援（如無線網卡同時支援藍牙）\n   * 除了修補 macos 中的錯誤之外，還可以使用 intelbtpatcher（已包含）\n   * 需要 macos 10.13 或更新的版本\n   * 在 macos 10.13 - 11 中，你還需要 intelbluetoothinjector（已包含）\n\n更多關於啟用 airportitlwm 的資訊\n\n要讓 opencore 支援並啟用 airportitlwm，你需要：\n\n * 啟用 misc -> security -> securebootmodel 並將其設置為 default 或其他有效值\n   * 這將在本指南後部和安裝後完善指南中討論：apple secure boot\n * 如果你不能啟用 securebootmodel，你仍然可以強制注入 io80211family（非常不建议）\n   * 在 config.plist 檔案的 kernel -> force 下設定以下内容。（稍後將會討論）：\n\n\n\n# broadcom\n\n * airportbrcmfixup\n   * 修補非蘋果或 fenvi 的 broadcom 無線網卡 不能在 intel, killer, realtek 等網卡上工作\n   * 需要 os x 10.10 或更新的版本\n   * 關於 big sur，請參見big sur 已知問題 了解對 airportbrcm4360 驅動程式的額外設定步驟。\n * brcmpatchram\n   * 用於把 broadcom 藍牙芯片組的韌體上傳至電腦，所有非蘋果或 fenvi 的 airport 卡都需要這個 kext。\n   * 需與 brcmfirmwaredata.kext 配對\n     * brcmpatchram3 用于 10.15+（必須與 brcmbluetoothinjector 配對）\n     * brcmpatchram2 用于 10.11-10.14\n     * brcmpatchram 用于 10.8-10.10\n   * 在 macos 10.11-11.0 中，你還需要 brcmbluetoothinjector（已包含）\n\nbrcmpatchram 載入順序\n\nkernel -> add 中的順序應該是:\n\n 1. brcmbluetoothinjector（如果需要）\n 2. brcmfirmwaredata\n 3. brcmpatchram3 (或 brcmpatchram2/brcmpatchram)\n\nbluetoolfixup 可以放在 lilu 之後的任何地方。\n\n然而，propertree 將為您處理此問題，因此您無需擔心\n\n\n# amd cpu 專用 kext\n\n * xlncusbfix\n   * amd fx 系統的 usb 修復，不建議在 ryzen 電腦使用\n   * 需要 macos 10.13 或更新的版本\n * voodoohda\n   * 用於 fx 系統的音訊支援和 ryzen 系統的前面板麥克風及音訊支援，不要與 applealc 混合使用。音訊質量明顯比 zen cpu 上的 applealc 差\n   * 需要 os x 10.6 或更新的版本\n   * 不建議在 macos 11.3 或更高版本上使用此 kext，因為你需要修改 macos 檔案系統並停用 sip\n * amdryzencpupowermanagement\n   * ryzen 系統的 cpu 電源管理\n   * 正在積極開發中，可能不穩定\n   * 需要 macos 10.13 或更新的版本\n * nootedred\n   * 用於 vega igpu 的圖形修補、board id 檢查、幀緩衝區修復等等的 lilu 插件\n   * 不可同時使用「whatevergreen」\n   * 正在積極開發中，不穩定。目前尚未正式發布，測試版需要 github 帳號才能下載\n   * 需要 macos 11 或更新的版本\n\n\n# 額外\n\n * applemcereporterdisabler\n   * 在使用 macos 12.3 和更高版本的 amd 系統上，及使用 macos 10.15 和更高版本的雙插槽 intel 系統上都需要安裝。\n   * 受影響的 smbios:\n     * macpro6,1\n     * macpro7,1\n     * imacpro1,1\n * cputscsync\n   * 在 intel hedt 和伺服器主板同步 tsc 時需要這個 kext，否則 macos 可能非常緩慢甚至無法開機。\n   * 不能在 amd cpu 上工作\n   * 需要 os x 10.8 或更新的版本\n * nvmefix\n   * 用於修復非蘋果 nvme 上的電源管理和初始化\n   * 需要 macos 10.14 或更新的版本\n * sata-unsupported\n   * 增加了大量 sata 控制器的支援，主要適用於在 macos 中遇到 sata 磁碟問題的筆記型電腦。我們建議首先在沒有這個 kext 的情況下進行測試。\n   * big sur+ 註：請改為使用 ctlnaahciport ，因為有許多控制器遭到刪除\n   * catalina 和更舊的則不必擔心\n * cputopologyrebuild\n   * 一個實驗性的 lilu 插件，用於優化 alder lake 的異構核心配置。 只適用於 alder lake cpu\n * restrictevents\n   * macos 各種功能的修補 kext，詳情見 readme\n * emeraldsdhc\n   * 讓 macos 支援 emmc 的 kext。目前僅支援 emmc 或 mmc 卡，最高速度為 hs200。此驅動程式目前正在開發中，在某些裝置上可能會出現性能不佳或無法使用的情況。目前不支持 sd 卡。\n\n舊版 sata kext\n * appleintelpiixata.kext\n   * 適用於老舊的 core 2 duo/quad 和 pentium 4 系統的舊版 ide 和 ata kext。macos 11（big sur）和更新的版本需要這個 kext，因為它已在 macos 10.15（catalina）中刪除\n * ahciportinjector\n   * 舊版 sata/ahci 注入器，主要適用於 penryn 時代的老舊電腦\n * ataportinjector\n   * 舊版 ata 注入器，主要與 ide 和 ata 裝置相關（例如：當 bios 中沒有 ahci 選項時）\n\n\n# 筆記型電腦輸入\n\n要弄清楚你使用的是什麼的鍵盤和觸控板，請用 windows 中的裝置管理員或 linux 中的 dmesg | grep -i input 來檢查\n\nwarning\n\n大多數筆記型電腦的鍵盤都是 ps2！即使你有 i2c、usb 或 smbus 觸控板，你也可能需要使用 voodoops2。\n\n# ps2 鍵盤／觸控板\n\n * voodoops2\n   * 適用於各種 ps2 鍵盤，滑鼠和觸控板\n   * 需要 macos 10.11 或更新才能使用 mt2（magic trackpad 2）\n * rehabman's voodoops2\n   * 適用於帶有 ps2 鍵盤、滑鼠和觸控板的舊系統，或者當你不想使用 voodooinput 時可用\n   * 支援 macos 10.6 +\n\n# smbus 觸控板\n\n * voodoormi\n   * 適用於帶有 synaptics smbus 觸控板的系統\n   * 需要 macos 10.11 或更新版本才能使用 mt2（magic trackpad 2）\n   * 依賴於 acidanthera 的 voodoops2\n * voodoosmbus\n   * 適用於帶有 elan smbus 觸控板的系统\n   * 目前支援 macos 10.14 或更新版本\n\n# i2c/usb hid 裝置\n\n * voodooi2c\n   * 支援 macos 10.11 或更新版本\n   * 連接到 i2c 控制器，允許插件與 i2c 觸控板交互\n   * 使用以下插件的 usb 裝置仍然需要 voodooi2c\n   * 必須與一個或多個插件配合，如下所示:\n\nvoodooi2c 插件\n\n連接類型                        插件                  說明\nmultitouch hid              voodooi2chid        可以與 i2c/usb 輕觸屏幕和觸控板一起使用\nelan proprietary            voodooi2celan       elan1200+ 則需要 voodooi2chid\nfte1001 touchpad            voodooi2cfte        \natmel multitouch protocol   voodooi2catmelmxt   \nsynaptics hid               voodoormi           i2c synaptic 觸控板（只在 i2c 模式下需要 voodooi2c)\nalps hid                    alpshid             可配合 usb 或 i2c alps 觸控板使用。主要出現在戴爾 (dell) 筆記型電腦和惠普 (hp) 的一些\n                                                elitebook 機型上\n\n# 雜項\n\n * ecenabler\n   * 修復在許多設備上讀取電池狀態時的問題（允許讀取超過 8 位元的 ec 字段）\n   * 支援 os x 10.7 及以上版本（10.4 - 10.6 版本不需要）\n * brightnesskeys\n   * 自動修復亮度快捷鍵\n\n請參考 kexts.md 取得支援的 kext 的完整列表\n\n\n# ssdt\n\n你在 acpisamples 資料夾中可以看到所有 ssdt，你可能想知道是否需要它們。對於我們來說，我們將在 config.plist 中有關你的平台特定的 acpi 部分中討論你需要的 ssdt，因為您需要的 ssdt 是按平台獨立設定的。有些甚至需要特定的系統並要進行額外的設定，如果我現在就給你一個 ssdt 列表讓你選擇，你很容易就會迷失方向。\n\nacpi 入門教學 有更多關於 ssdt 的內容，包括在不同的平台上編譯它們。\n\n對需要的 ssdt 感到 tl;dr 的話（這是原始碼，你必須將它們編譯為 .aml 檔案）:\n\n\n# 桌面電腦\n\n平台                        cpu                           ec             awac        nvram      usb\npenryn                    n/a                           ssdt-ec        n/a         n/a        n/a\nlynnfield and clarkdale\nsandybridge               cpu-pm (安裝完畢後執行)\nivy bridge\nhaswell                   ssdt-plug\nbroadwell\nskylake                                                 ssdt-ec-usbx\nkaby lake\ncoffee lake                                                            ssdt-awac   ssdt-pmc\ncomet lake                                                                         n/a        ssdt-rhub\namd (15/16h)              n/a                                          n/a                    n/a\namd (17/19h)              ssdt-cpur for b550 and a520\n\n\n# 高端桌面電腦\n\n平台                     cpu         ec             rtc               pci\nnehalem and westmere   n/a         ssdt-ec        n/a               n/a\nsandy bridge-e                                                      ssdt-unc\nivy bridge-e\nhaswell-e              ssdt-plug   ssdt-ec-usbx   ssdt-rtc0-range\nbroadwell-e\nskylake-x                                                           n/a\n\n\n# 筆記型電腦\n\n平台                                       cpu                            ec             backlight   i2c trackpad   awac        usb         irq\nclarksfield and arrandale                n/a                            ssdt-ec        ssdt-pnlf   n/a            n/a         n/a         irq ssdt\nsandybridge                              cpu-pm (run in post-install)\nivy bridge\nhaswell                                  ssdt-plug                                                 ssdt-gpi0\nbroadwell\nskylake                                                                 ssdt-ec-usbx                                                      n/a\nkaby lake\ncoffee lake (8th gen) and whiskey lake                                                 ssdt-pnlf                  ssdt-awac\ncoffee lake (9th gen)\ncomet lake\nice lake                                                                                                                      ssdt-rhub\n\n繼續：\n\n平台                                       nvram      imei\nclarksfield and arrandale                n/a        n/a\nsandy bridge                                        ssdt-imei\nivy bridge\nhaswell                                             n/a\nbroadwell\nskylake\nkaby lake\ncoffee lake (8th gen) and whiskey lake\ncoffee lake (9th gen)                    ssdt-pmc\ncomet lake                               n/a\nice lake\n\n\n# 現在，這些步驟都完成了，你可前往 acpi 入門教學",charsets:{cjk:!0}},{title:"硬體限制",frontmatter:{},regularPath:"/macos-limits.html",relativePath:"macos-limits.md",key:"v-5a9fa515",path:"/macos-limits.html",headers:[{level:2,title:"CPU 支援",slug:"cpu-支援",normalizedTitle:"cpu 支援",charIndex:104},{level:2,title:"GPU 支援",slug:"gpu-支援",normalizedTitle:"gpu 支援",charIndex:114},{level:2,title:"主板支援",slug:"主板支援",normalizedTitle:"主板支援",charIndex:124},{level:2,title:"儲存裝置支援",slug:"儲存裝置支援",normalizedTitle:"儲存裝置支援",charIndex:132},{level:2,title:"有線網路",slug:"有線網路",normalizedTitle:"有線網路",charIndex:142},{level:2,title:"無線網路",slug:"無線網路",normalizedTitle:"無線網路",charIndex:150},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:158}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"CPU 支援 GPU 支援 主板支援 儲存裝置支援 有線網路 無線網路 其他",content:"# 硬體限制\n\n在開始安裝 macOS 之前，你需要了解許多硬體上的限制。這是因為蘋果支援的硬體數量有限，所以我們要麼受到蘋果的限制，要麼受到社群建立的補丁的限制。\n\n需要驗證的主要硬體部分有：\n\n\n\n * CPU 支援\n * GPU 支援\n * 主板支援\n * 儲存裝置支援\n * 有線網路\n * 無線網路\n * 其他\n\n\n\n有關該主題的更詳細指南，請瀏覽：\n\n * 顯示卡購買指南\n   * 檢查您的 GPU 是否受支援，以及你可以執行哪個版本的 macOS。\n * 無線網卡購買指南\n   * 檢查你的無線網卡是否支援 macOS。\n * 避免購買指南\n   * 關於應該避免什麼以及你的硬體可能會遇到什麼問題的指南。（BTW：這裡是告訴你哪些硬體既不被 macOS 支援，亦沒有可以驅動它們的補丁）\n\n\n# CPU 支援\n\n對於 CPU，我們有以下细分:\n\n * 32 和 64 位元 CPU 都支援\n   * 但這需要操作系統支持你的架構，請參閱下面的 CPU 要求部分\n * Intel 的桌面 CPU\n   * 本指南支援 Yonah 到 Comet Lake 世代。\n   * Atoms、Celeron 和 Pentium CPU 需要配備獨立 GPU。\n * Intel 高端桌面（HEDT）和伺服器 CPU\n   * 本指南支援 Nehalem 到 Cascade Lake X 世代。\n * Intel Core “i” 和至強系列的筆記型電腦 CPU\n   * 本指南支援 Arrandale 到 Ice Lake 世代。\n   * 不支持 Mobile Atoms、Celeron 和 Pentium CPU\n * AMD 的 Bulldozer(15H)，Jaguar（16H）和 Ryzen(17h) CPU\n   * 需要配備獨立 GPU，或指定的 Vega iGPU。詳情請參閱 GPU 支援\n   * 注意：AMD CPU 無法支援 macOS 的所有功能，請參見下文。\n\n欲了解更多深入資訊，請參閱避免購買指南\n\n詳細的 CPU 要求\n\n架構需求\n\n * 32 位元 CPU 支援 10.4.1 至 10.6.8\n   * 注意 10.7.x 需要 64 位元用戶空間，將 32 位元 CPU 限制為 10.6\n * 從 10.4.1 起支援 64 位元 CPU\n\nSSE要求:\n\n * 所有 Intel 版本的 OS X/macOS 都需要 SSE3\n * 所有 64 位元版本的 OS X/macOS 都需要 SSSE3\n   * 對於缺少 SSSE3 的 CPU（例如某些 64 位元 Pentium），我們建議使用 32 位元用戶空間（i386-user32）\n * macOS 10.12 及更新版本需要 SSE4\n * macOS 10.14 和更新版本需要 SSE4.2\n   * SSE4.1 CPU 支持 telemetrap.kext\n   * 較新的 AMD 驅動程式也需要 SSE4.2 來支援 Metal。要解決這個問題，請參閱：MouSSE: SSE4.2 emulation\n\n固件要求:\n\n * OS X 10.4.1 到 10.4.7 需要 EFI32（即 IA32（32 位元）版本的 OpenCore）\n   * OS X 10.4.8 到 10.7.5 支持 EFI32 和 EFI64\n * OS X 10.8 及更新版本需要 EFI64（即 x64（64位）版本的 OpenCore）\n * OS X 10.7 到 10.9 需要 OpenPartitionDxe.efi 啟動恢復分區\n\n内核要求:\n\n * OS X 10.4 和 10.5 由於只支持 32 位元内核空間，因此需要 32 位元 kext\n   * OS X 10.6 和 10.7 同時支持 32 和 64 位元内核空間\n * OS X 10.8 及更新版本由於只支持 64 位元内核空間，因此需要 64 位元 kext\n   * 執行lipo -archs 以了解你的 kext 所支援的架構（請記住在二進制檔案本身而不是 .kext 包上執行）\n\n核心／線程數限制:\n\n * OS X 10.10 及以下版本可能無法以超過 24 個線程啟動 (明顯表現為 mp_cpus_call_wait() timeout 錯誤）\n * OS X 10.11 及更新版本有 64 個線程的限制\n * cpus= 引導參數可以作為一個解決方案，或者停用超線程\n\n特別注意事項:\n\n * Lilu 和插件需要 10.8 或更新版本才能執行\n   * 我們建議在 OS X 的舊版本中執行 FakeSMC\n * OS X 10.6 及更早版本要求啟用 RebuildAppleMemoryMap\n   * 這是為了解決早期的內核問題\n\n詳細的 Intel CPU 支援圖表\n\n對於純淨内核（即沒有修改）的支援：\n\nCPU 世代                           最初支援版本    最後支援版本    說明                      CPUID\nPentium 4                        10.4.1    10.5.8    僅用於開發工具包                0x0F41\nYonah                            10.4.4    10.6.8    32-Bit                  0x0006E6\nConroe, Merom                    10.4.7    10.11.6   No SSE4                 0x0006F2\nPenryn                           10.4.10   10.13.6   No SSE4.2               0x010676\nNehalem                          10.5.6    目前最新版本    N/A                     0x0106A2\nLynnfield, Clarksfield           10.6.3              在 10.14+ 沒有對 iGPU 的支援   0x0106E0\nWestmere, Clarkdale, Arrandale   10.6.4                                      0x0206C0\nSandy Bridge                     10.6.7                                      0x0206A0(M/H)\nIvy Bridge                       10.7.3              在 12+ 沒有對 iGPU 的支援      0x0306A0(M/H/G)\nIvy Bridge-E5                    10.9.2              N/A                     0x0306E0\nHaswell                          10.8.5                                      0x0306C0(S)\nBroadwell                        10.10.0                                     0x0306D4(U/Y)\nSkylake                          10.11.0                                     0x0506e3(H/S) 0x0406E3(U/Y)\nKaby Lake                        10.12.4                                     0x0906E9(H/S/G) 0x0806E9(U/Y)\nCoffee Lake                      10.12.6                                     0x0906EA(S/H/E) 0x0806EA(U)\nAmber, Whiskey, Comet Lake       10.14.1                                     0x0806E0(U/Y)\nComet Lake                       10.15.4                                     0x0906E0(S/H)\nIce Lake                                                                     0x0706E5(U)\nRocket Lake                                          需要 Comet Lake CPUID     0x0A0671\nTiger Lake                       N/A       N/A       未經測試                    0x0806C0(U)\n\n詳細說明 AMD CPU 在 macOS 中的限制\n\n不幸的是，AMD 不支援 macOS 中的許多功能，亦有許多功能是部分無法運作的。這些包括：\n\n * 依賴 AppleHV 的虛擬機器\n   * 各個主流虛擬機器軟體如 VMWare、Parallels、VirtualBox（自 7.0 版本起）、Docker、Android Studio 等\n   * VMware 10、VirtualBox 6.1 和 Parallels 13.1.0 的確是使用它們自己的虛擬機器管理程式，但是使用這些過時的虛擬機器軟體會帶來很大的安全威脅\n * Adobe 支援\n   * 大多數 Adobe 套件均需要 Intel 的 Memfast 指令集，在使用 AMD CPU 時會導致崩潰\n   * 你可以停用部分功能（如 RAW 支援）來避免崩潰：Adobe 修復\n * 32 位元支援\n   * 對於在 Mojave 和以下版本的那些仍然依賴 32 位元的軟體，請注意原生補丁不支持 32 位元指令\n   * 解決方法是安裝一個自訂内核, 但是你會失去了 iMessage 支援，這些内核亦不會得到任何支援\n * 許多應用程式的穩定性問題\n   * 基於音訊的應用程式最容易出現問題，例如 Logic Pro\n   * DaVinci Resolve 也有零星的問題\n\n對 AMD APU 電腦的忠告\n\n在 AMD APU 電腦上安裝 macOS 是一件非常新鮮的事情。對於 AMD APU 是否能夠完美地安裝 macOS，這很大程度上與 NootedRed 插件，以及其開發者 NootInc 在其他問題的開發進度高度相關（如：AMD 筆記型電腦的觸控板的支援）。即使他們成功修復這些功能，但 AMD CPU 在部分功能仍然與 Intel CPU 有一定差別。\n\n因此，譯者原則上 不建議 在 AMD APU 電腦安裝 macOS（尤其是用於完成重要工作的電腦），一切後果自負。\n\n\n# GPU 支援\n\n由於市場上 GPU 的數量幾乎是無限的，使情況變得非常複雜，但總體劃分如下：\n\n * AMD 基於 GCN、RDNA1 和 RDNA2 的 GPU 支援最新版本的 macOS\n   * AMD 的 iGPU 絕大多數均不支援。但是，小部分 Vega iGPU 可以藉由開發中的第三方 kext來增加對這些 iGPU 的有限度支援\n   * AMD 基於 Lexa 的核心 的 Polaris 系列 GPU 也不支援\n   * 特別提醒 MSI Navi 用戶：安裝程式不能與 5700XT 一起工作 #901\n     * 此問題在 macOS 11 (Big Sur) 中不再存在。\n * NVIDIA 的 GPU 支援很複雜：\n   * Kepler(6XX, 7XX) GPU 最高支援 macOS 11: Big Sur\n   * Maxwell(9XX) 和 Pascal(10XX) GPU 僅支援 macOS 10.13: High Sierra\n   * Turing(20XX, 16XX)、Ampere(30XX) 和以後所有世代的 GPU 都不支援任何版本的 macOS\n * Intel 的 GT2+ 系列 iGPU\n   * 本指南涵蓋了 Ivy Bridge 至 Ice Lake iGPU 的支援\n     * 關於 GMA 系列 iGPU 的資訊可以到：GMA Patching\n   * 注意：GT2 指的是 iGPU 等級，Pentium、Celeron 和 Atom 上的低端 GT1 iGPU 在 macOS 中不支援\n\n對於使用獨立 GPU 的筆記型電腦，有一個重要的注意事項：\n\n * 90% 的獨立 GPU 無法運作，因為它們以 macOS 不支援的配置中連接（Switchable Graphics）。在 NVIDIA 獨立 GPU 中，這通常被稱為 Optimus。由於無法使用這些獨立 GPU 進行内部顯示，因此一般會建議停用及關閉它們（將在本指南的後面介紹）。\n * 然而，在某些情况下，獨立 GPU 為任何外部輸出（HDMI、mini DisplayPort 等）供電，這些輸出有可能正常或無法工作；如果能正常工作，你將不得不讓 GPU 運行。\n * 然而，有少數筆記型電腦沒有使用 Switchable Graphics，因此可以使用獨立 GPU（如果 macOS 支援），但連接和設定通常會導致問題。\n\n有關完整的 GPU 支援列表，請參閱 顯示卡購買指南\n\n詳細的 Intel GPU 支援列表\n\nGPU 世代                   首次支援版本    最後支援版本    備註\n3rd Gen GMA              10.4.1    10.7.5    需要 32 位元内核和補丁\n4th Gen GMA              10.5.0\nArrandale(HD Graphics)   10.6.4    10.13.6   只支援 LVDS，不支援 eDP 和外部輸出\nSandy Bridge(HD 3000)    10.6.7              N/A\nIvy Bridge(HD 4000)      10.7.3    11.7.x\nHaswell(HD 4XXX, 5XXX)   10.8.5    12.6.x\nBroadwell(5XXX, 6XXX)    10.10.0\nSkylake(HD 5XX)          10.11.0\nKaby Lake(HD 6XX)        10.12.4   目前最新版本\nCoffee Lake(UHD 6XX)     10.13.6\nComet Lake(UHD 6XX)      10.15.4\nIce Lake(Gx)             10.15.4             需要 -igfxcdc 和 -igfxdvmt 啟動參數\nTiger Lake(Xe)           N/A       N/A       無可用的驅動程式\nRocket Lake              N/A       N/A       無可用的驅動程式\n\n詳細的 AMD GPU 支援列表\n\nGPU 世代                 首次支援版本    最後支援版本    備註\nX800                   10.3.x    10.7.5    需要 32 位元内核\nX1000                  10.4.x              N/A\nTeraScale              10.4.x    10.13.6\nTeraScale 2/3          10.6.x\nGCN 1                  10.8.3    12.6.x\nGCN 2/3                10.10.x\nPolaris 10, 20         10.12.1   目前最新版本\nVega 10                10.12.6\nRaven Ridge(Vega 10)   11.0.1              需要使用 NootedRed 而非 WhateverGreen\nVega 20                10.14.5             N/A\nPicasso(Vega 10)       11.0.1              需要使用 NootedRed 而非 WhateverGreen\nNavi 10                10.15.1             需要 agdpmod=pikera 啟動參數\nNavi 20                11.4                目前只有一些 Navi 21 型號可以正常運作\nDalí(Vega 20？)         11.0.1              需要使用 NootedRed 而非 WhateverGreen\nRenoir(Vega 20？)       11.0.1\nLucienne(Vega 20？)     11.0.1\nCezanne(Vega 20？)      11.0.1\nNavi 30                N/A       N/A       無可用的驅動程式\n\n詳細的 NVIDIA GPU 支援列表\n\nGPU 世代      首次支援版本    最後支援版本    備註\nGeForce 6   10.2.x    10.7.5    需要 32 位元内核和 NVCAP 補丁\nGeForce 7   10.4.x              需要 NVCAP 補丁\nTesla       10.4.x    10.13.6\nTesla v2    10.5.x\nFermi       10.7.x\nKepler      10.7.x    11.7.x    N/A\nKepler v2   10.8.x\nMaxwell     10.10.x   10.13.6   需要 NVIDIA Web Drivers\nPascal      10.12.4\nTuring      N/A       N/A       無可用的驅動程式\nAmpere\n\n\n# 主板支援\n\n在大多數情况下，只要 CPU 支援，所有主板都支援。\n\nMSI AMD 500 系列主板特別注意\n\nMSI 500 系列 AMD 主板（A520, B550和X570）是個例外。這些主板與 macOS Monterey 和以上版本發生了一些問題:\n\n * PCIe 設備不總是正確枚舉\n * 用於支援 Zen 3 的 BIOS 更新導致開機失敗\n\n這些主板推薦使用 macOS Big Sur 或更早版本。\n\n感謝 CaseySJ，這些問題已在最新版本的 AMD 補丁中修復了!\n\n\n# 儲存裝置支援\n\n在大多數情况下，macOS 支援所有 SATA 和大多數 NVMe 硬碟。只有少數例外：\n\n * 三星 PM981, PM991 和 美光 2200S NVMe SSDs\n   \n   * 這些 SSD 不相容（導致内核錯誤），因此需要NVMeFix.kext 來修復這些錯誤。注意，即使使用 NVMeFix.kext，這些硬碟仍然可能導致引導問題。\n   * 備註：三星 970 EVO Plus NVMe SSD 也有同樣的問題，但它在韌體更新中得到了修復；按這裡來取得更新（在 Windows 中通過三星魔術師或 ISO）。\n   * 注意：macOS 不支援使用 Intel Optane Memory 或 Micron 3D XPoint 進行硬碟加速的筆記型電腦。一些用戶報告，這些硬碟成功在 Catalina 進行讀寫，但我們強烈建議移除這些硬碟，以防止任何潛在的開機問題。\n     * 如果在 macOS 中停用了 Optane 部分，則 Intel Optane H10/H20 型號記憶體是相容的。更多資訊可以在這裡 (中文原文)找到。\n\n * Intel 600p\n   \n   * 雖然可以啟動，但請注意此型號可能會導致許多問題。 Intel 600p NVMe 硬碟有修復嗎？#1286\n   * 660p 型號則沒有問題\n\nAMD CPU 筆記型電腦需特別注意\n\n你應留意你的筆記型電腦所支援的硬碟規格：\n\n * 如支援 NVMe：只要留意上述事項，你應能正常安裝 macOS。\n * 如只支援 SATA：請留意筆記型電腦的 SATA/AHCI 控制器型號。如果是 AMD 原生的 SATA 控制器，除非你願意安裝到 USB 硬碟，否則無法安裝 macOS。\n\n\n# 有線網路\n\n在 macOS 中，幾乎所有有線網路適配器均有一定程度的支援，要麼是内置驅動程式，要麼是社群製作的 kext。主要的例外有：\n\n * Intel I225 2.5Gb NIC\n   * 可以在高端桌面的 Comet Lake 主板上找到\n   * 可能的解決方法：來源 和 示例\n * Intel I350 1Gb server NIC\n   * 通常在 Intel 和 Supermicro 不同年代的伺服器主板上找到\n   * 替代方法\n * Intel 10Gb server NICs\n   * 用於 X520 and X540 芯片組的替代方案\n * Mellanox 和 Qlogic 伺服器網路適配器\n\n\n# 無線網路\n\n大多數筆記型電腦自帶的 Wi-Fi 卡均不支援，因為它們通常是 Intel 或是高通的型號。如果你幸運的話，你可能有一張受支援的 Atheros Wi-Fi 卡，但最高只支援到 High Sierra.\n\n目前最好的選擇是獲得支持的博通 Wi-Fi 卡；請參閱無線網卡購買指南 獲得建議。\n\n注意：在 macOS 上，Intel Wi-Fi 可藉由第三方驅動程式獲得支援，請查看無線網卡購買指南 了解更多關於驅動程式和支援的無線網卡的資訊。\n\n\n# 其他\n\n * 指紋傳感器\n   * 目前還沒有辦法模擬 Touch ID 傳感器，因此指紋傳感器將無法運作。\n * Windows Hello 人臉識別\n   * 一些筆記本電腦自帶的 WHFR 是 I2C 連接的（並通過 iGPU 使用），這些將不起作用。\n   * 一些筆記本電腦配備了以 USB 連接的 WHFR，如果你幸運的話，你可能會有相機功能，但沒有其他功能。\n * Intel 智能聲音技術\n   * 對於使用英特爾 SST 的筆記型電腦，所有通過這個技術連接的任何東西（通常是內部麥克風）都將不起作用，因為這個技術不受支援。你可以在 Windows 的裝置管理員中查看。\n * 耳機連接埠組合\n   * 一些帶有綜合耳機插孔的筆記型電腦可能無法通過它們進行音訊輸入，必須使用內置麥克風或通過 USB 連接埠的外部音訊輸入設備。\n * Thunderbolt USB-C 連接埠\n   * （Hackintosh）目前在 macOS 中對 Thunderbolt 的支援仍然不確定，尤其是在 Alpine Ridge 控制器上，這是目前大多數筆記型電腦都擁有的。有人嘗試維持控制器的電力來允許Thunderbolt 和 USB-C 的熱插拔，但代價是內核崩潰 和/或 USB-C 在睡眠後失效。如果你想使用 USB-C 連接埠並能夠休眠，你必須在啟動時插入裝置並保持插入狀態。\n   * 注意：這僅適用於 Thunderbolt 3 和 USB-C 的組合連接埠，不適用於僅 USB-C 的連接埠。\n   * 在 BIOS 中停用 Thunderbolt 也會解決這個問題。",normalizedContent:"# 硬體限制\n\n在開始安裝 macos 之前，你需要了解許多硬體上的限制。這是因為蘋果支援的硬體數量有限，所以我們要麼受到蘋果的限制，要麼受到社群建立的補丁的限制。\n\n需要驗證的主要硬體部分有：\n\n\n\n * cpu 支援\n * gpu 支援\n * 主板支援\n * 儲存裝置支援\n * 有線網路\n * 無線網路\n * 其他\n\n\n\n有關該主題的更詳細指南，請瀏覽：\n\n * 顯示卡購買指南\n   * 檢查您的 gpu 是否受支援，以及你可以執行哪個版本的 macos。\n * 無線網卡購買指南\n   * 檢查你的無線網卡是否支援 macos。\n * 避免購買指南\n   * 關於應該避免什麼以及你的硬體可能會遇到什麼問題的指南。（btw：這裡是告訴你哪些硬體既不被 macos 支援，亦沒有可以驅動它們的補丁）\n\n\n# cpu 支援\n\n對於 cpu，我們有以下细分:\n\n * 32 和 64 位元 cpu 都支援\n   * 但這需要操作系統支持你的架構，請參閱下面的 cpu 要求部分\n * intel 的桌面 cpu\n   * 本指南支援 yonah 到 comet lake 世代。\n   * atoms、celeron 和 pentium cpu 需要配備獨立 gpu。\n * intel 高端桌面（hedt）和伺服器 cpu\n   * 本指南支援 nehalem 到 cascade lake x 世代。\n * intel core “i” 和至強系列的筆記型電腦 cpu\n   * 本指南支援 arrandale 到 ice lake 世代。\n   * 不支持 mobile atoms、celeron 和 pentium cpu\n * amd 的 bulldozer(15h)，jaguar（16h）和 ryzen(17h) cpu\n   * 需要配備獨立 gpu，或指定的 vega igpu。詳情請參閱 gpu 支援\n   * 注意：amd cpu 無法支援 macos 的所有功能，請參見下文。\n\n欲了解更多深入資訊，請參閱避免購買指南\n\n詳細的 cpu 要求\n\n架構需求\n\n * 32 位元 cpu 支援 10.4.1 至 10.6.8\n   * 注意 10.7.x 需要 64 位元用戶空間，將 32 位元 cpu 限制為 10.6\n * 從 10.4.1 起支援 64 位元 cpu\n\nsse要求:\n\n * 所有 intel 版本的 os x/macos 都需要 sse3\n * 所有 64 位元版本的 os x/macos 都需要 ssse3\n   * 對於缺少 ssse3 的 cpu（例如某些 64 位元 pentium），我們建議使用 32 位元用戶空間（i386-user32）\n * macos 10.12 及更新版本需要 sse4\n * macos 10.14 和更新版本需要 sse4.2\n   * sse4.1 cpu 支持 telemetrap.kext\n   * 較新的 amd 驅動程式也需要 sse4.2 來支援 metal。要解決這個問題，請參閱：mousse: sse4.2 emulation\n\n固件要求:\n\n * os x 10.4.1 到 10.4.7 需要 efi32（即 ia32（32 位元）版本的 opencore）\n   * os x 10.4.8 到 10.7.5 支持 efi32 和 efi64\n * os x 10.8 及更新版本需要 efi64（即 x64（64位）版本的 opencore）\n * os x 10.7 到 10.9 需要 openpartitiondxe.efi 啟動恢復分區\n\n内核要求:\n\n * os x 10.4 和 10.5 由於只支持 32 位元内核空間，因此需要 32 位元 kext\n   * os x 10.6 和 10.7 同時支持 32 和 64 位元内核空間\n * os x 10.8 及更新版本由於只支持 64 位元内核空間，因此需要 64 位元 kext\n   * 執行lipo -archs 以了解你的 kext 所支援的架構（請記住在二進制檔案本身而不是 .kext 包上執行）\n\n核心／線程數限制:\n\n * os x 10.10 及以下版本可能無法以超過 24 個線程啟動 (明顯表現為 mp_cpus_call_wait() timeout 錯誤）\n * os x 10.11 及更新版本有 64 個線程的限制\n * cpus= 引導參數可以作為一個解決方案，或者停用超線程\n\n特別注意事項:\n\n * lilu 和插件需要 10.8 或更新版本才能執行\n   * 我們建議在 os x 的舊版本中執行 fakesmc\n * os x 10.6 及更早版本要求啟用 rebuildapplememorymap\n   * 這是為了解決早期的內核問題\n\n詳細的 intel cpu 支援圖表\n\n對於純淨内核（即沒有修改）的支援：\n\ncpu 世代                           最初支援版本    最後支援版本    說明                      cpuid\npentium 4                        10.4.1    10.5.8    僅用於開發工具包                0x0f41\nyonah                            10.4.4    10.6.8    32-bit                  0x0006e6\nconroe, merom                    10.4.7    10.11.6   no sse4                 0x0006f2\npenryn                           10.4.10   10.13.6   no sse4.2               0x010676\nnehalem                          10.5.6    目前最新版本    n/a                     0x0106a2\nlynnfield, clarksfield           10.6.3              在 10.14+ 沒有對 igpu 的支援   0x0106e0\nwestmere, clarkdale, arrandale   10.6.4                                      0x0206c0\nsandy bridge                     10.6.7                                      0x0206a0(m/h)\nivy bridge                       10.7.3              在 12+ 沒有對 igpu 的支援      0x0306a0(m/h/g)\nivy bridge-e5                    10.9.2              n/a                     0x0306e0\nhaswell                          10.8.5                                      0x0306c0(s)\nbroadwell                        10.10.0                                     0x0306d4(u/y)\nskylake                          10.11.0                                     0x0506e3(h/s) 0x0406e3(u/y)\nkaby lake                        10.12.4                                     0x0906e9(h/s/g) 0x0806e9(u/y)\ncoffee lake                      10.12.6                                     0x0906ea(s/h/e) 0x0806ea(u)\namber, whiskey, comet lake       10.14.1                                     0x0806e0(u/y)\ncomet lake                       10.15.4                                     0x0906e0(s/h)\nice lake                                                                     0x0706e5(u)\nrocket lake                                          需要 comet lake cpuid     0x0a0671\ntiger lake                       n/a       n/a       未經測試                    0x0806c0(u)\n\n詳細說明 amd cpu 在 macos 中的限制\n\n不幸的是，amd 不支援 macos 中的許多功能，亦有許多功能是部分無法運作的。這些包括：\n\n * 依賴 applehv 的虛擬機器\n   * 各個主流虛擬機器軟體如 vmware、parallels、virtualbox（自 7.0 版本起）、docker、android studio 等\n   * vmware 10、virtualbox 6.1 和 parallels 13.1.0 的確是使用它們自己的虛擬機器管理程式，但是使用這些過時的虛擬機器軟體會帶來很大的安全威脅\n * adobe 支援\n   * 大多數 adobe 套件均需要 intel 的 memfast 指令集，在使用 amd cpu 時會導致崩潰\n   * 你可以停用部分功能（如 raw 支援）來避免崩潰：adobe 修復\n * 32 位元支援\n   * 對於在 mojave 和以下版本的那些仍然依賴 32 位元的軟體，請注意原生補丁不支持 32 位元指令\n   * 解決方法是安裝一個自訂内核, 但是你會失去了 imessage 支援，這些内核亦不會得到任何支援\n * 許多應用程式的穩定性問題\n   * 基於音訊的應用程式最容易出現問題，例如 logic pro\n   * davinci resolve 也有零星的問題\n\n對 amd apu 電腦的忠告\n\n在 amd apu 電腦上安裝 macos 是一件非常新鮮的事情。對於 amd apu 是否能夠完美地安裝 macos，這很大程度上與 nootedred 插件，以及其開發者 nootinc 在其他問題的開發進度高度相關（如：amd 筆記型電腦的觸控板的支援）。即使他們成功修復這些功能，但 amd cpu 在部分功能仍然與 intel cpu 有一定差別。\n\n因此，譯者原則上 不建議 在 amd apu 電腦安裝 macos（尤其是用於完成重要工作的電腦），一切後果自負。\n\n\n# gpu 支援\n\n由於市場上 gpu 的數量幾乎是無限的，使情況變得非常複雜，但總體劃分如下：\n\n * amd 基於 gcn、rdna1 和 rdna2 的 gpu 支援最新版本的 macos\n   * amd 的 igpu 絕大多數均不支援。但是，小部分 vega igpu 可以藉由開發中的第三方 kext來增加對這些 igpu 的有限度支援\n   * amd 基於 lexa 的核心 的 polaris 系列 gpu 也不支援\n   * 特別提醒 msi navi 用戶：安裝程式不能與 5700xt 一起工作 #901\n     * 此問題在 macos 11 (big sur) 中不再存在。\n * nvidia 的 gpu 支援很複雜：\n   * kepler(6xx, 7xx) gpu 最高支援 macos 11: big sur\n   * maxwell(9xx) 和 pascal(10xx) gpu 僅支援 macos 10.13: high sierra\n   * turing(20xx, 16xx)、ampere(30xx) 和以後所有世代的 gpu 都不支援任何版本的 macos\n * intel 的 gt2+ 系列 igpu\n   * 本指南涵蓋了 ivy bridge 至 ice lake igpu 的支援\n     * 關於 gma 系列 igpu 的資訊可以到：gma patching\n   * 注意：gt2 指的是 igpu 等級，pentium、celeron 和 atom 上的低端 gt1 igpu 在 macos 中不支援\n\n對於使用獨立 gpu 的筆記型電腦，有一個重要的注意事項：\n\n * 90% 的獨立 gpu 無法運作，因為它們以 macos 不支援的配置中連接（switchable graphics）。在 nvidia 獨立 gpu 中，這通常被稱為 optimus。由於無法使用這些獨立 gpu 進行内部顯示，因此一般會建議停用及關閉它們（將在本指南的後面介紹）。\n * 然而，在某些情况下，獨立 gpu 為任何外部輸出（hdmi、mini displayport 等）供電，這些輸出有可能正常或無法工作；如果能正常工作，你將不得不讓 gpu 運行。\n * 然而，有少數筆記型電腦沒有使用 switchable graphics，因此可以使用獨立 gpu（如果 macos 支援），但連接和設定通常會導致問題。\n\n有關完整的 gpu 支援列表，請參閱 顯示卡購買指南\n\n詳細的 intel gpu 支援列表\n\ngpu 世代                   首次支援版本    最後支援版本    備註\n3rd gen gma              10.4.1    10.7.5    需要 32 位元内核和補丁\n4th gen gma              10.5.0\narrandale(hd graphics)   10.6.4    10.13.6   只支援 lvds，不支援 edp 和外部輸出\nsandy bridge(hd 3000)    10.6.7              n/a\nivy bridge(hd 4000)      10.7.3    11.7.x\nhaswell(hd 4xxx, 5xxx)   10.8.5    12.6.x\nbroadwell(5xxx, 6xxx)    10.10.0\nskylake(hd 5xx)          10.11.0\nkaby lake(hd 6xx)        10.12.4   目前最新版本\ncoffee lake(uhd 6xx)     10.13.6\ncomet lake(uhd 6xx)      10.15.4\nice lake(gx)             10.15.4             需要 -igfxcdc 和 -igfxdvmt 啟動參數\ntiger lake(xe)           n/a       n/a       無可用的驅動程式\nrocket lake              n/a       n/a       無可用的驅動程式\n\n詳細的 amd gpu 支援列表\n\ngpu 世代                 首次支援版本    最後支援版本    備註\nx800                   10.3.x    10.7.5    需要 32 位元内核\nx1000                  10.4.x              n/a\nterascale              10.4.x    10.13.6\nterascale 2/3          10.6.x\ngcn 1                  10.8.3    12.6.x\ngcn 2/3                10.10.x\npolaris 10, 20         10.12.1   目前最新版本\nvega 10                10.12.6\nraven ridge(vega 10)   11.0.1              需要使用 nootedred 而非 whatevergreen\nvega 20                10.14.5             n/a\npicasso(vega 10)       11.0.1              需要使用 nootedred 而非 whatevergreen\nnavi 10                10.15.1             需要 agdpmod=pikera 啟動參數\nnavi 20                11.4                目前只有一些 navi 21 型號可以正常運作\ndali(vega 20？)         11.0.1              需要使用 nootedred 而非 whatevergreen\nrenoir(vega 20？)       11.0.1\nlucienne(vega 20？)     11.0.1\ncezanne(vega 20？)      11.0.1\nnavi 30                n/a       n/a       無可用的驅動程式\n\n詳細的 nvidia gpu 支援列表\n\ngpu 世代      首次支援版本    最後支援版本    備註\ngeforce 6   10.2.x    10.7.5    需要 32 位元内核和 nvcap 補丁\ngeforce 7   10.4.x              需要 nvcap 補丁\ntesla       10.4.x    10.13.6\ntesla v2    10.5.x\nfermi       10.7.x\nkepler      10.7.x    11.7.x    n/a\nkepler v2   10.8.x\nmaxwell     10.10.x   10.13.6   需要 nvidia web drivers\npascal      10.12.4\nturing      n/a       n/a       無可用的驅動程式\nampere\n\n\n# 主板支援\n\n在大多數情况下，只要 cpu 支援，所有主板都支援。\n\nmsi amd 500 系列主板特別注意\n\nmsi 500 系列 amd 主板（a520, b550和x570）是個例外。這些主板與 macos monterey 和以上版本發生了一些問題:\n\n * pcie 設備不總是正確枚舉\n * 用於支援 zen 3 的 bios 更新導致開機失敗\n\n這些主板推薦使用 macos big sur 或更早版本。\n\n感謝 caseysj，這些問題已在最新版本的 amd 補丁中修復了!\n\n\n# 儲存裝置支援\n\n在大多數情况下，macos 支援所有 sata 和大多數 nvme 硬碟。只有少數例外：\n\n * 三星 pm981, pm991 和 美光 2200s nvme ssds\n   \n   * 這些 ssd 不相容（導致内核錯誤），因此需要nvmefix.kext 來修復這些錯誤。注意，即使使用 nvmefix.kext，這些硬碟仍然可能導致引導問題。\n   * 備註：三星 970 evo plus nvme ssd 也有同樣的問題，但它在韌體更新中得到了修復；按這裡來取得更新（在 windows 中通過三星魔術師或 iso）。\n   * 注意：macos 不支援使用 intel optane memory 或 micron 3d xpoint 進行硬碟加速的筆記型電腦。一些用戶報告，這些硬碟成功在 catalina 進行讀寫，但我們強烈建議移除這些硬碟，以防止任何潛在的開機問題。\n     * 如果在 macos 中停用了 optane 部分，則 intel optane h10/h20 型號記憶體是相容的。更多資訊可以在這裡 (中文原文)找到。\n\n * intel 600p\n   \n   * 雖然可以啟動，但請注意此型號可能會導致許多問題。 intel 600p nvme 硬碟有修復嗎？#1286\n   * 660p 型號則沒有問題\n\namd cpu 筆記型電腦需特別注意\n\n你應留意你的筆記型電腦所支援的硬碟規格：\n\n * 如支援 nvme：只要留意上述事項，你應能正常安裝 macos。\n * 如只支援 sata：請留意筆記型電腦的 sata/ahci 控制器型號。如果是 amd 原生的 sata 控制器，除非你願意安裝到 usb 硬碟，否則無法安裝 macos。\n\n\n# 有線網路\n\n在 macos 中，幾乎所有有線網路適配器均有一定程度的支援，要麼是内置驅動程式，要麼是社群製作的 kext。主要的例外有：\n\n * intel i225 2.5gb nic\n   * 可以在高端桌面的 comet lake 主板上找到\n   * 可能的解決方法：來源 和 示例\n * intel i350 1gb server nic\n   * 通常在 intel 和 supermicro 不同年代的伺服器主板上找到\n   * 替代方法\n * intel 10gb server nics\n   * 用於 x520 and x540 芯片組的替代方案\n * mellanox 和 qlogic 伺服器網路適配器\n\n\n# 無線網路\n\n大多數筆記型電腦自帶的 wi-fi 卡均不支援，因為它們通常是 intel 或是高通的型號。如果你幸運的話，你可能有一張受支援的 atheros wi-fi 卡，但最高只支援到 high sierra.\n\n目前最好的選擇是獲得支持的博通 wi-fi 卡；請參閱無線網卡購買指南 獲得建議。\n\n注意：在 macos 上，intel wi-fi 可藉由第三方驅動程式獲得支援，請查看無線網卡購買指南 了解更多關於驅動程式和支援的無線網卡的資訊。\n\n\n# 其他\n\n * 指紋傳感器\n   * 目前還沒有辦法模擬 touch id 傳感器，因此指紋傳感器將無法運作。\n * windows hello 人臉識別\n   * 一些筆記本電腦自帶的 whfr 是 i2c 連接的（並通過 igpu 使用），這些將不起作用。\n   * 一些筆記本電腦配備了以 usb 連接的 whfr，如果你幸運的話，你可能會有相機功能，但沒有其他功能。\n * intel 智能聲音技術\n   * 對於使用英特爾 sst 的筆記型電腦，所有通過這個技術連接的任何東西（通常是內部麥克風）都將不起作用，因為這個技術不受支援。你可以在 windows 的裝置管理員中查看。\n * 耳機連接埠組合\n   * 一些帶有綜合耳機插孔的筆記型電腦可能無法通過它們進行音訊輸入，必須使用內置麥克風或通過 usb 連接埠的外部音訊輸入設備。\n * thunderbolt usb-c 連接埠\n   * （hackintosh）目前在 macos 中對 thunderbolt 的支援仍然不確定，尤其是在 alpine ridge 控制器上，這是目前大多數筆記型電腦都擁有的。有人嘗試維持控制器的電力來允許thunderbolt 和 usb-c 的熱插拔，但代價是內核崩潰 和/或 usb-c 在睡眠後失效。如果你想使用 usb-c 連接埠並能夠休眠，你必須在啟動時插入裝置並保持插入狀態。\n   * 注意：這僅適用於 thunderbolt 3 和 usb-c 的組合連接埠，不適用於僅 usb-c 的連接埠。\n   * 在 bios 中停用 thunderbolt 也會解決這個問題。",charsets:{cjk:!0}},{title:"Credits",frontmatter:{},regularPath:"/misc/credit.html",relativePath:"misc/credit.md",key:"v-fb5f9066",path:"/misc/credit.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# Credits\n\nNo good guide is made by one man, here's credit to those who've helped out:\n\n * vit9696\n   * One of many developers of OpenCore\n   * Corrections to the original guide\n   * Corrections to this guide...(seriously this man deserves a medal)\n * CorpNewt\n   * Heavily inspiring this guide(if not a rip off) and helping overall with questions and advice\n   * Spoof SSDT source\n   * Creating ProperTree and GenSMBIOS\n * Midi\n   * Corrections and recommendations for the guide\n * AlGrey#9303\n   * AMD Kernel patches\n * NoOne/IOIIIO\n   * For the original AMD Vanilla Guide\n   * Corrections to AMD portion of the guide\n * DhinakG\n   * Random guide related stuff and maintaining the guide\n * 1Revenger1\n   * Maintaining the guide\n * Khronokernel\n   * For both writing and maintaining the guide\n * kernel\n   * For OCSysInfo\n * all the GitHub contributors\n * and the rest of the dortania team for helping out\n\nAnd to the rest who've helped out as well, thank you!\n\nDevelopers of OpenCore:\n\n * al3xtjames\n * Andrey1970AppleLife\n * mhaeuser (formerly Download-Fritz)\n * Goldfish64\n * nms42\n * PMHeart\n * savvamitrofanov\n * vit9696\n\nGuides linked or those that inspired this guide:\n\n * r/Hackintosh Vanilla Desktop Guide\n * All-in-one Vanilla AMD Hackintosh Guide\n * USB Map Guide\n * Intel Framebuffer Patching\n * AppleALC Supported Codecs\n * gfxutil\n\nAnd for those who have recommendations or issues with this guide, you can find the GitHub repo for this site here.\n\nSources:\n\n * OpenCore Documentation\n * KASLR slide:\n   * vit9696's Explainer\n   * Apianti's explainer\n   * KASLR Explainer\n   * More KASLR Explainer\n * Cleaning RC scripts:\n   * Clover Emulated NVRAM Uninstaller\n * ACPI Dumping:\n   * acpica\n * iServices Guide:\n   * Как завести сервисы Apple - iMessage, FaceTime, iCloud\n * iGPU and DRM configuration:\n   * WhateverGreen's manual\n   * WhateverGreen's DRM chart\n   * DRM Testing\n * rEFInd Guide:\n   * rEFInd Manual\n * USB Mapping Guide:\n   * XHCI Wake issues\n   * CorpNewt's USB Map Guide\n   * AppleLife USB Map Guide",normalizedContent:"# credits\n\nno good guide is made by one man, here's credit to those who've helped out:\n\n * vit9696\n   * one of many developers of opencore\n   * corrections to the original guide\n   * corrections to this guide...(seriously this man deserves a medal)\n * corpnewt\n   * heavily inspiring this guide(if not a rip off) and helping overall with questions and advice\n   * spoof ssdt source\n   * creating propertree and gensmbios\n * midi\n   * corrections and recommendations for the guide\n * algrey#9303\n   * amd kernel patches\n * noone/ioiiio\n   * for the original amd vanilla guide\n   * corrections to amd portion of the guide\n * dhinakg\n   * random guide related stuff and maintaining the guide\n * 1revenger1\n   * maintaining the guide\n * khronokernel\n   * for both writing and maintaining the guide\n * kernel\n   * for ocsysinfo\n * all the github contributors\n * and the rest of the dortania team for helping out\n\nand to the rest who've helped out as well, thank you!\n\ndevelopers of opencore:\n\n * al3xtjames\n * andrey1970applelife\n * mhaeuser (formerly download-fritz)\n * goldfish64\n * nms42\n * pmheart\n * savvamitrofanov\n * vit9696\n\nguides linked or those that inspired this guide:\n\n * r/hackintosh vanilla desktop guide\n * all-in-one vanilla amd hackintosh guide\n * usb map guide\n * intel framebuffer patching\n * applealc supported codecs\n * gfxutil\n\nand for those who have recommendations or issues with this guide, you can find the github repo for this site here.\n\nsources:\n\n * opencore documentation\n * kaslr slide:\n   * vit9696's explainer\n   * apianti's explainer\n   * kaslr explainer\n   * more kaslr explainer\n * cleaning rc scripts:\n   * clover emulated nvram uninstaller\n * acpi dumping:\n   * acpica\n * iservices guide:\n   * как завести сервисы apple - imessage, facetime, icloud\n * igpu and drm configuration:\n   * whatevergreen's manual\n   * whatevergreen's drm chart\n   * drm testing\n * refind guide:\n   * refind manual\n * usb mapping guide:\n   * xhci wake issues\n   * corpnewt's usb map guide\n   * applelife usb map guide",charsets:{cyrillic:!0}},{title:"OpenCore 入門",frontmatter:{},regularPath:"/prerequisites.html",relativePath:"prerequisites.md",key:"v-800849a6",path:"/prerequisites.html",headers:[{level:2,title:"前提條件",slug:"前提條件",normalizedTitle:"前提條件",charIndex:60}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"前提條件",content:"# OpenCore 入門\n\n在我們可以開始建立一個基於 OpenCore 的系統之前，我們需要確認以下事項。\n\n\n# 前提條件\n\n 1. [關鍵] 時間和耐心。\n    * 如果你有限時完成的重要工作，請不要開始 Hackintosh，黑蘋果不是你的首要工作。\n 2. [關鍵] 了解你的硬體\n    * 你的 CPU 型號和世代\n    * 你的 GPU 型號\n    * 你的儲存設備（硬碟／固態硬碟、NVME/AHCI/RAID/IDE 配置，PS：這裡指的是南橋／芯片組上的硬碟的工作模式）\n    * 你的筆記型／桌面電腦的 OEM 型號（如果來自 OEM）\n    * 你的 有線網卡芯片組\n    * 你的無線／藍牙芯片組\n 3. [關鍵] 命令列及使用終端／命令提示字符的基本知識\n    * 這不僅僅是[關鍵]，也是整個指南的基礎。如果你不知道如何cd到一個目錄或刪除一個檔案，我們將無法幫助你。\n 4. [關鍵] 在相容性部分中看到你的硬體是否與 macOS 相容。\n    * 硬體限制頁面\n 5. [關鍵] 最低要求：\n    * 16GB 的 USB 隨身碟，如果你打算使用 macOS 製作開機隨身碟\n    * 4GB 的 USB 隨身碟，如果你打算使用 Windows 或 Linux 製作開機隨身碟\n 6. [關鍵] 有線網路連接（如沒有 Wi-Fi 發射器而使用 USB 作有線網路連接，那麼它是否能工作取決於 macOS 對其有線網卡的支持），並且你必須知道你的網卡的型號。\n    * 你必須有物理的網路連接埠或是與 macOS 相容的有線網卡／無線網卡。如果你有 相容的無線網卡, 你也可以使用它。\n      * 請注意，macOS 原生不支援市面大多數的無線網卡\n    * 對於不能使用網路但有 Android 手機的人，你可以將你的 Android 手機連接到 Wi-Fi，然後使用 HoRNDIS 功能來共享它。\n 7. [關鍵] 已正確安裝的操作系統：\n    * 包括：\n      * macOS（版本越新越好）\n      * Windows（Windows 10 1703 或更新版本）\n      * Linux（純淨且功能正常，使用 Python 2.7 或更高版本）\n    * 對於 Windows 或 Linux 用戶，你正在使用的磁碟區上應至少有 15GB 的可用空間。在 Windows 上，你的系統磁碟區 (C:) 必須至少有 15GB 的可用空間。\n    * 對於 macOS 用戶，系統磁碟區上至少有 30GB 的可用空間。\n    * 本指南手冊中使用的大多數工具需要 安装 Python\n 8. [關鍵] 安裝了最新版本的 BIOS\n    * 在多數情况下，更新 BIOS 將為 macOS 提供最好的支援\n    * MSI 500 系列 AMD 主板是個例外，更多資訊請瀏覽 主板支援。",normalizedContent:"# opencore 入門\n\n在我們可以開始建立一個基於 opencore 的系統之前，我們需要確認以下事項。\n\n\n# 前提條件\n\n 1. [關鍵] 時間和耐心。\n    * 如果你有限時完成的重要工作，請不要開始 hackintosh，黑蘋果不是你的首要工作。\n 2. [關鍵] 了解你的硬體\n    * 你的 cpu 型號和世代\n    * 你的 gpu 型號\n    * 你的儲存設備（硬碟／固態硬碟、nvme/ahci/raid/ide 配置，ps：這裡指的是南橋／芯片組上的硬碟的工作模式）\n    * 你的筆記型／桌面電腦的 oem 型號（如果來自 oem）\n    * 你的 有線網卡芯片組\n    * 你的無線／藍牙芯片組\n 3. [關鍵] 命令列及使用終端／命令提示字符的基本知識\n    * 這不僅僅是[關鍵]，也是整個指南的基礎。如果你不知道如何cd到一個目錄或刪除一個檔案，我們將無法幫助你。\n 4. [關鍵] 在相容性部分中看到你的硬體是否與 macos 相容。\n    * 硬體限制頁面\n 5. [關鍵] 最低要求：\n    * 16gb 的 usb 隨身碟，如果你打算使用 macos 製作開機隨身碟\n    * 4gb 的 usb 隨身碟，如果你打算使用 windows 或 linux 製作開機隨身碟\n 6. [關鍵] 有線網路連接（如沒有 wi-fi 發射器而使用 usb 作有線網路連接，那麼它是否能工作取決於 macos 對其有線網卡的支持），並且你必須知道你的網卡的型號。\n    * 你必須有物理的網路連接埠或是與 macos 相容的有線網卡／無線網卡。如果你有 相容的無線網卡, 你也可以使用它。\n      * 請注意，macos 原生不支援市面大多數的無線網卡\n    * 對於不能使用網路但有 android 手機的人，你可以將你的 android 手機連接到 wi-fi，然後使用 horndis 功能來共享它。\n 7. [關鍵] 已正確安裝的操作系統：\n    * 包括：\n      * macos（版本越新越好）\n      * windows（windows 10 1703 或更新版本）\n      * linux（純淨且功能正常，使用 python 2.7 或更高版本）\n    * 對於 windows 或 linux 用戶，你正在使用的磁碟區上應至少有 15gb 的可用空間。在 windows 上，你的系統磁碟區 (c:) 必須至少有 15gb 的可用空間。\n    * 對於 macos 用戶，系統磁碟區上至少有 30gb 的可用空間。\n    * 本指南手冊中使用的大多數工具需要 安装 python\n 8. [關鍵] 安裝了最新版本的 bios\n    * 在多數情况下，更新 bios 將為 macos 提供最好的支援\n    * msi 500 系列 amd 主板是個例外，更多資訊請瀏覽 主板支援。",charsets:{cjk:!0}},{title:"術語",frontmatter:{},regularPath:"/terminology.html",relativePath:"terminology.md",key:"v-8f35bea6",path:"/terminology.html",lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:null,content:"# 術語\n\n術語             描述\nmacOS          蘋果公司自己的基於 UNIX 的操作系統，用於 Mac 機器和 “使 Mac 成為 Mac” 的重點。\nWindows        微軟的專有操作系統，可在各種電腦上安裝和使用（如果你不想頭疼，就繼續使用這個操作系統）\nLinux          基於 Linux 内核的開源類 UNIX 操作系統家族，1991 年 9 月 17 日由 Linus Torvalds\n               首次發佈的操作系統内核。Linux 通常打包在 Linux 發行版中。注意，雖然 macOS 和 Linux 可能是基於\n               UNIX 的，但它們有很大的不同。\nDistros        發行版的縮寫。Linux 發行版是 Linux 的發行方式。然而，當涉及到 macOS 時，發行版混合了 macOS\n               安裝程式和一堆非蘋果公司的工具。不要使用被修改過的 macOS\nHackintosh     將 macOS 安裝到 PC 上的過程，請注意Hackintosh 不是操作系統，它也可以指被「黑客」攻擊的機器，以使\n               macOS 在其上運行。例如：我在這台 Windows 機器上安裝了 macOS，因此我有一個\n               Hackintosh。但是我沒有安裝 “Hackintosh”。\nBootloader     載入操作系統的軟體，通常由操作系統建立者製作。從技術上講，OpenCore本身並不是一個開機程式（請參閱下面的開機管理器解釋）。蘋果的\n               boot.efi 將是 Mac 或 Hackintosh 中實際的引導程式。\nBoot Manager   管理開機程式的軟體（開機管理器）- 我們有很多例子：Clover, systemd-boot, OpenCore,\n               rEFInd, rEFIt… 這些通常被視為幫助系統實際的引導程式作準備。\n\n----------------------------------------\n\n術語             描述\nOpenCore       Hackintosh 界的新熱門，由 Acidanthera 團隊在考慮安全性的情況下製作，比 Clover\n               啟動速度更快，佔用空間更少。它需要更多的工作來設定，但也比 Clover 支持更多原生的東西(如休眠，FileVault\n               2，熱鍵等等)。\nClover         在 OpenCore 發布後被認為是舊式的開機管理器。本指南將不涉及該軟體的使用。\nACPI           進階組態與電源介面（Advanced Configuration and Power Interface,\n               ACPI）提供了一個開放的標準，操作系統可以使用它來發現和設定計算機硬體組件，更多內容將在本指南的後面討論。\nDSDT/SSDT      ACPI 中的表格描述了裝置以及操作系統應該如何與它們進行交互，例如使電腦進入休眠、喚醒、切換 GPU、USB\n               連接埠等等。\n.AML           編譯後的 ACPI 檔案格式，以及你的 PC 將執行的內容。 .DAT 是另一個具有完全相同用途的副檔名。\n.DSL           ACPI 的源代碼 - 這是您為電腦編輯和編譯的內容。不要 將這種檔案格式與 .asl 混淆。\nKexts          內核延伸，是 Kernel Ext 的簡稱。這是 macOS\n               的驅動程式。它們用於執行不同的任務，如裝置驅動程式，或用於不同的目的（在駭客編程中），如修補操作系統，注入訊息或執行任務。kext\n               並不是優秀 Hackintosh 的唯一組成部分，因為它們通常與 ACPI 補丁和修復一起使用。\nBIOS           基本輸入／輸出系統是用於在啟動過程（通電啟動）中執行硬體初始化的韌體，並為操作系統和程式提供執行期服務。BIOS\n               韌體預先安裝在 PC 的主板上，它是在通電時第一個執行的軟體（資料來源：維基百科）。它是 70\n               年代製作的舊式軟體，由於其成熟度，至今仍在使用。\nUEFI           統一可延伸韌體介面（Unified Extensible Firmware\n               Interface）是定義操作系統與平台韌體之間的軟件介面的規範。UEFI 取代了最初出現在所有 IBM PC 相容\n               PC 上的傳統 BIOS （Basic Input/Output System）韌體介面，大部分 UEFI\n               韌體實作都支持傳統 BIOS 服務。UEFI 可以支持遠端診斷和修復電腦，即使沒有安裝操作系統。（資料來源：維基百科）\nUEFI Drivers   與其他操作系統一樣，UEFI 也有驅動程式，由 Clover 或 OpenCore\n               載入。它們還可以載入裝置或執行其他任務，如用 HfsPlus 載入蘋果的 HfsPlus.efi, 修補 macOS 的\n               boot.efi 等等. 你可能會發現它們是 Clover Drivers 或 OpenCore Drivers,\n               它們都是 UEFI 驅動程式。（注意：只使用針對特定開機管理器的驅動程式。更多資訊可以在 Clover\n               轉換頁面上找到）。\n\n----------------------------------------\n\n術語    描述\nEFI   它可以表示兩件事：\n      - Mac 的韌體，與 UEFI 相同，但針對 Mac 進行了相當大的修改，所以不那麼「通用」\n      - 硬碟上的分區，儲存由 UEFI 讀取的軟體來載入操作系統（如 Windows 開機程式）或 UEFI 應用程式（如\n      OpenCore），它是 FAT32 格式的，ID 類型為 EF00（十六進制）。它可以被命名為 ESP 或\n      SYSTEM，通常大小在 100MB 到 400MB 之間，但大小不影響任何東西。\nMBR   主開機記錄是一種特殊類型的開機扇區，位於已分區電腦的大容量儲存裝置（如硬碟或卸除式磁碟）的最開始，旨在與IBM PC\n      相容系統及其他系統一起使用。MBR 於 1983 年首次與 PC DOS 2.0 一起推出。MBR\n      儲存有關如何在該介質上組織包含文件系統的邏輯分區的資訊。MBR 還包含可執行代碼，用作已安裝操作系統的載入程式 —\n      通常通過將控制權傳遞給載入程式的第二階段，或與每個分區的卷引導記錄（VBR）結合使用。此 MBR\n      代碼通常稱為引導程式（來源：維基百科）。此格式用於 BIOS/舊版設置。MBR 格式最多支援 2 TiB 的大小和最多\n      4 個主分區。\nGPT   GUID 分區表（GUID Partition\n      Table）是物理電腦儲存裝置（如硬碟或固態硬碟）的分區表佈局的標準，使用通用唯一標識碼（也稱為全域唯一標識符（GUID））。作為統一可延伸韌體介面（UEFI）標準（統一\n      EFI 論壇提議的 PC BIOS 替代品）的一部分，由於主開機記錄（MBR）分區表的限制，它也用於某些 BIOS\n      系統，該分區表使用 32位元進行傳統 512 位元組磁碟扇區的邏輯塊尋址（LBA）（來源：維基百科）。這是在一般\n      UEFI 系統上使用的磁碟格式。\n\n----------------------------------------\n\n術語          描述\nEC          嵌入式控制器。主板和嵌入式外設（如熱鍵、連接埠或電池）之間的通信。\nPLUG        允許 XCPM，蘋果 XNU（OS 内核）電源管理，允許附加更好的整體 CPU 控制。僅支援 Haswell 和更新\n            CPU。\nAWAC        ACPI 喚醒鬧鐘計數器，主板的內部時鐘。與實時時鐘（RTC）形成對比。macOS 無法與 AWAC\n            時鐘進行通信，因此必須進行修補。\nPMC         電源管理控制器，在 B360, B365, H310, H370, Z390 主板上，OEM 忘記映射此區域，因此需要\n            SSDT-PMC 來避免分頁錯誤\nPNLF        內部背光顯示，macOS 使用此 PNLF 裝置發送和接收亮度控制訊息\nXOSI/_OSI   _OSI 用於確定正在開機的是哪個操作系統，將其重新命名為 XOSI 可以讓硬體認為我們正在啟動一個不同的操作系統\nHPET        高精度事件定時器，操作系統使用它來決定如何與設備（IRQ）通信。macOS\n            對裝置的設定可能非常挑剔，因此我們有時需要修補 HPET。\nRHUB        根 USB 集線器，其中定義了 USB 連接埠。如果這裡缺少某些定義，USB 連接埠可能無法在 macOS 中工作\nIMEI        Intel 管理引擎介面，處理雜項任務。在 macOS 中，蘋果公司依靠 IMEI 來實現Intel GPU\n            的加速。如果使用不明 ID，如在 7 系列芯片組使用 Sandy Bridge，macOS 將無法找到它來進行 GPU\n            加速。\nUNC         Uncore Bridge，類似於北橋，它處理許多與緩存相關的函數。很多時候，OEM\n            會定義這個裝置，但無法運作，macOS 無法處理這些情況。\nSMBus       系統管理總線，用於允許裝置之間輕鬆地進行通信。",normalizedContent:"# 術語\n\n術語             描述\nmacos          蘋果公司自己的基於 unix 的操作系統，用於 mac 機器和 “使 mac 成為 mac” 的重點。\nwindows        微軟的專有操作系統，可在各種電腦上安裝和使用（如果你不想頭疼，就繼續使用這個操作系統）\nlinux          基於 linux 内核的開源類 unix 操作系統家族，1991 年 9 月 17 日由 linus torvalds\n               首次發佈的操作系統内核。linux 通常打包在 linux 發行版中。注意，雖然 macos 和 linux 可能是基於\n               unix 的，但它們有很大的不同。\ndistros        發行版的縮寫。linux 發行版是 linux 的發行方式。然而，當涉及到 macos 時，發行版混合了 macos\n               安裝程式和一堆非蘋果公司的工具。不要使用被修改過的 macos\nhackintosh     將 macos 安裝到 pc 上的過程，請注意hackintosh 不是操作系統，它也可以指被「黑客」攻擊的機器，以使\n               macos 在其上運行。例如：我在這台 windows 機器上安裝了 macos，因此我有一個\n               hackintosh。但是我沒有安裝 “hackintosh”。\nbootloader     載入操作系統的軟體，通常由操作系統建立者製作。從技術上講，opencore本身並不是一個開機程式（請參閱下面的開機管理器解釋）。蘋果的\n               boot.efi 將是 mac 或 hackintosh 中實際的引導程式。\nboot manager   管理開機程式的軟體（開機管理器）- 我們有很多例子：clover, systemd-boot, opencore,\n               refind, refit… 這些通常被視為幫助系統實際的引導程式作準備。\n\n----------------------------------------\n\n術語             描述\nopencore       hackintosh 界的新熱門，由 acidanthera 團隊在考慮安全性的情況下製作，比 clover\n               啟動速度更快，佔用空間更少。它需要更多的工作來設定，但也比 clover 支持更多原生的東西(如休眠，filevault\n               2，熱鍵等等)。\nclover         在 opencore 發布後被認為是舊式的開機管理器。本指南將不涉及該軟體的使用。\nacpi           進階組態與電源介面（advanced configuration and power interface,\n               acpi）提供了一個開放的標準，操作系統可以使用它來發現和設定計算機硬體組件，更多內容將在本指南的後面討論。\ndsdt/ssdt      acpi 中的表格描述了裝置以及操作系統應該如何與它們進行交互，例如使電腦進入休眠、喚醒、切換 gpu、usb\n               連接埠等等。\n.aml           編譯後的 acpi 檔案格式，以及你的 pc 將執行的內容。 .dat 是另一個具有完全相同用途的副檔名。\n.dsl           acpi 的源代碼 - 這是您為電腦編輯和編譯的內容。不要 將這種檔案格式與 .asl 混淆。\nkexts          內核延伸，是 kernel ext 的簡稱。這是 macos\n               的驅動程式。它們用於執行不同的任務，如裝置驅動程式，或用於不同的目的（在駭客編程中），如修補操作系統，注入訊息或執行任務。kext\n               並不是優秀 hackintosh 的唯一組成部分，因為它們通常與 acpi 補丁和修復一起使用。\nbios           基本輸入／輸出系統是用於在啟動過程（通電啟動）中執行硬體初始化的韌體，並為操作系統和程式提供執行期服務。bios\n               韌體預先安裝在 pc 的主板上，它是在通電時第一個執行的軟體（資料來源：維基百科）。它是 70\n               年代製作的舊式軟體，由於其成熟度，至今仍在使用。\nuefi           統一可延伸韌體介面（unified extensible firmware\n               interface）是定義操作系統與平台韌體之間的軟件介面的規範。uefi 取代了最初出現在所有 ibm pc 相容\n               pc 上的傳統 bios （basic input/output system）韌體介面，大部分 uefi\n               韌體實作都支持傳統 bios 服務。uefi 可以支持遠端診斷和修復電腦，即使沒有安裝操作系統。（資料來源：維基百科）\nuefi drivers   與其他操作系統一樣，uefi 也有驅動程式，由 clover 或 opencore\n               載入。它們還可以載入裝置或執行其他任務，如用 hfsplus 載入蘋果的 hfsplus.efi, 修補 macos 的\n               boot.efi 等等. 你可能會發現它們是 clover drivers 或 opencore drivers,\n               它們都是 uefi 驅動程式。（注意：只使用針對特定開機管理器的驅動程式。更多資訊可以在 clover\n               轉換頁面上找到）。\n\n----------------------------------------\n\n術語    描述\nefi   它可以表示兩件事：\n      - mac 的韌體，與 uefi 相同，但針對 mac 進行了相當大的修改，所以不那麼「通用」\n      - 硬碟上的分區，儲存由 uefi 讀取的軟體來載入操作系統（如 windows 開機程式）或 uefi 應用程式（如\n      opencore），它是 fat32 格式的，id 類型為 ef00（十六進制）。它可以被命名為 esp 或\n      system，通常大小在 100mb 到 400mb 之間，但大小不影響任何東西。\nmbr   主開機記錄是一種特殊類型的開機扇區，位於已分區電腦的大容量儲存裝置（如硬碟或卸除式磁碟）的最開始，旨在與ibm pc\n      相容系統及其他系統一起使用。mbr 於 1983 年首次與 pc dos 2.0 一起推出。mbr\n      儲存有關如何在該介質上組織包含文件系統的邏輯分區的資訊。mbr 還包含可執行代碼，用作已安裝操作系統的載入程式 —\n      通常通過將控制權傳遞給載入程式的第二階段，或與每個分區的卷引導記錄（vbr）結合使用。此 mbr\n      代碼通常稱為引導程式（來源：維基百科）。此格式用於 bios/舊版設置。mbr 格式最多支援 2 tib 的大小和最多\n      4 個主分區。\ngpt   guid 分區表（guid partition\n      table）是物理電腦儲存裝置（如硬碟或固態硬碟）的分區表佈局的標準，使用通用唯一標識碼（也稱為全域唯一標識符（guid））。作為統一可延伸韌體介面（uefi）標準（統一\n      efi 論壇提議的 pc bios 替代品）的一部分，由於主開機記錄（mbr）分區表的限制，它也用於某些 bios\n      系統，該分區表使用 32位元進行傳統 512 位元組磁碟扇區的邏輯塊尋址（lba）（來源：維基百科）。這是在一般\n      uefi 系統上使用的磁碟格式。\n\n----------------------------------------\n\n術語          描述\nec          嵌入式控制器。主板和嵌入式外設（如熱鍵、連接埠或電池）之間的通信。\nplug        允許 xcpm，蘋果 xnu（os 内核）電源管理，允許附加更好的整體 cpu 控制。僅支援 haswell 和更新\n            cpu。\nawac        acpi 喚醒鬧鐘計數器，主板的內部時鐘。與實時時鐘（rtc）形成對比。macos 無法與 awac\n            時鐘進行通信，因此必須進行修補。\npmc         電源管理控制器，在 b360, b365, h310, h370, z390 主板上，oem 忘記映射此區域，因此需要\n            ssdt-pmc 來避免分頁錯誤\npnlf        內部背光顯示，macos 使用此 pnlf 裝置發送和接收亮度控制訊息\nxosi/_osi   _osi 用於確定正在開機的是哪個操作系統，將其重新命名為 xosi 可以讓硬體認為我們正在啟動一個不同的操作系統\nhpet        高精度事件定時器，操作系統使用它來決定如何與設備（irq）通信。macos\n            對裝置的設定可能非常挑剔，因此我們有時需要修補 hpet。\nrhub        根 usb 集線器，其中定義了 usb 連接埠。如果這裡缺少某些定義，usb 連接埠可能無法在 macos 中工作\nimei        intel 管理引擎介面，處理雜項任務。在 macos 中，蘋果公司依靠 imei 來實現intel gpu\n            的加速。如果使用不明 id，如在 7 系列芯片組使用 sandy bridge，macos 將無法找到它來進行 gpu\n            加速。\nunc         uncore bridge，類似於北橋，它處理許多與緩存相關的函數。很多時候，oem\n            會定義這個裝置，但無法運作，macos 無法處理這些情況。\nsmbus       系統管理總線，用於允許裝置之間輕鬆地進行通信。",charsets:{cjk:!0}},{title:"Understanding the macOS Boot Process",frontmatter:{},regularPath:"/troubleshooting/boot.html",relativePath:"troubleshooting/boot.md",key:"v-b6c24aaa",path:"/troubleshooting/boot.html",headers:[{level:2,title:"OpenCore Booting",slug:"opencore-booting",normalizedTitle:"opencore booting",charIndex:433},{level:2,title:"boot.efi Handoff",slug:"boot-efi-handoff",normalizedTitle:"boot.efi handoff",charIndex:1282},{level:2,title:"XNU/Kernel Handoff",slug:"xnu-kernel-handoff",normalizedTitle:"xnu/kernel handoff",charIndex:1911},{level:2,title:"macOS Handoff",slug:"macos-handoff",normalizedTitle:"macos handoff",charIndex:4353}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"OpenCore Booting boot.efi Handoff XNU/Kernel Handoff macOS Handoff",content:"# Understanding the macOS Boot Process\n\nSo with troubleshooting a hackintosh, it can be a bit difficult to really understand where you're getting stuck as the exact keyword you're trying to search for may not match anything on google. While this page won't solve all your issues, it should at least help better understand where in the macOS boot-process you're getting stuck and hopefully give some ideas as to why you're stuck.\n\n\n# OpenCore Booting\n\nThis section will be brief, as OpenCore boot issues are fairly rare and usually simple user error:\n\n * System powers on and searches for boot devices\n * System locates BOOTx64.efi on your OpenCore USB under EFI/BOOT/\n * BOOTx64.efi is loaded which then chain-loads OpenCore.efi from EFI/OC/\n * NVRAM Properties are applied\n * EFI drivers are loaded from EFI/OC/Drivers\n * Graphics Output Protocol(GOP) is installed\n * ACPI Tables are loaded from EFI/OC/ACPI\n * SMBIOS Data is applied\n * OpenCore loads and shows you all possible boot options\n * You now boot your macOS installer\n\nIf you're having issues booting at this point, main things to check for:\n\n * Stuck on no vault provided!\n * Can't see macOS partitions\n * Booting OpenCore reboots to BIOS\n\nFor the rest of the possible issues, see here:\n\n * OpenCore booting issues\n\n\n# boot.efi Handoff\n\n\n\nThis is where macOS's bootloader(boot.efi) comes onto the scene, specifically what it does is prep the environment for the kernel to load and where OpenCore injects kexts. If you're getting stuck at this point, there's likely an issue with loading the kernel, main culprits:\n\n * Stuck on EndRandomSeed\n * Stuck on [EB|#LOG:EXITBS:START]\n * Couldn't allocate runtime area errors\n\nFor the rest of the possible issues, see here:\n\n * Kernel Issues\n\nNote: In macOS 10.15.4, Apple changed the boot.efi debugging protocol, so things will look quite a bit different from before but all the same rules still apply\n\n\n# XNU/Kernel Handoff\n\nNow that boot.efi has setup everything for us, we now get to watch the kernel do it's thing. This section is commonly referred as the Rooting phase:\n\n\n\nThis section is where SMBIOS data is verified, ACPI tables/Kexts are loaded and macOS tries to get everything in order. Failures here are generally a result of:\n\n * Corrupted SSDTs\n * Corrupted kexts(or incorrectly setup under your config.plist -> Kernel -> Add)\n * Messed up memory map\n\nSee here for more troubleshooting info:\n\n * Kernel Panic Cannot perform kext summary\n * Kernel Panic on Invalid frame pointer\n\n\n\nNow here we have [ PCI configurations begin ], this section can be seen as a hardware test for our systems, kexts and SSDTs we injected, and where IOKit starts hardware probs to find devices to attach to.\n\nThe main things that are tested here:\n\n * Embedded Controllers\n * Storage(NVMe, SATA, etc)\n * PCI/e\n * NVRAM\n * RTC\n * PS2 and I2C\n\nFor more specific info on how to get around this area, see here:\n\n * Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n\n\n\nThis is where the 15 port limit and USB mapping comes into play, and where the infamous \"Waiting for Root Device\" errors pops in, main things to check for:\n\n * \"Waiting for Root Device\" or Prohibited Sign error\n\n\n\nThis is where our FakeSMC/VirtualSMC come into the scene and do their magic, DSMOS itself is a kext that verifies if your system has an SMC and will request a key. If this key is missing, then DSMOS will not decrypt the rest of the binaries and you'll get stuck here. You may also get stuck at AppleACPICPU which is just the same error.\n\n * kextd stall[0]: AppleACPICPU\n\nYour karma check for today:\nThere once was a user that whined\nhis existing OS was so blind,\nhe'd do better to pirate an OS that ran great\nbut found his hardware declined.\nPlease don't steal Mac OS!\nReally, that's way uncool.\n(C) Apple Computer, Inc.\n\n\nSource: Dont Steal Mac OS X.kext\n\n\n\nThis is where Apple's audio driver comes in, and where AppleALC shines. Generally rare to see issues here but if you do, try disabling AppleALC and any other audio related kexts.\n\n\n\nAnd here we get to the GPU driver initialization, and where WhateverGreen also does its magic. Generally errors here are due to the GPU and not WhateverGreen itself, main culprits:\n\n * Stuck on or near IOConsoleUsers: gIOScreenLock...\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n\n\n# macOS Handoff\n\n\n\nAnd you've finally got past all that verbose! If you're getting stuck at the Apple logo after all that verbose, then there's a couple things to check for:\n\n * macOS frozen right before login\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n * Frozen in the macOS installer after 30 seconds",normalizedContent:"# understanding the macos boot process\n\nso with troubleshooting a hackintosh, it can be a bit difficult to really understand where you're getting stuck as the exact keyword you're trying to search for may not match anything on google. while this page won't solve all your issues, it should at least help better understand where in the macos boot-process you're getting stuck and hopefully give some ideas as to why you're stuck.\n\n\n# opencore booting\n\nthis section will be brief, as opencore boot issues are fairly rare and usually simple user error:\n\n * system powers on and searches for boot devices\n * system locates bootx64.efi on your opencore usb under efi/boot/\n * bootx64.efi is loaded which then chain-loads opencore.efi from efi/oc/\n * nvram properties are applied\n * efi drivers are loaded from efi/oc/drivers\n * graphics output protocol(gop) is installed\n * acpi tables are loaded from efi/oc/acpi\n * smbios data is applied\n * opencore loads and shows you all possible boot options\n * you now boot your macos installer\n\nif you're having issues booting at this point, main things to check for:\n\n * stuck on no vault provided!\n * can't see macos partitions\n * booting opencore reboots to bios\n\nfor the rest of the possible issues, see here:\n\n * opencore booting issues\n\n\n# boot.efi handoff\n\n\n\nthis is where macos's bootloader(boot.efi) comes onto the scene, specifically what it does is prep the environment for the kernel to load and where opencore injects kexts. if you're getting stuck at this point, there's likely an issue with loading the kernel, main culprits:\n\n * stuck on endrandomseed\n * stuck on [eb|#log:exitbs:start]\n * couldn't allocate runtime area errors\n\nfor the rest of the possible issues, see here:\n\n * kernel issues\n\nnote: in macos 10.15.4, apple changed the boot.efi debugging protocol, so things will look quite a bit different from before but all the same rules still apply\n\n\n# xnu/kernel handoff\n\nnow that boot.efi has setup everything for us, we now get to watch the kernel do it's thing. this section is commonly referred as the rooting phase:\n\n\n\nthis section is where smbios data is verified, acpi tables/kexts are loaded and macos tries to get everything in order. failures here are generally a result of:\n\n * corrupted ssdts\n * corrupted kexts(or incorrectly setup under your config.plist -> kernel -> add)\n * messed up memory map\n\nsee here for more troubleshooting info:\n\n * kernel panic cannot perform kext summary\n * kernel panic on invalid frame pointer\n\n\n\nnow here we have [ pci configurations begin ], this section can be seen as a hardware test for our systems, kexts and ssdts we injected, and where iokit starts hardware probs to find devices to attach to.\n\nthe main things that are tested here:\n\n * embedded controllers\n * storage(nvme, sata, etc)\n * pci/e\n * nvram\n * rtc\n * ps2 and i2c\n\nfor more specific info on how to get around this area, see here:\n\n * stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n\n\n\nthis is where the 15 port limit and usb mapping comes into play, and where the infamous \"waiting for root device\" errors pops in, main things to check for:\n\n * \"waiting for root device\" or prohibited sign error\n\n\n\nthis is where our fakesmc/virtualsmc come into the scene and do their magic, dsmos itself is a kext that verifies if your system has an smc and will request a key. if this key is missing, then dsmos will not decrypt the rest of the binaries and you'll get stuck here. you may also get stuck at appleacpicpu which is just the same error.\n\n * kextd stall[0]: appleacpicpu\n\nyour karma check for today:\nthere once was a user that whined\nhis existing os was so blind,\nhe'd do better to pirate an os that ran great\nbut found his hardware declined.\nplease don't steal mac os!\nreally, that's way uncool.\n(c) apple computer, inc.\n\n\nsource: dont steal mac os x.kext\n\n\n\nthis is where apple's audio driver comes in, and where applealc shines. generally rare to see issues here but if you do, try disabling applealc and any other audio related kexts.\n\n\n\nand here we get to the gpu driver initialization, and where whatevergreen also does its magic. generally errors here are due to the gpu and not whatevergreen itself, main culprits:\n\n * stuck on or near ioconsoleusers: gioscreenlock...\n * black screen after ioconsoleusers: gioscreenlock... on navi\n\n\n# macos handoff\n\n\n\nand you've finally got past all that verbose! if you're getting stuck at the apple logo after all that verbose, then there's a couple things to check for:\n\n * macos frozen right before login\n * black screen after ioconsoleusers: gioscreenlock... on navi\n * frozen in the macos installer after 30 seconds",charsets:{cjk:!0}},{title:"OpenCore Debugging",frontmatter:{},regularPath:"/troubleshooting/debug.html",relativePath:"troubleshooting/debug.md",key:"v-dca255e6",path:"/troubleshooting/debug.html",headers:[{level:2,title:"File Swaps",slug:"file-swaps",normalizedTitle:"file swaps",charIndex:127},{level:2,title:"Config Changes",slug:"config-changes",normalizedTitle:"config changes",charIndex:141},{level:3,title:"Misc > Debug",slug:"misc-debug",normalizedTitle:"misc &gt; debug",charIndex:null},{level:2,title:"Disabling all logging",slug:"disabling-all-logging",normalizedTitle:"disabling all logging",charIndex:177}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"File Swaps Config Changes Misc > Debug Disabling all logging",content:"# OpenCore Debugging\n\nNeeding to figure out why you're getting issues or stalling? Well, you've come to the right place:\n\n\n\n * File Swaps\n * Config Changes\n   * Misc > Debug\n * Disabling all logging\n\n\n\n\n# File Swaps\n\nTo start, make sure you're using either the DEBUG or NOOPT versions of OpenCore. This will provide much more info than the RELEASE version, the specific files that need to be swapped:\n\n * EFI/BOOT/\n   * BOOTx64.efi\n * EFI/OC/Drivers/\n   * OpenRuntime.efi\n   * OpenCanopy.efi(if you're using it)\n * EFI/OC/\n   * OpenCore.efi\n\n\n\n * Note: Generally best to debug systems without OpenCanopy, if required make sure this file is from DEBUG else there will be virtually no debug information.\n\n\n# Config Changes\n\nNext, head to your config.plist and locate the Misc > Debug section, we have a couple entries we'll want to play with here:\n\n\n# Misc > Debug\n\nHere we'll want to enable the following:\n\n * AppleDebug: YES\n   \n   * Provides much more debugging information, specifically relating to boot.efi and will also store the log to disk.\n\n * ApplePanic: YES\n   \n   * This will allow kernel panics to be stored to disk, highly recommend keeping keepsyms=1 in boot-args to preserve as much info as possible.\n\n * DisableWatchdog: YES\n   \n   * Disables the UEFI watchdog, used for when OpenCore is stalling on something non-critical.\n\n * Target: 67 (or calculate one below)\n   \n   * Used for enabling different levels of debugging\n\nVALUE   COMMENT\n0x01    Enable Logging\n0x02    Enable Onscreen debug\n0x04    Enable logging to Data Hub.\n0x08    Enable serial port logging.\n0x10    Enable UEFI variable logging.\n0x20    Enable non-volatile UEFI variable logging.\n0x40    Enable logging to file.\n\nTo calculate the target, we can use a hex calculator and then convert it to decimal. For us we want to have our values on stored onto a .txt file for later viewing:\n\n * 0x01 — Enable Logging\n * 0x02 — Enable on-screen debug\n   * Note this can heavily increase boot times on firmwares with poor GOP implementations\n * 0x40 — Enable logging to file\n\n0x01 + 0x02 + 0x40 = 0x43\n\n0x43 converted to decimal becomes 67\n\nSo we can set Misc -> Debug -> Target -> 67\n\n * DisplayLevel: 2147483714 (or calculate one below)\n   * Used for setting what is logged\n\nVALUE        COMMENT\n0x00000002   DEBUG_WARN in DEBUG, NOOPT, RELEASE.\n0x00000040   DEBUG_INFO in DEBUG, NOOPT.\n0x00400000   DEBUG_VERBOSE in custom builds.\n0x80000000   DEBUG_ERROR in DEBUG, NOOPT, RELEASE.\n\nA full list can be found in DebugLib.h.\n\nFor us we just want the following:\n\n * 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE.\n * 0x00000040 — DEBUG_INFO in DEBUG, NOOPT.\n * 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE.\n\nJust like with Target, we use a hex calculator then convert to decimal:\n\n0x80000042 Converted to decimal becomes 2147483714\n\nMisc -> Debug -> DisplayLevel -> 2147483714\n\nOnce done, your config.plist should look like this:\n\n\n\n\n# Disabling all logging\n\nTo remove all file logging, and debug messages, simply swap out all your OpenCore files for those in RELEASE like we did before in File Swap section.\n\nLastly, to remove writing to disk set the following:\n\n * AppleDebug = NO\n * ApplePanic = NO\n * Target = 0",normalizedContent:"# opencore debugging\n\nneeding to figure out why you're getting issues or stalling? well, you've come to the right place:\n\n\n\n * file swaps\n * config changes\n   * misc > debug\n * disabling all logging\n\n\n\n\n# file swaps\n\nto start, make sure you're using either the debug or noopt versions of opencore. this will provide much more info than the release version, the specific files that need to be swapped:\n\n * efi/boot/\n   * bootx64.efi\n * efi/oc/drivers/\n   * openruntime.efi\n   * opencanopy.efi(if you're using it)\n * efi/oc/\n   * opencore.efi\n\n\n\n * note: generally best to debug systems without opencanopy, if required make sure this file is from debug else there will be virtually no debug information.\n\n\n# config changes\n\nnext, head to your config.plist and locate the misc > debug section, we have a couple entries we'll want to play with here:\n\n\n# misc > debug\n\nhere we'll want to enable the following:\n\n * appledebug: yes\n   \n   * provides much more debugging information, specifically relating to boot.efi and will also store the log to disk.\n\n * applepanic: yes\n   \n   * this will allow kernel panics to be stored to disk, highly recommend keeping keepsyms=1 in boot-args to preserve as much info as possible.\n\n * disablewatchdog: yes\n   \n   * disables the uefi watchdog, used for when opencore is stalling on something non-critical.\n\n * target: 67 (or calculate one below)\n   \n   * used for enabling different levels of debugging\n\nvalue   comment\n0x01    enable logging\n0x02    enable onscreen debug\n0x04    enable logging to data hub.\n0x08    enable serial port logging.\n0x10    enable uefi variable logging.\n0x20    enable non-volatile uefi variable logging.\n0x40    enable logging to file.\n\nto calculate the target, we can use a hex calculator and then convert it to decimal. for us we want to have our values on stored onto a .txt file for later viewing:\n\n * 0x01 — enable logging\n * 0x02 — enable on-screen debug\n   * note this can heavily increase boot times on firmwares with poor gop implementations\n * 0x40 — enable logging to file\n\n0x01 + 0x02 + 0x40 = 0x43\n\n0x43 converted to decimal becomes 67\n\nso we can set misc -> debug -> target -> 67\n\n * displaylevel: 2147483714 (or calculate one below)\n   * used for setting what is logged\n\nvalue        comment\n0x00000002   debug_warn in debug, noopt, release.\n0x00000040   debug_info in debug, noopt.\n0x00400000   debug_verbose in custom builds.\n0x80000000   debug_error in debug, noopt, release.\n\na full list can be found in debuglib.h.\n\nfor us we just want the following:\n\n * 0x00000002 — debug_warn in debug, noopt, release.\n * 0x00000040 — debug_info in debug, noopt.\n * 0x80000000 — debug_error in debug, noopt, release.\n\njust like with target, we use a hex calculator then convert to decimal:\n\n0x80000042 converted to decimal becomes 2147483714\n\nmisc -> debug -> displaylevel -> 2147483714\n\nonce done, your config.plist should look like this:\n\n\n\n\n# disabling all logging\n\nto remove all file logging, and debug messages, simply swap out all your opencore files for those in release like we did before in file swap section.\n\nlastly, to remove writing to disk set the following:\n\n * appledebug = no\n * applepanic = no\n * target = 0",charsets:{}},{title:"Kernel Issues",frontmatter:{},regularPath:"/troubleshooting/extended/kernel-issues.html",relativePath:"troubleshooting/extended/kernel-issues.md",key:"v-0be25d32",path:"/troubleshooting/extended/kernel-issues.html",headers:[{level:2,title:"Stuck on [EB|#LOG:EXITBS:START]",slug:"stuck-on-eb-log-exitbs-start",normalizedTitle:"stuck on [eb|#log:exitbs:start]",charIndex:124},{level:3,title:"Booter Issues",slug:"booter-issues",normalizedTitle:"booter issues",charIndex:161},{level:3,title:"Kernel Patch Issues",slug:"kernel-patch-issues",normalizedTitle:"kernel patch issues",charIndex:180},{level:3,title:"UEFI Issues",slug:"uefi-issues",normalizedTitle:"uefi issues",charIndex:205},{level:2,title:"Stuck on EndRandomSeed",slug:"stuck-on-endrandomseed",normalizedTitle:"stuck on endrandomseed",charIndex:220},{level:2,title:"Stuck after selecting macOS partition in OpenCore",slug:"stuck-after-selecting-macos-partition-in-opencore",normalizedTitle:"stuck after selecting macos partition in opencore",charIndex:246},{level:2,title:"Getting the error X64 Exception Type... on AMD FX systems",slug:"getting-the-error-x64-exception-type-on-amd-fx-systems",normalizedTitle:"getting the error x64 exception type... on amd fx systems",charIndex:299},{level:2,title:"Kernel Panic on Invalid frame pointer",slug:"kernel-panic-on-invalid-frame-pointer",normalizedTitle:"kernel panic on invalid frame pointer",charIndex:360},{level:2,title:"Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume",slug:"stuck-on-eb-ld-ofs-err-0xe-when-booting-preboot-volume",normalizedTitle:"stuck on [eb|ld:ofs] err(0xe) when booting preboot volume",charIndex:401},{level:2,title:"Stuck on OCB: LoadImage failed - Security Violation",slug:"stuck-on-ocb-loadimage-failed-security-violation",normalizedTitle:"stuck on ocb: loadimage failed - security violation",charIndex:462},{level:2,title:"Stuck on OCABC: Memory pool allocation failure - Not Found",slug:"stuck-on-ocabc-memory-pool-allocation-failure-not-found",normalizedTitle:"stuck on ocabc: memory pool allocation failure - not found",charIndex:517},{level:2,title:"Stuck on Buffer Too Small",slug:"stuck-on-buffer-too-small",normalizedTitle:"stuck on buffer too small",charIndex:579},{level:2,title:"Stuck on Plist only kext has CFBundleExecutable key",slug:"stuck-on-plist-only-kext-has-cfbundleexecutable-key",normalizedTitle:"stuck on plist only kext has cfbundleexecutable key",charIndex:608},{level:2,title:"Stuck on This version of Mac OS X is not supported: Reason Mac...",slug:"stuck-on-this-version-of-mac-os-x-is-not-supported-reason-mac",normalizedTitle:"stuck on this version of mac os x is not supported: reason mac...",charIndex:663},{level:2,title:"Couldn't allocate runtime area errors",slug:"couldn-t-allocate-runtime-area-errors",normalizedTitle:"couldn't allocate runtime area errors",charIndex:732},{level:2,title:"Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...",slug:"stuck-on-rtc-pci-configuration-begins-previous-shutdown-hpet-hid-legacy",normalizedTitle:"stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...",charIndex:773},{level:2,title:"Stuck at ACPI table loading on B550",slug:"stuck-at-acpi-table-loading-on-b550",normalizedTitle:"stuck at acpi table loading on b550",charIndex:862},{level:2,title:'"Waiting for Root Device" or Prohibited Sign error',slug:"waiting-for-root-device-or-prohibited-sign-error",normalizedTitle:"&quot;waiting for root device&quot; or prohibited sign error",charIndex:null},{level:3,title:"USB Issues",slug:"usb-issues",normalizedTitle:"usb issues",charIndex:957},{level:3,title:"SATA Issues",slug:"sata-issues",normalizedTitle:"sata issues",charIndex:973},{level:2,title:"Kernel panic with IOPCIFamily on X99",slug:"kernel-panic-with-iopcifamily-on-x99",normalizedTitle:"kernel panic with iopcifamily on x99",charIndex:988},{level:2,title:"Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...",slug:"stuck-on-or-near-ioconsoleusers-gioscreenlock-giolockstate-3",normalizedTitle:"stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...",charIndex:1028},{level:2,title:"Scrambled Screen on laptops",slug:"scrambled-screen-on-laptops",normalizedTitle:"scrambled screen on laptops",charIndex:1100},{level:2,title:"Black screen after IOConsoleUsers: gIOScreenLock... on Navi",slug:"black-screen-after-ioconsoleusers-gioscreenlock-on-navi",normalizedTitle:"black screen after ioconsoleusers: gioscreenlock... on navi",charIndex:1131},{level:2,title:"Kernel Panic Cannot perform kext summary",slug:"kernel-panic-cannot-perform-kext-summary",normalizedTitle:"kernel panic cannot perform kext summary",charIndex:1194},{level:2,title:"Kernel Panic AppleIntelMCEReporter",slug:"kernel-panic-appleintelmcereporter",normalizedTitle:"kernel panic appleintelmcereporter",charIndex:1238},{level:2,title:"Kernel Panic AppleIntelCPUPowerManagement",slug:"kernel-panic-appleintelcpupowermanagement",normalizedTitle:"kernel panic appleintelcpupowermanagement",charIndex:1276},{level:2,title:"Kernel Panic AppleACPIPlatform in 10.13",slug:"kernel-panic-appleacpiplatform-in-10-13",normalizedTitle:"kernel panic appleacpiplatform in 10.13",charIndex:1321},{level:2,title:"macOS frozen right before login",slug:"macos-frozen-right-before-login",normalizedTitle:"macos frozen right before login",charIndex:1364},{level:2,title:"Keyboard works but trackpad does not",slug:"keyboard-works-but-trackpad-does-not",normalizedTitle:"keyboard works but trackpad does not",charIndex:1399},{level:2,title:"kextd stall[0]: AppleACPICPU",slug:"kextd-stall-0-appleacpicpu",normalizedTitle:"kextd stall[0]: appleacpicpu",charIndex:1439},{level:2,title:"Kernel Panic on AppleIntelI210Ethernet",slug:"kernel-panic-on-appleinteli210ethernet",normalizedTitle:"kernel panic on appleinteli210ethernet",charIndex:1471},{level:2,title:'Kernel panic on "Wrong CD Clock Frequency" with Icelake laptop',slug:"kernel-panic-on-wrong-cd-clock-frequency-with-icelake-laptop",normalizedTitle:"kernel panic on &quot;wrong cd clock frequency&quot; with icelake laptop",charIndex:null},{level:2,title:'Kernel panic on "cckprngintgen"',slug:"kernel-panic-on-cckprng-int-gen",normalizedTitle:"kernel panic on &quot;cckprngintgen&quot;",charIndex:null},{level:2,title:"Stuck at Forcing CS_RUNTIME for entitlement in Big Sur",slug:"stuck-at-forcing-cs-runtime-for-entitlement-in-big-sur",normalizedTitle:"stuck at forcing cs_runtime for entitlement in big sur",charIndex:1614},{level:2,title:"Stuck on ramrod(^^^^^^^^^^^^^)",slug:"stuck-on-ramrod",normalizedTitle:"stuck on ramrod(^^^^^^^^^^^^^)",charIndex:1672},{level:2,title:"Virtual Machine Issues",slug:"virtual-machine-issues",normalizedTitle:"virtual machine issues",charIndex:1706},{level:2,title:'Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',slug:"reboot-on-appleusbhostport-createdevice-failed-to-create-device-on-macos-11-3",normalizedTitle:"reboot on &quot;appleusbhostport::createdevice: failed to create device&quot; on macos 11.3+",charIndex:null}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:'Stuck on [EB|#LOG:EXITBS:START] Booter Issues Kernel Patch Issues UEFI Issues Stuck on EndRandomSeed Stuck after selecting macOS partition in OpenCore Getting the error X64 Exception Type... on AMD FX systems Kernel Panic on Invalid frame pointer Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume Stuck on OCB: LoadImage failed - Security Violation Stuck on OCABC: Memory pool allocation failure - Not Found Stuck on Buffer Too Small Stuck on Plist only kext has CFBundleExecutable key Stuck on This version of Mac OS X is not supported: Reason Mac... Couldn\'t allocate runtime area errors Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy... Stuck at ACPI table loading on B550 "Waiting for Root Device" or Prohibited Sign error USB Issues SATA Issues Kernel panic with IOPCIFamily on X99 Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3... Scrambled Screen on laptops Black screen after IOConsoleUsers: gIOScreenLock... on Navi Kernel Panic Cannot perform kext summary Kernel Panic AppleIntelMCEReporter Kernel Panic AppleIntelCPUPowerManagement Kernel Panic AppleACPIPlatform in 10.13 macOS frozen right before login Keyboard works but trackpad does not kextd stall[0]: AppleACPICPU Kernel Panic on AppleIntelI210Ethernet Kernel panic on "Wrong CD Clock Frequency" with Icelake laptop Kernel panic on "cckprngintgen" Stuck at Forcing CS_RUNTIME for entitlement in Big Sur Stuck on ramrod(^^^^^^^^^^^^^) Virtual Machine Issues Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',content:"# Kernel Issues\n\nIssues surrounding from initial booting the macOS installer to right before the install GUI pops up.\n\n\n\n * Stuck on [EB|#LOG:EXITBS:START]\n   * Booter Issues\n   * Kernel Patch Issues\n   * UEFI Issues\n * Stuck on EndRandomSeed\n * Stuck after selecting macOS partition in OpenCore\n * Getting the error X64 Exception Type... on AMD FX systems\n * Kernel Panic on Invalid frame pointer\n * Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume\n * Stuck on OCB: LoadImage failed - Security Violation\n * Stuck on OCABC: Memory pool allocation failure - Not Found\n * Stuck on Buffer Too Small\n * Stuck on Plist only kext has CFBundleExecutable key\n * Stuck on This version of Mac OS X is not supported: Reason Mac...\n * Couldn't allocate runtime area errors\n * Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n * Stuck at ACPI table loading on B550\n * \"Waiting for Root Device\" or Prohibited Sign error\n   * USB Issues\n   * SATA Issues\n * Kernel panic with IOPCIFamily on X99\n * Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n * Scrambled Screen on laptops\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n * Kernel Panic Cannot perform kext summary\n * Kernel Panic AppleIntelMCEReporter\n * Kernel Panic AppleIntelCPUPowerManagement\n * Kernel Panic AppleACPIPlatform in 10.13\n * macOS frozen right before login\n * Keyboard works but trackpad does not\n * kextd stall[0]: AppleACPICPU\n * Kernel Panic on AppleIntelI210Ethernet\n * Kernel panic on \"Wrong CD Clock Frequency\" with Icelake laptop\n * Kernel panic on \"cckprngintgen\"\n * Stuck at Forcing CS_RUNTIME for entitlement in Big Sur\n * Stuck on ramrod(^^^^^^^^^^^^^)\n * Virtual Machine Issues\n * Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\n\n\n\n# Stuck on [EB|#LOG:EXITBS:START]\n\nThis section will be split into 3 parts, so pay close attention:\n\n * Booter Issues\n * Kernel Patch Issues\n * UEFI Issues\n * Virtual Machine Issues\n\n\n# Booter Issues\n\nThe main culprits to watch for in the Booter section are:\n\n * DevirtualiseMmio\n   \n   * Certain MMIO spaces are still required to function correctly, so you'll need to either exclude these regions in Booter -> MmioWhitelist or disable this quirk outright. More info here: Using DevirtualiseMmio\n   * For TRx40 users, enable this quirk\n   * For X99 users, disable this quirk as it breaks with some firmwares\n\n * SetupVirtualMap\n   \n   * This quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * Mainly Z390 and older require this quirk enabled\n     * However, certain firmwares(mainly 2020+) do not work with this quirk and so may actually cause this kernel panic:\n       * Intel's Ice Lake series\n       * Intel's Comet Lake series(B460, H470, Z490, etc)\n       * AMD's B550 and A520(Latest BIOS on X570 are also included now)\n         * Many B450 and X470 boards with late 2020 BIOS updates are also included\n       * AMD's TRx40\n       * VMs like QEMU\n       * X299 2020+ BIOS updates(This applies to other X299 boards on the latest BIOS that released either in late 2019 or 2020+)\n\n * EnableWriteUnprotector\n   \n   * Another issue may be that macOS is conflicting with the write protection from CR0 register, to resolve this we have 2 options:\n     * If your firmware supports MATs(2018+ firmwares):\n       * EnableWriteUnprotector -> False\n       * RebuildAppleMemoryMap -> True\n       * SyncRuntimePermissions -> True\n     * For older firmwares:\n       * EnableWriteUnprotector -> True\n       * RebuildAppleMemoryMap -> False\n       * SyncRuntimePermissions -> False\n     * Note: Some laptops(ex. Dell Inspiron 5370) even with MATs support will halt on boot up, in these cases you'll have two options:\n       * Boot with the old firmware quirk combo(ie. With EnableWriteUnprotector and disable RebuildAppleMemoryMap + SyncRuntimePermissions)\n       * Enable DevirtualiseMmio and follow MmioWhitelist guide\n\nRegarding MATs support, firmwares built against EDK 2018 will support this and many OEMs have even added support all the way back to Skylake laptops. Issue is it's not always obvious if an OEM has updated the firmware, you can check the OpenCore logs whether yours supports it(See here how to get a log):\n\nOCABC: MAT support is 1\n\n\n * Note: 1 means it supports MATs, while 0 means it does not.\n\n\n# Kernel Patch Issues\n\nThis section will be split between Intel and AMD users:\n\n# AMD Users\n\n * Missing kernel patches(only applies for AMD CPUs, make sure they're OpenCore patches and not Clover. Clover uses MatchOS while OpenCore has MinKernel and Maxkernel)\n   * Note outdated kernel patches will also have the same effect please ensure you're using the latest patches from AMD OS X\n\n# Intel Users\n\n * AppleXcpmCfgLock and AppleCpuPmCfgLock\n   * Missing CFG or XCPM patches, please enable AppleXcpmCfgLock and AppleCpuPmCfgLock\n     * Haswell and newer only need AppleXcpmCfgLock\n     * Ivy Bridge and older only need AppleCpuPmCfgLock\n       * Broadwell and older need AppleCpuPmCfgLock if running 10.10 or older\n   * Alternatively you can properly disable CFG-Lock: Fixing CFG Lock\n * AppleXcpmExtraMsrs\n   * May also be required, this is generally meant for Pentiums, HEDT and other odd systems not natively supported in macOS.\n\n# Legacy Intel users\n\nFor macOS Big Sur, many firmwares have issues determining the CPU core count and thus will kernel panic too early for screen printing. Via serial, you can see the following panic:\n\nmax_cpus_from_firmware not yet initialized\n\n\nTo resolve:\n\n * Enable AvoidRuntimeDefrag under Booter -> Quirks\n   * This should work for most firmwares\n\nHowever on certain machines like the HP Compaq DC 7900, the firmware will still panic so we need to force a CPU core count value. Only use the below patch if AvoidRuntimeDefrag didn't work:\n\nLegacy CPU Core patch\n\nTo do this, Add the following patch(replacing the 04 from B8 04 00 00 00 C3 with the amount of CPU threads your hardware supports):\n\nKEY           TYPE      VALUE\nBase          String    _acpi_count_enabled_logical_processors\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    Kernel\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B804000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\n\n# UEFI Issues\n\n * ProvideConsoleGop\n   * Needed for transitioning to the next screen, this was originally part of AptioMemoryFix but is now within OpenCore as this quirk. Can be found under UEFI -> Output\n   * Note as of 0.5.6, this quirk is enabled by default in the sample.plist\n * IgnoreInvalidFlexRatio\n   * This is needed for Broadwell and older. Not for AMD and Skylake or newer\n\n\n# Stuck on EndRandomSeed\n\nSame issues above, see here for more details: Stuck on [EB|#LOG:EXITBS:START]\n\n\n# Stuck after selecting macOS partition in OpenCore\n\nSame issues above, see here for more details: Stuck on [EB|#LOG:EXITBS:START]\n\n * Note: Enabling DEBUG OpenCore can help shed some light as well\n\n\n# Getting the error X64 Exception Type... on AMD FX systems\n\nThis error can have multiple causes:\n\n * Compatibility Support Module (CSM) being enabled in your BIOS:\n   \n   Might also be called Legacy Boot Support, Load Legacy Option ROMs/OPROMs\n\n * The ProvideCurrentCpuInfo quirk (required by the unified patches) being incompatible with your firmware:\n   \n   This means you need to use an older version of the patches and Big Sur or older. After downloading the older patches linked above, merge them into your config.plist (making sure to remove the old patches first).\n\nAn example:\n\n\n\n\n# Kernel Panic on Invalid frame pointer\n\nSo this is due to some issue around the Booter -> Quirks you set, main things to check for:\n\n * DevirtualiseMmio\n   \n   * Certain MMIO spaces are still required to function correctly, so you'll need to either exclude these regions in Booter -> MmioWhitelist or disable this quirk outright\n   * More info here: Using DevirtualiseMmio\n\n * SetupVirtualMap\n   \n   * This quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * However, certain firmwares do not work with this quirk and so may actually cause this kernel panic:\n       * Intel's Ice Lake series\n       * Intel's Comet Lake series\n       * AMD's B550\n       * AMD's A520\n       * AMD's TRx40\n       * VMs like QEMU\n\nAnother issue may be that macOS is conflicting with the write protection from CR0 register, to resolve this we have 2 options:\n\n * If your firmware supports MATs(2018+ firmwares):\n   * EnableWriteUnprotector -> False\n   * RebuildAppleMemoryMap -> True\n   * SyncRuntimePermissions -> True\n * For older firmwares:\n   * EnableWriteUnprotector -> True\n   * RebuildAppleMemoryMap -> False\n   * SyncRuntimePermissions -> False\n\nRegarding MATs support, firmwares built against EDK 2018 will support this and many OEMs have even added support all the way back to Skylake laptops. Issue is it's not always obvious if an OEM has updated the firmware, you can check the OpenCore logs whether yours supports it:\n\nOCABC: MAT support is 1\n\n\nNote: 1 means it supports MATs, while 0 means it does not.\n\n\n# Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume\n\nFull error:\n\n[EB|`LD:OFS] Err(0xE) @ OPEN (System\\\\Library\\\\PrelinkedKernels\\\\prelinkedkernel)\n\n\nThis can happen when the preboot volume isn't properly updated, to fix this you'll need to boot into recovery and repair it:\n\n 1. Enable JumpstartHotplug under UEFI -> APFS(Recovery may not boot on macOS Big Sur without this option)\n 2. Boot into recovery\n 3. Open the terminal, and run the following:\n\n# First, find your Preboot volume\ndiskutil list\n\n# From the below list, we can see our Preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Now mount the Preboot volume\ndiskutil mount disk5s2\n\n# Next run updatePreboot on the Preboot volume\ndiskutil apfs updatePreboot /volume/disk5s2\n\n\nThen finally reboot\n\n\n# Stuck on OCB: LoadImage failed - Security Violation\n\nOCSB: No suitable signature - Security Violation\nOCB: Apple Secure Boot prohibits this boot entry, enforcing!\nOCB: LoadImage failed - Security Violation\n\n\nThis is due to missing outdated Apple Secure Boot manifests present on your preboot volume resulting is a failure to load if you have SecureBootModel set, reason for these files being missing is actually a bug in macOS.\n\nTo resolve this you can do one of the following:\n\n * Disable SecureBootModel\n   * ie. set Misc -> Security -> SecureBootModel -> Disabled\n * Reinstall macOS with the latest version\n * Or copy over the Secure Boot manifests from /usr/standalone/i386 to /Volumes/Preboot/<UUID>/System/Library/CoreServices\n   * Note you will most likely need to do this via terminal as the Preboot volume isn't easily editable via the Finder\n\nTo do this via terminal:\n\n# First, find your Preboot volume\ndiskutil list\n\n# From the below list, we can see our Preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Now mount the Preboot volume\ndiskutil mount disk5s2\n\n# CD into your Preboot volume\n# Note the actual volume is under /System/Volumes/Preboot\ncd /System/Volumes/Preboot\n\n# Grab your UUID\nls\n 46923F6E-968E-46E9-AC6D-9E6141DF52FD\n CD844C38-1A25-48D5-9388-5D62AA46CFB8\n\n# If multiple show up(ie. you dual boot multiple versions of macOS), you will\n# need to determine which UUID is correct.\n# Easiest way to determine is printing the value of .disk_label.contentDetails\n# of each volume.\ncat ./46923F6E-968E-46E9-AC6D-9E6141DF52FD/System/Library/CoreServices/.disk_label.contentDetails\n Big Sur HD%\n\ncat ./CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices/.disk_label.contentDetails\n Catalina HD%\n\n# Next lets copy over the secure boot files\n# Replace CD844C38-1A25-48D5-9388-5D62AA46CFB8 with your UUID value\ncd ~\nsudo cp -a /usr/standalone/i386/. /System/Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n\n\n# Stuck on OCABC: Memory pool allocation failure - Not Found\n\nThis is due to incorrect BIOS settings:\n\n * Above4GDecoding is Enabled\n * CSM is Disabled(Enabling Windows8.1/10 WHQL Mode can do the same on some boards)\n   * Note on some laptops, CSM must be enabled\n * BIOS is up-to-date(Z390 and HEDT are known for having poorly written firmwares)\n\n\n# Stuck on Buffer Too Small\n\n * Enable Above4GDecoding in the BIOS\n\n\n# Stuck on Plist only kext has CFBundleExecutable key\n\nMissing or incorrect Executable path in your config.plist, this should be resolved by re-running ProperTree's snapshot tool(Cmd/Ctrl+R).\n\n\n# Stuck on This version of Mac OS X is not supported: Reason Mac...\n\nThis error happens when SMBIOS is one no longer supported by that version of macOS, make sure values are set in PlatformInfo->Generic with Automatic enabled. For a full list of supported SMBIOS and their OSes, see here: Choosing the right SMBIOS\n\nSupported SMBIOS in macOS 10.15, Catalina\n * iMac13,x+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini6,x+\n * MacBook8,1+\n * MacBookAir5,x+\n * MacBookPro9,x+\n\nSupported SMBIOS in macOS 11, Big Sur\n * iMac14,4+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini7,1+\n * MacBook8,1+\n * MacBookAir6,x+\n * MacBookPro11,x+\n\nSupported SMBIOS in macOS 12, Monterey\n * iMac16,1+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini7,1+\n * MacBook9,1+\n * MacBookAir7,1+\n * MacBookPro11,3+\n\nSupported SMBIOS in macOS 13, Ventura\n * iMac18,x+\n * iMacPro1,1\n * MacPro7,1\n * Macmini8,1\n * MacBook10,1\n * MacBookAir8,1+\n * MacBookPro14,x+\n\n\n# Couldn't allocate runtime area errors\n\nSee Fixing KASLR slide values\n\n\n# Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n\nWell this general area is where a lot of PCI devices are first setup and configured, and is where most booting issues will happen. Other names include:\n\n * apfs_module_start...,\n * Waiting for Root device,\n * Waiting on...IOResources...,\n * previous shutdown cause...\n\nThe main places to check:\n\n * Missing EC patch:\n   \n   * Make sure you have your EC SSDT both in EFI/OC/ACPI and ACPI -> Add, double check it's enabled.\n   * If you don't have one, grab it here: Getting started with ACPI\n\n * IRQ conflict:\n   \n   * Most common on older laptops and pre-builts, run SSDTTime's FixHPET option and add the resulting SSDT-HPET.aml and ACPI patches to your config( the SSDT will not work without the ACPI patches)\n\n * PCI allocation issue:\n   \n   * UPDATE YOUR BIOS, make sure it's on the latest. Most OEMs have very broken PCI allocation on older firmwares, especially AMD\n   * Make sure either Above4G is enabled in the BIOS, if no option available then add npci=0x2000 or npci=0x3000 (try both one at a time) to boot args.\n     * Some X99 and X299 boards(ie. GA-X299-UD4) may require both npci boot-arg and Above4G enabled\n     * AMD CPU Note: Do not have both the Above4G setting enabled and npci in boot args, they will conflict\n     * 2020+ BIOS Notes: When enabling Above4G, Resizable BAR Support may become an available. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n   * Other BIOS settings that are important: CSM disabled, Windows 8.1/10 UEFI Mode enabled\n\n * NVMe or SATA issue:\n   \n   * Sometimes if either a bad SATA controller or an unsupported NVMe drive are used, you can commonly get stuck here. Things you can check:\n     * Not using either a Samsung PM981 or Micron 2200S NVMe SSD\n     * Samsung 970 EVO Plus running the latest firmware(older firmwares were known for instability and stalls, see here for more info)\n     * SATA Hot-Plug is disabled in the BIOS(more commonly to cause issues on AMD CPU based systems)\n     * Ensure NVMe drives are set as NVMe mode in BIOS(some BIOS have a bug where you can set NVMe drives as SATA)\n\n * NVRAM Failing:\n   \n   * Common issue HEDT and 300 series motherboards, you have a couple paths to go down:\n     * 300 Series Consumer Intel: See Getting started with ACPI on making SSDT-PMC.aml\n     * HEDT(ie. X99): See Emulating NVRAM on how to stop NVRAM write, note that for install you do not need to run the script. Just setup the config.plist\n\n * RTC Missing:\n   \n   * Commonly found on Intel's 300+ series(ie. Z370, Z490), caused by the RTC clock being disabled by default. See Getting started with ACPI on creating an SSDT-AWAC.aml\n   * X99 and X299 have broken RTC devices, so will need to be fixed with SSDT-RTC0-RANGE. See Getting started with ACPI on creating said file\n   * Some drunk firmware writer at HP also disabled the RTC on the HP 250 G6 with no way to actually re-enable it\n     * Known affected models: HP 15-DA0014dx, HP 250 G6\n     * For users cursed with such hardware you'll need to create a fake RTC clock for macOS to play with. See getting started with ACPI for more details, as well as below image example:\n\nExample of what a disabled RTC with no way to enable looks like(note that there is no value to re-enable it like STAS):\n\n\n\n\n# Stuck at ACPI table loading on B550\n\n\n\nIf you're getting stuck at or near ACPI table loading with an AMD B550 or A520 motherboard, add the following SSDT:\n\n * SSDT-CPUR.aml\n\nAnd please remember to add this SSDT to both EFI/OC/ACPI and your config.plist under ACPI -> Add(ProperTree's snapshot function can do this for you)\n\n\n# \"Waiting for Root Device\" or Prohibited Sign error\n\n * Other names: Stop Sign, Scrambled\n\nThis is generally seen as a USB or SATA error, couple ways to fix:\n\n\n# USB Issues\n\nThis assumes you're only booting the installer USB and not macOS itself.\n\n * If you're hitting the 15 port limit, you need to make an USB Map\n\n * Another issue can be that certain firmware won't pass USB ownership to macOS\n   \n   * UEFI -> Quirks -> ReleaseUsbOwnership -> True\n   * Enabling EHCI/XHCI Handoff in the BIOS can fix this as well\n\n * Sometimes, if the USB is plugged into a 3.x port, plugging it into a 2.0 port can fix this error and vice versa.\n\n * For AMD's 15h and 16h CPUs, you may need to add the following:\n   \n   * XLNCUSBFix.kext\n\n * If XLNCUSBFix still doesn't work, then try the following alongside XLNCUSBFix:\n   \n   * AMD StopSign-fixv5\n\n * X299 Users: Enable Above4G Decoding\n   \n   * Odd firmware bug on X299 where USB breaks otherwise\n\n * Missing USB ports in ACPI:\n   \n   * For Intel's Coffee Lake and older, we recommend using USBInjectAll\n   * For Intel's Ice Lake and Comet Lake, we recommend SSDT-RHUB\n     * SSDTTime's 7. USB Reset option can do the same\n   * For AMD, run SSDTTime's 7. USB Reset option and add the provided SSDT-RHUB to your EFI and config.plist\n\n\n# SATA Issues\n\nOn rare occasions(mainly laptops), the SATA controller isn't officially supported by macOS. To resolve this, we'll want to do a few things:\n\n * Set SATA to AHCI mode in the BIOS\n   * macOS doesn't support hardware RAID or IDE mode properly.\n   * Note drives already using Intel Rapid Storage Technology(RST, soft RAID for Windows and Linux) will not be accessible in macOS.\n * SATA-unsupported.kext\n   * Adds support to obscure SATA controllers, commonly being laptops.\n   * For very legacy SATA controllers, AHCIPortInjector.kext may be more suitable.\n * Catalina's patched AppleAHCIPort.kext\n   * For users running macOS 11, Big Sur and having issues. This backports the known working Catalina kext, SATA-unsupported is not needed with this kext\n\nNote that you will only experience this issue after installing macOS onto the drive, booting the macOS installer will not error out due to SATA issues.\n\n\n# Kernel panic with IOPCIFamily on X99\n\nFor those running the X99 platform from Intel, please go over the following:\n\n * The following kernel patches are enabled:\n   * AppleCpuPmCfgLock\n   * AppleXcpmCfgLock\n   * AppleXcpmExtraMsrs\n * You have the following SSDTs:\n   * SSDT-UNC(if not, see Getting started with ACPI on creating said file)\n\n\n# Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n\nThis is right before the GPU is properly initialized, verify the following:\n\n * GPU is UEFI capable(GTX 7XX/2013+)\n * CSM is off in the BIOS\n   * May need to be enabled on laptops\n * Forcing PCIe 3.0 link speed\n * Double check that ig-platform-id and device-id are valid if running an iGPU.\n   * Desktop UHD 630's may need to use 00009B3E instead\n * Trying various WhateverGreen Fixes\n   * -igfxmlr boot argument. This can also manifest as a \"Divide by Zero\" error.\n * Coffee Lake iGPU users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# Scrambled Screen on laptops\n\nEnable CSM in your UEFI settings. This may appear as \"Boot legacy ROMs\" or other legacy setting.\n\n\n# Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n\n * Add agdpmod=pikera to boot args\n * Switch between different display outputs\n * Try running MacPro7,1 SMBIOS with the boot-arg agdpmod=ignore\n\nFor MSI Navi users, you'll need to apply the patch mentioned here: Installer not working with 5700XT #901\n\nSpecifically, add the following entry under Kernel -> Patch:\n\nMSI Navi Patch\n\nBase:\nComment: Navi VBIOS Bug Patch\nCount: 1\nEnabled: YES\nFind: 4154592C526F6D2300\nIdentifier: com.apple.kext.AMDRadeonX6000Framebuffer\nLimit: 0\nMask:\nMinKernel: 19.00.00\nMaxKernel: 19.99.99\nReplace: 414D442C526F6D2300\nReplaceMask:\nSkip: 0\n\n\nNote: macOS 11, Big Sur no longer requires this patch for MSI Navi.\n\n\n# Kernel Panic Cannot perform kext summary\n\nGenerally seen as an issue surrounding the prelinked kernel, specifically that macOS is having a hard time interpreting the ones we injected. Verify that:\n\n * Your kexts are in the correct order(master then plugins, Lilu always before the plugins)\n * Kexts with executables have them and plist only kexts don't(ie. USBmap.kext, XHCI-unspported.kext, etc does not contain an executable)\n * Don't include multiple of the same kexts in your config.plist(ie. including multiple copies of VoodooInput from multiple kexts, we recommend choosing the first kext in your config's array and disable the rest)\n\nNote: this error may also look very similar to Kernel Panic on Invalid frame pointer\n\n\n# Kernel Panic AppleIntelMCEReporter\n\nWith macOS Catalina, dual socket support is broken, and a fun fact about AMD firmware is that some boards will actually report multiple socketed CPUs. To fix this, add AppleMCEReporterDisabler to both EFI/OC/Kexts and config.plist -> Kernel -> Add\n\n\n# Kernel Panic AppleIntelCPUPowerManagement\n\nThis is likely due to faulty or outright missing NullCPUPowerManagement. To fix the issue, remove NullCPUPowerManagement from Kernel -> Add and EFI/OC/Kexts then enable DummyPowerManagement under Kernel -> Emulate\n\n * Note: On older Intel CPUs(ie. Penryn and older), it may be due to IRQ conflicts or the HPET device being disabled. To resolve, you have 2 options:\n   * SSDTTime's FixHPET Option\n   * Forcing the HPET Device on\n\nForcing the HPET Device on\n\nUnder ACPI -> Patch:\n\nCOMMENT   STRING    FORCE HPET ONLINE\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      A010934F53464C00\nReplace   Data      A40A0FA3A3A3A3A3\n\n\n# Kernel Panic AppleACPIPlatform in 10.13\n\n\n\nOn macOS 10.13, High Sierra the OS is much stricter with ACPI tables, specifically a bug with how headers were handled. To resolve, enable NormalizeHeaders under ACPI -> Quirks in your config.plist\n\n\n# macOS frozen right before login\n\nThis is a common example of screwed up TSC, for most system add CpuTscSync\n\nThe most common way to see the TSC issue:\n\nCASE 1   CASE 2\n         \n\n\n# Keyboard works but trackpad does not\n\nMake sure that VoodooInput is listed before VoodooPS2 and VoodooI2C kexts in your config.plist.\n\nVoodooI2C Troubleshooting\n\nCheck the order that your kexts load - make they match what is shown under Gathering Files:\n\n 1. VoodooGPIO, VoodooInput, and VoodooI2CServices in any order (Found under VoodooI2C.kext/Contents/PlugIns)\n 2. VoodooI2C\n 3. Satellite/Plugin Kext\n\nMake sure you have SSDT-GPIO in EFI/OC/ACPI and in your config.plist under ACPI -> Add in your config.plist. If you are still having issues, reference the Getting Started With ACPI GPIO page.\n\n\n# kextd stall[0]: AppleACPICPU\n\nThis is due to either a missing SMC emulator or broken one, make sure of the following:\n\n * Lilu and VirtualSMC are both in EFI/OC/kexts and in your config.plist\n * Lilu is before VirtualSMC in the kext list\n * Last resort is to try FakeSMC instead, do not have both VirtualSMC and FakeSMC enabled\n\n\n# Kernel Panic on AppleIntelI210Ethernet\n\nFor those running Comet lake motherboards with the I225-V NIC, you may experience a kernel panic on boot due to the I210 kext. To resolve this, make sure you have the correct PciRoot for your Ethernet. This commonly being either:\n\n * PciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0, 0x0)\n   * By default, this is what Asus and Gigabyte motherboards use\n * PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0)\n   * Some OEMs may use this instead\n\nFor those who can to your PciRoot manually, you'll want to install macOS fully and run the following with gfxutil:\n\n/path/to/gfxutil | grep -i \"8086:15f3\"\n\n\nThis should spit out something like this:\n\n00:1f.6 8086:15f3 /PC00@0/GBE1@1F,6 = PciRoot(0x0)/Pci(0x1F,0x6)\n\n\nThe ending PciRoot(0x0)/Pci(0x1F,0x6) is what you want to add in your config.plist with device-id of F2150000\n\n\n# Kernel panic on \"Wrong CD Clock Frequency\" with Icelake laptop\n\n\n\nTo resolve this kernel panic, ensure you have -igfxcdc in your boot-args.\n\n\n# Kernel panic on \"cckprng_int_gen\"\n\nFull panic:\n\n\"cckprng_int_gen: generator has already been sealed\"\n\n\nThis is likely to be 1 of 2 things:\n\n * Missing SMC Emulator(ie. no VirtualSMC in your config.plist or EFI)\n   * Add VirtualSMC.kext to your config.plist and EFI\n * Incorrect SSDT usage with SSDT-CPUR\n\nFor the latter, ensure you're only using SSDT-CPUR with B550 and A520. Do not use on X570 or older hardware(ie. B450 or A320)\n\n\n# Stuck at Forcing CS_RUNTIME for entitlement in Big Sur\n\n\n\nThis is actually the part at where macOS will seal the system volume, and where it may seem that macOS has gotten stuck. DO NOT RESTART thinking you're stuck, this will take quite some time to complete.\n\n\n# Stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nIf you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your SMC emulator is broken. To fix this, you have 2 options:\n\n * Ensure you're using the latest builds of VirtualSMC and Lilu, with the vsmcgen=1 boot-arg\n * Switch over to Rehabman's FakeSMC (you can use the MinKernel/MaxKernel trick mentioned above to restrict FakeSMC to Big Sur and up\n\nAnd when switching kexts, ensure you don't have both FakeSMC and VirtualSMC enabled in your config.plist, as this will cause a conflict.\n\n\n# Virtual Machine Issues\n\n * VMWare 15 is known to get stuck on [EB|#LOG:EXITBS:START]. VMWare 16 resolves the problem.\n\n\n# Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\nThis is due to XhciPortLimit breaking with macOS 11.3 and newer, to resolve this, you must disable XhciPortLimit under Kernel -> Quirks. Please ensure you've mapped your USB ports correctly before doing so.",normalizedContent:"# kernel issues\n\nissues surrounding from initial booting the macos installer to right before the install gui pops up.\n\n\n\n * stuck on [eb|#log:exitbs:start]\n   * booter issues\n   * kernel patch issues\n   * uefi issues\n * stuck on endrandomseed\n * stuck after selecting macos partition in opencore\n * getting the error x64 exception type... on amd fx systems\n * kernel panic on invalid frame pointer\n * stuck on [eb|ld:ofs] err(0xe) when booting preboot volume\n * stuck on ocb: loadimage failed - security violation\n * stuck on ocabc: memory pool allocation failure - not found\n * stuck on buffer too small\n * stuck on plist only kext has cfbundleexecutable key\n * stuck on this version of mac os x is not supported: reason mac...\n * couldn't allocate runtime area errors\n * stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n * stuck at acpi table loading on b550\n * \"waiting for root device\" or prohibited sign error\n   * usb issues\n   * sata issues\n * kernel panic with iopcifamily on x99\n * stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n * scrambled screen on laptops\n * black screen after ioconsoleusers: gioscreenlock... on navi\n * kernel panic cannot perform kext summary\n * kernel panic appleintelmcereporter\n * kernel panic appleintelcpupowermanagement\n * kernel panic appleacpiplatform in 10.13\n * macos frozen right before login\n * keyboard works but trackpad does not\n * kextd stall[0]: appleacpicpu\n * kernel panic on appleinteli210ethernet\n * kernel panic on \"wrong cd clock frequency\" with icelake laptop\n * kernel panic on \"cckprngintgen\"\n * stuck at forcing cs_runtime for entitlement in big sur\n * stuck on ramrod(^^^^^^^^^^^^^)\n * virtual machine issues\n * reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\n\n\n\n# stuck on [eb|#log:exitbs:start]\n\nthis section will be split into 3 parts, so pay close attention:\n\n * booter issues\n * kernel patch issues\n * uefi issues\n * virtual machine issues\n\n\n# booter issues\n\nthe main culprits to watch for in the booter section are:\n\n * devirtualisemmio\n   \n   * certain mmio spaces are still required to function correctly, so you'll need to either exclude these regions in booter -> mmiowhitelist or disable this quirk outright. more info here: using devirtualisemmio\n   * for trx40 users, enable this quirk\n   * for x99 users, disable this quirk as it breaks with some firmwares\n\n * setupvirtualmap\n   \n   * this quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * mainly z390 and older require this quirk enabled\n     * however, certain firmwares(mainly 2020+) do not work with this quirk and so may actually cause this kernel panic:\n       * intel's ice lake series\n       * intel's comet lake series(b460, h470, z490, etc)\n       * amd's b550 and a520(latest bios on x570 are also included now)\n         * many b450 and x470 boards with late 2020 bios updates are also included\n       * amd's trx40\n       * vms like qemu\n       * x299 2020+ bios updates(this applies to other x299 boards on the latest bios that released either in late 2019 or 2020+)\n\n * enablewriteunprotector\n   \n   * another issue may be that macos is conflicting with the write protection from cr0 register, to resolve this we have 2 options:\n     * if your firmware supports mats(2018+ firmwares):\n       * enablewriteunprotector -> false\n       * rebuildapplememorymap -> true\n       * syncruntimepermissions -> true\n     * for older firmwares:\n       * enablewriteunprotector -> true\n       * rebuildapplememorymap -> false\n       * syncruntimepermissions -> false\n     * note: some laptops(ex. dell inspiron 5370) even with mats support will halt on boot up, in these cases you'll have two options:\n       * boot with the old firmware quirk combo(ie. with enablewriteunprotector and disable rebuildapplememorymap + syncruntimepermissions)\n       * enable devirtualisemmio and follow mmiowhitelist guide\n\nregarding mats support, firmwares built against edk 2018 will support this and many oems have even added support all the way back to skylake laptops. issue is it's not always obvious if an oem has updated the firmware, you can check the opencore logs whether yours supports it(see here how to get a log):\n\nocabc: mat support is 1\n\n\n * note: 1 means it supports mats, while 0 means it does not.\n\n\n# kernel patch issues\n\nthis section will be split between intel and amd users:\n\n# amd users\n\n * missing kernel patches(only applies for amd cpus, make sure they're opencore patches and not clover. clover uses matchos while opencore has minkernel and maxkernel)\n   * note outdated kernel patches will also have the same effect please ensure you're using the latest patches from amd os x\n\n# intel users\n\n * applexcpmcfglock and applecpupmcfglock\n   * missing cfg or xcpm patches, please enable applexcpmcfglock and applecpupmcfglock\n     * haswell and newer only need applexcpmcfglock\n     * ivy bridge and older only need applecpupmcfglock\n       * broadwell and older need applecpupmcfglock if running 10.10 or older\n   * alternatively you can properly disable cfg-lock: fixing cfg lock\n * applexcpmextramsrs\n   * may also be required, this is generally meant for pentiums, hedt and other odd systems not natively supported in macos.\n\n# legacy intel users\n\nfor macos big sur, many firmwares have issues determining the cpu core count and thus will kernel panic too early for screen printing. via serial, you can see the following panic:\n\nmax_cpus_from_firmware not yet initialized\n\n\nto resolve:\n\n * enable avoidruntimedefrag under booter -> quirks\n   * this should work for most firmwares\n\nhowever on certain machines like the hp compaq dc 7900, the firmware will still panic so we need to force a cpu core count value. only use the below patch if avoidruntimedefrag didn't work:\n\nlegacy cpu core patch\n\nto do this, add the following patch(replacing the 04 from b8 04 00 00 00 c3 with the amount of cpu threads your hardware supports):\n\nkey           type      value\nbase          string    _acpi_count_enabled_logical_processors\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    kernel\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b804000000c3\nreplacemask   data      \nskip          integer   0\n\n\n# uefi issues\n\n * provideconsolegop\n   * needed for transitioning to the next screen, this was originally part of aptiomemoryfix but is now within opencore as this quirk. can be found under uefi -> output\n   * note as of 0.5.6, this quirk is enabled by default in the sample.plist\n * ignoreinvalidflexratio\n   * this is needed for broadwell and older. not for amd and skylake or newer\n\n\n# stuck on endrandomseed\n\nsame issues above, see here for more details: stuck on [eb|#log:exitbs:start]\n\n\n# stuck after selecting macos partition in opencore\n\nsame issues above, see here for more details: stuck on [eb|#log:exitbs:start]\n\n * note: enabling debug opencore can help shed some light as well\n\n\n# getting the error x64 exception type... on amd fx systems\n\nthis error can have multiple causes:\n\n * compatibility support module (csm) being enabled in your bios:\n   \n   might also be called legacy boot support, load legacy option roms/oproms\n\n * the providecurrentcpuinfo quirk (required by the unified patches) being incompatible with your firmware:\n   \n   this means you need to use an older version of the patches and big sur or older. after downloading the older patches linked above, merge them into your config.plist (making sure to remove the old patches first).\n\nan example:\n\n\n\n\n# kernel panic on invalid frame pointer\n\nso this is due to some issue around the booter -> quirks you set, main things to check for:\n\n * devirtualisemmio\n   \n   * certain mmio spaces are still required to function correctly, so you'll need to either exclude these regions in booter -> mmiowhitelist or disable this quirk outright\n   * more info here: using devirtualisemmio\n\n * setupvirtualmap\n   \n   * this quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * however, certain firmwares do not work with this quirk and so may actually cause this kernel panic:\n       * intel's ice lake series\n       * intel's comet lake series\n       * amd's b550\n       * amd's a520\n       * amd's trx40\n       * vms like qemu\n\nanother issue may be that macos is conflicting with the write protection from cr0 register, to resolve this we have 2 options:\n\n * if your firmware supports mats(2018+ firmwares):\n   * enablewriteunprotector -> false\n   * rebuildapplememorymap -> true\n   * syncruntimepermissions -> true\n * for older firmwares:\n   * enablewriteunprotector -> true\n   * rebuildapplememorymap -> false\n   * syncruntimepermissions -> false\n\nregarding mats support, firmwares built against edk 2018 will support this and many oems have even added support all the way back to skylake laptops. issue is it's not always obvious if an oem has updated the firmware, you can check the opencore logs whether yours supports it:\n\nocabc: mat support is 1\n\n\nnote: 1 means it supports mats, while 0 means it does not.\n\n\n# stuck on [eb|ld:ofs] err(0xe) when booting preboot volume\n\nfull error:\n\n[eb|`ld:ofs] err(0xe) @ open (system\\\\library\\\\prelinkedkernels\\\\prelinkedkernel)\n\n\nthis can happen when the preboot volume isn't properly updated, to fix this you'll need to boot into recovery and repair it:\n\n 1. enable jumpstarthotplug under uefi -> apfs(recovery may not boot on macos big sur without this option)\n 2. boot into recovery\n 3. open the terminal, and run the following:\n\n# first, find your preboot volume\ndiskutil list\n\n# from the below list, we can see our preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# now mount the preboot volume\ndiskutil mount disk5s2\n\n# next run updatepreboot on the preboot volume\ndiskutil apfs updatepreboot /volume/disk5s2\n\n\nthen finally reboot\n\n\n# stuck on ocb: loadimage failed - security violation\n\nocsb: no suitable signature - security violation\nocb: apple secure boot prohibits this boot entry, enforcing!\nocb: loadimage failed - security violation\n\n\nthis is due to missing outdated apple secure boot manifests present on your preboot volume resulting is a failure to load if you have securebootmodel set, reason for these files being missing is actually a bug in macos.\n\nto resolve this you can do one of the following:\n\n * disable securebootmodel\n   * ie. set misc -> security -> securebootmodel -> disabled\n * reinstall macos with the latest version\n * or copy over the secure boot manifests from /usr/standalone/i386 to /volumes/preboot/<uuid>/system/library/coreservices\n   * note you will most likely need to do this via terminal as the preboot volume isn't easily editable via the finder\n\nto do this via terminal:\n\n# first, find your preboot volume\ndiskutil list\n\n# from the below list, we can see our preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# now mount the preboot volume\ndiskutil mount disk5s2\n\n# cd into your preboot volume\n# note the actual volume is under /system/volumes/preboot\ncd /system/volumes/preboot\n\n# grab your uuid\nls\n 46923f6e-968e-46e9-ac6d-9e6141df52fd\n cd844c38-1a25-48d5-9388-5d62aa46cfb8\n\n# if multiple show up(ie. you dual boot multiple versions of macos), you will\n# need to determine which uuid is correct.\n# easiest way to determine is printing the value of .disk_label.contentdetails\n# of each volume.\ncat ./46923f6e-968e-46e9-ac6d-9e6141df52fd/system/library/coreservices/.disk_label.contentdetails\n big sur hd%\n\ncat ./cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices/.disk_label.contentdetails\n catalina hd%\n\n# next lets copy over the secure boot files\n# replace cd844c38-1a25-48d5-9388-5d62aa46cfb8 with your uuid value\ncd ~\nsudo cp -a /usr/standalone/i386/. /system/volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n\n\n# stuck on ocabc: memory pool allocation failure - not found\n\nthis is due to incorrect bios settings:\n\n * above4gdecoding is enabled\n * csm is disabled(enabling windows8.1/10 whql mode can do the same on some boards)\n   * note on some laptops, csm must be enabled\n * bios is up-to-date(z390 and hedt are known for having poorly written firmwares)\n\n\n# stuck on buffer too small\n\n * enable above4gdecoding in the bios\n\n\n# stuck on plist only kext has cfbundleexecutable key\n\nmissing or incorrect executable path in your config.plist, this should be resolved by re-running propertree's snapshot tool(cmd/ctrl+r).\n\n\n# stuck on this version of mac os x is not supported: reason mac...\n\nthis error happens when smbios is one no longer supported by that version of macos, make sure values are set in platforminfo->generic with automatic enabled. for a full list of supported smbios and their oses, see here: choosing the right smbios\n\nsupported smbios in macos 10.15, catalina\n * imac13,x+\n * imacpro1,1\n * macpro6,1+\n * macmini6,x+\n * macbook8,1+\n * macbookair5,x+\n * macbookpro9,x+\n\nsupported smbios in macos 11, big sur\n * imac14,4+\n * imacpro1,1\n * macpro6,1+\n * macmini7,1+\n * macbook8,1+\n * macbookair6,x+\n * macbookpro11,x+\n\nsupported smbios in macos 12, monterey\n * imac16,1+\n * imacpro1,1\n * macpro6,1+\n * macmini7,1+\n * macbook9,1+\n * macbookair7,1+\n * macbookpro11,3+\n\nsupported smbios in macos 13, ventura\n * imac18,x+\n * imacpro1,1\n * macpro7,1\n * macmini8,1\n * macbook10,1\n * macbookair8,1+\n * macbookpro14,x+\n\n\n# couldn't allocate runtime area errors\n\nsee fixing kaslr slide values\n\n\n# stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n\nwell this general area is where a lot of pci devices are first setup and configured, and is where most booting issues will happen. other names include:\n\n * apfs_module_start...,\n * waiting for root device,\n * waiting on...ioresources...,\n * previous shutdown cause...\n\nthe main places to check:\n\n * missing ec patch:\n   \n   * make sure you have your ec ssdt both in efi/oc/acpi and acpi -> add, double check it's enabled.\n   * if you don't have one, grab it here: getting started with acpi\n\n * irq conflict:\n   \n   * most common on older laptops and pre-builts, run ssdttime's fixhpet option and add the resulting ssdt-hpet.aml and acpi patches to your config( the ssdt will not work without the acpi patches)\n\n * pci allocation issue:\n   \n   * update your bios, make sure it's on the latest. most oems have very broken pci allocation on older firmwares, especially amd\n   * make sure either above4g is enabled in the bios, if no option available then add npci=0x2000 or npci=0x3000 (try both one at a time) to boot args.\n     * some x99 and x299 boards(ie. ga-x299-ud4) may require both npci boot-arg and above4g enabled\n     * amd cpu note: do not have both the above4g setting enabled and npci in boot args, they will conflict\n     * 2020+ bios notes: when enabling above4g, resizable bar support may become an available. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n   * other bios settings that are important: csm disabled, windows 8.1/10 uefi mode enabled\n\n * nvme or sata issue:\n   \n   * sometimes if either a bad sata controller or an unsupported nvme drive are used, you can commonly get stuck here. things you can check:\n     * not using either a samsung pm981 or micron 2200s nvme ssd\n     * samsung 970 evo plus running the latest firmware(older firmwares were known for instability and stalls, see here for more info)\n     * sata hot-plug is disabled in the bios(more commonly to cause issues on amd cpu based systems)\n     * ensure nvme drives are set as nvme mode in bios(some bios have a bug where you can set nvme drives as sata)\n\n * nvram failing:\n   \n   * common issue hedt and 300 series motherboards, you have a couple paths to go down:\n     * 300 series consumer intel: see getting started with acpi on making ssdt-pmc.aml\n     * hedt(ie. x99): see emulating nvram on how to stop nvram write, note that for install you do not need to run the script. just setup the config.plist\n\n * rtc missing:\n   \n   * commonly found on intel's 300+ series(ie. z370, z490), caused by the rtc clock being disabled by default. see getting started with acpi on creating an ssdt-awac.aml\n   * x99 and x299 have broken rtc devices, so will need to be fixed with ssdt-rtc0-range. see getting started with acpi on creating said file\n   * some drunk firmware writer at hp also disabled the rtc on the hp 250 g6 with no way to actually re-enable it\n     * known affected models: hp 15-da0014dx, hp 250 g6\n     * for users cursed with such hardware you'll need to create a fake rtc clock for macos to play with. see getting started with acpi for more details, as well as below image example:\n\nexample of what a disabled rtc with no way to enable looks like(note that there is no value to re-enable it like stas):\n\n\n\n\n# stuck at acpi table loading on b550\n\n\n\nif you're getting stuck at or near acpi table loading with an amd b550 or a520 motherboard, add the following ssdt:\n\n * ssdt-cpur.aml\n\nand please remember to add this ssdt to both efi/oc/acpi and your config.plist under acpi -> add(propertree's snapshot function can do this for you)\n\n\n# \"waiting for root device\" or prohibited sign error\n\n * other names: stop sign, scrambled\n\nthis is generally seen as a usb or sata error, couple ways to fix:\n\n\n# usb issues\n\nthis assumes you're only booting the installer usb and not macos itself.\n\n * if you're hitting the 15 port limit, you need to make an usb map\n\n * another issue can be that certain firmware won't pass usb ownership to macos\n   \n   * uefi -> quirks -> releaseusbownership -> true\n   * enabling ehci/xhci handoff in the bios can fix this as well\n\n * sometimes, if the usb is plugged into a 3.x port, plugging it into a 2.0 port can fix this error and vice versa.\n\n * for amd's 15h and 16h cpus, you may need to add the following:\n   \n   * xlncusbfix.kext\n\n * if xlncusbfix still doesn't work, then try the following alongside xlncusbfix:\n   \n   * amd stopsign-fixv5\n\n * x299 users: enable above4g decoding\n   \n   * odd firmware bug on x299 where usb breaks otherwise\n\n * missing usb ports in acpi:\n   \n   * for intel's coffee lake and older, we recommend using usbinjectall\n   * for intel's ice lake and comet lake, we recommend ssdt-rhub\n     * ssdttime's 7. usb reset option can do the same\n   * for amd, run ssdttime's 7. usb reset option and add the provided ssdt-rhub to your efi and config.plist\n\n\n# sata issues\n\non rare occasions(mainly laptops), the sata controller isn't officially supported by macos. to resolve this, we'll want to do a few things:\n\n * set sata to ahci mode in the bios\n   * macos doesn't support hardware raid or ide mode properly.\n   * note drives already using intel rapid storage technology(rst, soft raid for windows and linux) will not be accessible in macos.\n * sata-unsupported.kext\n   * adds support to obscure sata controllers, commonly being laptops.\n   * for very legacy sata controllers, ahciportinjector.kext may be more suitable.\n * catalina's patched appleahciport.kext\n   * for users running macos 11, big sur and having issues. this backports the known working catalina kext, sata-unsupported is not needed with this kext\n\nnote that you will only experience this issue after installing macos onto the drive, booting the macos installer will not error out due to sata issues.\n\n\n# kernel panic with iopcifamily on x99\n\nfor those running the x99 platform from intel, please go over the following:\n\n * the following kernel patches are enabled:\n   * applecpupmcfglock\n   * applexcpmcfglock\n   * applexcpmextramsrs\n * you have the following ssdts:\n   * ssdt-unc(if not, see getting started with acpi on creating said file)\n\n\n# stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n\nthis is right before the gpu is properly initialized, verify the following:\n\n * gpu is uefi capable(gtx 7xx/2013+)\n * csm is off in the bios\n   * may need to be enabled on laptops\n * forcing pcie 3.0 link speed\n * double check that ig-platform-id and device-id are valid if running an igpu.\n   * desktop uhd 630's may need to use 00009b3e instead\n * trying various whatevergreen fixes\n   * -igfxmlr boot argument. this can also manifest as a \"divide by zero\" error.\n * coffee lake igpu users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# scrambled screen on laptops\n\nenable csm in your uefi settings. this may appear as \"boot legacy roms\" or other legacy setting.\n\n\n# black screen after ioconsoleusers: gioscreenlock... on navi\n\n * add agdpmod=pikera to boot args\n * switch between different display outputs\n * try running macpro7,1 smbios with the boot-arg agdpmod=ignore\n\nfor msi navi users, you'll need to apply the patch mentioned here: installer not working with 5700xt #901\n\nspecifically, add the following entry under kernel -> patch:\n\nmsi navi patch\n\nbase:\ncomment: navi vbios bug patch\ncount: 1\nenabled: yes\nfind: 4154592c526f6d2300\nidentifier: com.apple.kext.amdradeonx6000framebuffer\nlimit: 0\nmask:\nminkernel: 19.00.00\nmaxkernel: 19.99.99\nreplace: 414d442c526f6d2300\nreplacemask:\nskip: 0\n\n\nnote: macos 11, big sur no longer requires this patch for msi navi.\n\n\n# kernel panic cannot perform kext summary\n\ngenerally seen as an issue surrounding the prelinked kernel, specifically that macos is having a hard time interpreting the ones we injected. verify that:\n\n * your kexts are in the correct order(master then plugins, lilu always before the plugins)\n * kexts with executables have them and plist only kexts don't(ie. usbmap.kext, xhci-unspported.kext, etc does not contain an executable)\n * don't include multiple of the same kexts in your config.plist(ie. including multiple copies of voodooinput from multiple kexts, we recommend choosing the first kext in your config's array and disable the rest)\n\nnote: this error may also look very similar to kernel panic on invalid frame pointer\n\n\n# kernel panic appleintelmcereporter\n\nwith macos catalina, dual socket support is broken, and a fun fact about amd firmware is that some boards will actually report multiple socketed cpus. to fix this, add applemcereporterdisabler to both efi/oc/kexts and config.plist -> kernel -> add\n\n\n# kernel panic appleintelcpupowermanagement\n\nthis is likely due to faulty or outright missing nullcpupowermanagement. to fix the issue, remove nullcpupowermanagement from kernel -> add and efi/oc/kexts then enable dummypowermanagement under kernel -> emulate\n\n * note: on older intel cpus(ie. penryn and older), it may be due to irq conflicts or the hpet device being disabled. to resolve, you have 2 options:\n   * ssdttime's fixhpet option\n   * forcing the hpet device on\n\nforcing the hpet device on\n\nunder acpi -> patch:\n\ncomment   string    force hpet online\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      a010934f53464c00\nreplace   data      a40a0fa3a3a3a3a3\n\n\n# kernel panic appleacpiplatform in 10.13\n\n\n\non macos 10.13, high sierra the os is much stricter with acpi tables, specifically a bug with how headers were handled. to resolve, enable normalizeheaders under acpi -> quirks in your config.plist\n\n\n# macos frozen right before login\n\nthis is a common example of screwed up tsc, for most system add cputscsync\n\nthe most common way to see the tsc issue:\n\ncase 1   case 2\n         \n\n\n# keyboard works but trackpad does not\n\nmake sure that voodooinput is listed before voodoops2 and voodooi2c kexts in your config.plist.\n\nvoodooi2c troubleshooting\n\ncheck the order that your kexts load - make they match what is shown under gathering files:\n\n 1. voodoogpio, voodooinput, and voodooi2cservices in any order (found under voodooi2c.kext/contents/plugins)\n 2. voodooi2c\n 3. satellite/plugin kext\n\nmake sure you have ssdt-gpio in efi/oc/acpi and in your config.plist under acpi -> add in your config.plist. if you are still having issues, reference the getting started with acpi gpio page.\n\n\n# kextd stall[0]: appleacpicpu\n\nthis is due to either a missing smc emulator or broken one, make sure of the following:\n\n * lilu and virtualsmc are both in efi/oc/kexts and in your config.plist\n * lilu is before virtualsmc in the kext list\n * last resort is to try fakesmc instead, do not have both virtualsmc and fakesmc enabled\n\n\n# kernel panic on appleinteli210ethernet\n\nfor those running comet lake motherboards with the i225-v nic, you may experience a kernel panic on boot due to the i210 kext. to resolve this, make sure you have the correct pciroot for your ethernet. this commonly being either:\n\n * pciroot(0x0)/pci(0x1c,0x1)/pci(0x0, 0x0)\n   * by default, this is what asus and gigabyte motherboards use\n * pciroot(0x0)/pci(0x1c,0x4)/pci(0x0,0x0)\n   * some oems may use this instead\n\nfor those who can to your pciroot manually, you'll want to install macos fully and run the following with gfxutil:\n\n/path/to/gfxutil | grep -i \"8086:15f3\"\n\n\nthis should spit out something like this:\n\n00:1f.6 8086:15f3 /pc00@0/gbe1@1f,6 = pciroot(0x0)/pci(0x1f,0x6)\n\n\nthe ending pciroot(0x0)/pci(0x1f,0x6) is what you want to add in your config.plist with device-id of f2150000\n\n\n# kernel panic on \"wrong cd clock frequency\" with icelake laptop\n\n\n\nto resolve this kernel panic, ensure you have -igfxcdc in your boot-args.\n\n\n# kernel panic on \"cckprng_int_gen\"\n\nfull panic:\n\n\"cckprng_int_gen: generator has already been sealed\"\n\n\nthis is likely to be 1 of 2 things:\n\n * missing smc emulator(ie. no virtualsmc in your config.plist or efi)\n   * add virtualsmc.kext to your config.plist and efi\n * incorrect ssdt usage with ssdt-cpur\n\nfor the latter, ensure you're only using ssdt-cpur with b550 and a520. do not use on x570 or older hardware(ie. b450 or a320)\n\n\n# stuck at forcing cs_runtime for entitlement in big sur\n\n\n\nthis is actually the part at where macos will seal the system volume, and where it may seem that macos has gotten stuck. do not restart thinking you're stuck, this will take quite some time to complete.\n\n\n# stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nif you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your smc emulator is broken. to fix this, you have 2 options:\n\n * ensure you're using the latest builds of virtualsmc and lilu, with the vsmcgen=1 boot-arg\n * switch over to rehabman's fakesmc (you can use the minkernel/maxkernel trick mentioned above to restrict fakesmc to big sur and up\n\nand when switching kexts, ensure you don't have both fakesmc and virtualsmc enabled in your config.plist, as this will cause a conflict.\n\n\n# virtual machine issues\n\n * vmware 15 is known to get stuck on [eb|#log:exitbs:start]. vmware 16 resolves the problem.\n\n\n# reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\nthis is due to xhciportlimit breaking with macos 11.3 and newer, to resolve this, you must disable xhciportlimit under kernel -> quirks. please ensure you've mapped your usb ports correctly before doing so.",charsets:{cjk:!0}},{title:"Miscellaneous Issues",frontmatter:{},regularPath:"/troubleshooting/extended/misc-issues.html",relativePath:"troubleshooting/extended/misc-issues.md",key:"v-526d6785",path:"/troubleshooting/extended/misc-issues.html",headers:[{level:2,title:"Can't run acpidump.efi",slug:"can-t-run-acpidump-efi",normalizedTitle:"can't run acpidump.efi",charIndex:107},{level:2,title:"Fixing SSDTTime: Could not locate or download iasl!",slug:"fixing-ssdttime-could-not-locate-or-download-iasl",normalizedTitle:"fixing ssdttime: could not locate or download iasl!",charIndex:133},{level:2,title:"Fix Python: Python is not installed or not found on PATH",slug:"fix-python-python-is-not-installed-or-not-found-on-path",normalizedTitle:"fix python: python is not installed or not found on path",charIndex:188},{level:2,title:"Windows Startup Disk can't see APFS drives",slug:"windows-startup-disk-can-t-see-apfs-drives",normalizedTitle:"windows startup disk can't see apfs drives",charIndex:248},{level:2,title:"Incorrect resolution with OpenCore",slug:"incorrect-resolution-with-opencore",normalizedTitle:"incorrect resolution with opencore",charIndex:294},{level:2,title:"Can't find Windows/BootCamp drive in picker",slug:"can-t-find-windows-bootcamp-drive-in-picker",normalizedTitle:"can't find windows/bootcamp drive in picker",charIndex:332},{level:2,title:"Selecting Startup Disk doesn't apply correctly",slug:"selecting-startup-disk-doesn-t-apply-correctly",normalizedTitle:"selecting startup disk doesn't apply correctly",charIndex:379},{level:2,title:"Booting Windows results in BlueScreen or Linux crashes",slug:"booting-windows-results-in-bluescreen-or-linux-crashes",normalizedTitle:"booting windows results in bluescreen or linux crashes",charIndex:429},{level:2,title:"Booting Windows error: OCB: StartImage failed - Already started",slug:"booting-windows-error-ocb-startimage-failed-already-started",normalizedTitle:"booting windows error: ocb: startimage failed - already started",charIndex:487},{level:2,title:"iASL warning, only X unresolved",slug:"iasl-warning-only-x-unresolved",normalizedTitle:"iasl warning, only x unresolved",charIndex:554},{level:2,title:"Time inconsistency between macOS and Windows",slug:"time-inconsistency-between-macos-and-windows",normalizedTitle:"time inconsistency between macos and windows",charIndex:589}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Can't run acpidump.efi Fixing SSDTTime: Could not locate or download iasl! Fix Python: Python is not installed or not found on PATH Windows Startup Disk can't see APFS drives Incorrect resolution with OpenCore Can't find Windows/BootCamp drive in picker Selecting Startup Disk doesn't apply correctly Booting Windows results in BlueScreen or Linux crashes Booting Windows error: OCB: StartImage failed - Already started iASL warning, only X unresolved Time inconsistency between macOS and Windows",content:"# Miscellaneous Issues\n\nMiscellaneous issues not revolving around macOS itself such as multibooting.\n\n\n\n * Can't run acpidump.efi\n * Fixing SSDTTime: Could not locate or download iasl!\n * Fix Python: Python is not installed or not found on PATH\n * Windows Startup Disk can't see APFS drives\n * Incorrect resolution with OpenCore\n * Can't find Windows/BootCamp drive in picker\n * Selecting Startup Disk doesn't apply correctly\n * Booting Windows results in BlueScreen or Linux crashes\n * Booting Windows error: OCB: StartImage failed - Already started\n * iASL warning, only X unresolved\n * Time inconsistency between macOS and Windows\n\n\n\n\n# Can't run acpidump.efi\n\nCall upon OpenCore shell:\n\nshell> fs0: //replace with proper drive\n\nfs0:\\> dir //to verify this is the right directory\n\n  Directory of fs0:\\\n\n   01/01/01 3:30p  EFI\nfs0:\\> cd EFI\\OC\\Tools //note that its with forward slashes\n\nfs0:\\EFI\\OC\\Tools> acpidump.efi -b -n DSDT -z\n\n\n\n# Fixing SSDTTime: Could not locate or download iasl!\n\nThis is usually due to an outdated version of Python, try either updating Python or add iasl to the scripts folder for SSDTTime:\n\n * iasl macOS version\n * iasl Windows version\n * iasl Linux version\n\n\n# Fix Python: Python is not installed or not found on PATH\n\nEasy fix, download and install the latest python:\n\n * macOS link\n * Windows link\n * Linux link\n\nMake sure Add Python to PATH\n\n\n\n\n# Windows Startup Disk can't see APFS drives\n\n * Outdated BootCamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). CorpNewt has also forked brigadier fixing these issues as well: CorpNewt's brigadier\n\n\n# Incorrect resolution with OpenCore\n\n * Follow Fixing Resolution and Verbose for correct setup, set UIScale to 2 for HiDPI\n * Users also have noticed that setting ConsoleMode to Max will sometimes fail, leaving it empty can help\n\n\n# Can't find Windows/BootCamp drive in picker\n\nSo with OpenCore, we have to note that legacy Windows installs are not supported, only UEFI. Most installs now are UEFI based but those made by BootCamp Assistant are legacy based, so you'll have to find other means to make an installer(Google's your friend). This also means MasterBootRecord/Hybrid partitions are also broken so you'll need to format the drive you want to install onto with DiskUtility. See the Multiboot Guide on best practices\n\nNow to get onto troubleshooting:\n\n * Make sure Misc -> Security -> ScanPolicy is set to 0 to show all drives\n * Enable Misc -> Boot -> Hideself when Windows bootloader is located on the same drive\n\n\n# Selecting Startup Disk doesn't apply correctly\n\nIf you're having issues with Startup Disk correctly applying your new boot entry, this is most likely caused by a missing DevicePathsSupported in your I/O Registry. To resolve this, ensure you are using PlatformInfo -> Automatic -> True\n\nExample of missing DevicePathsSupported:\n\n * Default DevicePath match failure due to different PciRoot #664\n\n\n# Booting Windows results in BlueScreen or Linux crashes\n\nThis is due to alignment issues, make sure SyncRuntimePermissions is enabled on firmwares supporting MATs. Check your logs whether your firmware supports Memory Attribute Tables(generally seen on 2018 firmwares and newer)\n\nCommon Windows error code:\n\n * 0xc000000d\n\n\n# Booting Windows error: OCB: StartImage failed - Already started\n\nThis is due to OpenCore getting confused when trying to boot Windows and accidentally thinking it's booting OpenCore. This can be avoided by either move Windows to it's own drive or adding a custom drive path under BlessOverride. See Configuration.pdf for more details.\n\n\n# iASL warning, only X unresolved\n\nIf you try to decompile your DSDT and get an error similar to this:\n\niASL Warning: There were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved)\n\n\nThis happens when one ACPI table requires the rest for proper referencing, it does not accept the creation of DSDTs as we're only using it for creating a select few SSDTs. For those who are worried, you can run the following:\n\niasl * [insert all ACPI files here]\n\n\n\n# Time inconsistency between macOS and Windows\n\nThis is due to macOS using Universal Time while Windows relies on Greenwich time, so you'll need to force one OS to a different way of measuring time. We highly recommend modifying Windows instead as it's far less destructive and painful:\n\n * Install Bootcamp utilities\n * Modify Windows' registry",normalizedContent:"# miscellaneous issues\n\nmiscellaneous issues not revolving around macos itself such as multibooting.\n\n\n\n * can't run acpidump.efi\n * fixing ssdttime: could not locate or download iasl!\n * fix python: python is not installed or not found on path\n * windows startup disk can't see apfs drives\n * incorrect resolution with opencore\n * can't find windows/bootcamp drive in picker\n * selecting startup disk doesn't apply correctly\n * booting windows results in bluescreen or linux crashes\n * booting windows error: ocb: startimage failed - already started\n * iasl warning, only x unresolved\n * time inconsistency between macos and windows\n\n\n\n\n# can't run acpidump.efi\n\ncall upon opencore shell:\n\nshell> fs0: //replace with proper drive\n\nfs0:\\> dir //to verify this is the right directory\n\n  directory of fs0:\\\n\n   01/01/01 3:30p  efi\nfs0:\\> cd efi\\oc\\tools //note that its with forward slashes\n\nfs0:\\efi\\oc\\tools> acpidump.efi -b -n dsdt -z\n\n\n\n# fixing ssdttime: could not locate or download iasl!\n\nthis is usually due to an outdated version of python, try either updating python or add iasl to the scripts folder for ssdttime:\n\n * iasl macos version\n * iasl windows version\n * iasl linux version\n\n\n# fix python: python is not installed or not found on path\n\neasy fix, download and install the latest python:\n\n * macos link\n * windows link\n * linux link\n\nmake sure add python to path\n\n\n\n\n# windows startup disk can't see apfs drives\n\n * outdated bootcamp drivers(generally ver 6.0 will come with brigadier, bootcamp utility in macos provides newer version like ver 6.1). corpnewt has also forked brigadier fixing these issues as well: corpnewt's brigadier\n\n\n# incorrect resolution with opencore\n\n * follow fixing resolution and verbose for correct setup, set uiscale to 2 for hidpi\n * users also have noticed that setting consolemode to max will sometimes fail, leaving it empty can help\n\n\n# can't find windows/bootcamp drive in picker\n\nso with opencore, we have to note that legacy windows installs are not supported, only uefi. most installs now are uefi based but those made by bootcamp assistant are legacy based, so you'll have to find other means to make an installer(google's your friend). this also means masterbootrecord/hybrid partitions are also broken so you'll need to format the drive you want to install onto with diskutility. see the multiboot guide on best practices\n\nnow to get onto troubleshooting:\n\n * make sure misc -> security -> scanpolicy is set to 0 to show all drives\n * enable misc -> boot -> hideself when windows bootloader is located on the same drive\n\n\n# selecting startup disk doesn't apply correctly\n\nif you're having issues with startup disk correctly applying your new boot entry, this is most likely caused by a missing devicepathssupported in your i/o registry. to resolve this, ensure you are using platforminfo -> automatic -> true\n\nexample of missing devicepathssupported:\n\n * default devicepath match failure due to different pciroot #664\n\n\n# booting windows results in bluescreen or linux crashes\n\nthis is due to alignment issues, make sure syncruntimepermissions is enabled on firmwares supporting mats. check your logs whether your firmware supports memory attribute tables(generally seen on 2018 firmwares and newer)\n\ncommon windows error code:\n\n * 0xc000000d\n\n\n# booting windows error: ocb: startimage failed - already started\n\nthis is due to opencore getting confused when trying to boot windows and accidentally thinking it's booting opencore. this can be avoided by either move windows to it's own drive or adding a custom drive path under blessoverride. see configuration.pdf for more details.\n\n\n# iasl warning, only x unresolved\n\nif you try to decompile your dsdt and get an error similar to this:\n\niasl warning: there were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved)\n\n\nthis happens when one acpi table requires the rest for proper referencing, it does not accept the creation of dsdts as we're only using it for creating a select few ssdts. for those who are worried, you can run the following:\n\niasl * [insert all acpi files here]\n\n\n\n# time inconsistency between macos and windows\n\nthis is due to macos using universal time while windows relies on greenwich time, so you'll need to force one os to a different way of measuring time. we highly recommend modifying windows instead as it's far less destructive and painful:\n\n * install bootcamp utilities\n * modify windows' registry",charsets:{}},{title:"OpenCore Boot Issues",frontmatter:{},regularPath:"/troubleshooting/extended/opencore-issues.html",relativePath:"troubleshooting/extended/opencore-issues.md",key:"v-381957ff",path:"/troubleshooting/extended/opencore-issues.html",headers:[{level:2,title:"Stuck on a black screen before picker",slug:"stuck-on-a-black-screen-before-picker",normalizedTitle:"stuck on a black screen before picker",charIndex:140},{level:2,title:"Stuck on no vault provided!",slug:"stuck-on-no-vault-provided",normalizedTitle:"stuck on no vault provided!",charIndex:181},{level:2,title:"Stuck on OC: Invalid Vault mode",slug:"stuck-on-oc-invalid-vault-mode",normalizedTitle:"stuck on oc: invalid vault mode",charIndex:212},{level:2,title:"Can't see macOS partitions",slug:"can-t-see-macos-partitions",normalizedTitle:"can't see macos partitions",charIndex:247},{level:2,title:"Stuck on OCB: OcScanForBootEntries failure - Not Found",slug:"stuck-on-ocb-ocscanforbootentries-failure-not-found",normalizedTitle:"stuck on ocb: ocscanforbootentries failure - not found",charIndex:277},{level:2,title:"Stuck on OCB: failed to match a default boot option",slug:"stuck-on-ocb-failed-to-match-a-default-boot-option",normalizedTitle:"stuck on ocb: failed to match a default boot option",charIndex:335},{level:2,title:"Stuck on OCB: System has no boot entries",slug:"stuck-on-ocb-system-has-no-boot-entries",normalizedTitle:"stuck on ocb: system has no boot entries",charIndex:390},{level:2,title:"Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...",slug:"stuck-on-ocs-no-schema-for-dsdt-kernelandkextpatch-rtvariable-smbios-systemparameters",normalizedTitle:"stuck on ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...",charIndex:434},{level:2,title:"Stuck on OC: Driver XXX.efi at 0 cannot be found",slug:"stuck-on-oc-driver-xxx-efi-at-0-cannot-be-found",normalizedTitle:"stuck on oc: driver xxx.efi at 0 cannot be found",charIndex:531},{level:2,title:'Receiving "Failed to parse real field of type 1"',slug:"receiving-failed-to-parse-real-field-of-type-1",normalizedTitle:"receiving &quot;failed to parse real field of type 1&quot;",charIndex:null},{level:2,title:"Can't select anything in the picker",slug:"can-t-select-anything-in-the-picker",normalizedTitle:"can't select anything in the picker",charIndex:635},{level:2,title:"SSDTs not being added",slug:"ssdts-not-being-added",normalizedTitle:"ssdts not being added",charIndex:674},{level:2,title:"Booting OpenCore reboots to BIOS",slug:"booting-opencore-reboots-to-bios",normalizedTitle:"booting opencore reboots to bios",charIndex:699},{level:2,title:"OCABC: Incompatible OpenRuntime r4, require r10",slug:"ocabc-incompatible-openruntime-r4-require-r10",normalizedTitle:"ocabc: incompatible openruntime r4, require r10",charIndex:735},{level:2,title:"Failed to open OpenCore image - Access Denied",slug:"failed-to-open-opencore-image-access-denied",normalizedTitle:"failed to open opencore image - access denied",charIndex:786},{level:2,title:"OC: Failed to find SB model disable halting on critical error",slug:"oc-failed-to-find-sb-model-disable-halting-on-critical-error",normalizedTitle:"oc: failed to find sb model disable halting on critical error",charIndex:835},{level:2,title:"Legacy boot stuck on BOOT FAIL!",slug:"legacy-boot-stuck-on-boot-fail",normalizedTitle:"legacy boot stuck on boot fail!",charIndex:900}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Stuck on a black screen before picker Stuck on no vault provided! Stuck on OC: Invalid Vault mode Can't see macOS partitions Stuck on OCB: OcScanForBootEntries failure - Not Found Stuck on OCB: failed to match a default boot option Stuck on OCB: System has no boot entries Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... Stuck on OC: Driver XXX.efi at 0 cannot be found Receiving \"Failed to parse real field of type 1\" Can't select anything in the picker SSDTs not being added Booting OpenCore reboots to BIOS OCABC: Incompatible OpenRuntime r4, require r10 Failed to open OpenCore image - Access Denied OC: Failed to find SB model disable halting on critical error Legacy boot stuck on BOOT FAIL!",content:"# OpenCore Boot Issues\n\nIssues surrounding from initial booting the USB itself to right before you choose to boot the macOS installer\n\n\n\n * Stuck on a black screen before picker\n * Stuck on no vault provided!\n * Stuck on OC: Invalid Vault mode\n * Can't see macOS partitions\n * Stuck on OCB: OcScanForBootEntries failure - Not Found\n * Stuck on OCB: failed to match a default boot option\n * Stuck on OCB: System has no boot entries\n * Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...\n * Stuck on OC: Driver XXX.efi at 0 cannot be found\n * Receiving \"Failed to parse real field of type 1\"\n * Can't select anything in the picker\n * SSDTs not being added\n * Booting OpenCore reboots to BIOS\n * OCABC: Incompatible OpenRuntime r4, require r10\n * Failed to open OpenCore image - Access Denied\n * OC: Failed to find SB model disable halting on critical error\n * Legacy boot stuck on BOOT FAIL!\n\n\n\n\n# Stuck on a black screen before picker\n\nThis is likely some error either on your firmware or OpenCore, specifically it's having troubles loading all the drivers and presenting the menu. The best way to diagnose it is via OpenCore's DEBUG Build and checking the logs whether OpenCore actually loaded, and if so what is it getting stuck on.\n\nSituations where OpenCore did not load:\n\n * If there are no logs present even after setting up the DEBUG version of OpenCore with Target set to 67, there's likely an issue either with:\n   * Incorrect USB Folder Structure\n     * See Booting OpenCore reboots to BIOS for more info\n   * Firmware does not support UEFI\n     * You'll need to setup DuetPkg, this is covered in both the macOS and Windows install pages\n\nSituations where OpenCore did load:\n\n * Check the last line printed in your logs, there will likely be either a .efi driver that's been loaded or some form of ASSERT\n   * For ASSERT's, you'll want to actually inform the developers about this issue here: Acidanthera's Bugtracker\n   * For .efi drivers getting stuck, check over the following:\n     * HfsPlus.efi load issues:\n       * Try using HfsPlusLegacy.efi instead\n       * This is recommended for CPUs that do not support RDRAND, mainly relevant for 3rd gen Ivy bridge i3 and older\n       * VBoxHfs.efi is another option however is much slower than HfsPlus's version\n     * HiiDatabase.efi load issues:\n       * Likely your firmware already supports HiiDatabase, so the driver is conflicting. Simply remove the driver as you don't need it.\n\n\n# Stuck on no vault provided!\n\nTurn off Vaulting in your config.plist under Misc -> Security -> Vault by setting it to:\n\n * Optional\n\nIf you have already executed the sign.command you will need to restore the OpenCore.efi file as the 256 byte RSA-2048 signature has been shoved in. Can grab a new copy of OpenCore.efi here: OpenCorePkg\n\nNote: Vault and FileVault are 2 separate things, see Security and FileVault for more details\n\n\n# Stuck on OC: Invalid Vault mode\n\nThis is likely a spelling mistake, options in OpenCore are case-sensitive so make sure you check closely, Optional is the correct way to enter it under Misc -> Security -> Vault\n\n\n# Can't see macOS partitions\n\nMain things to check:\n\n * ScanPolicy set to 0 to show all drives\n * Have the proper firmware drivers such as HfsPlus(Note ApfsDriverLoader shouldn't be used in 0.5.8)\n * Set UnblockFsConnect to True in config.plist -> UEFI -> Quirks. Needed for some HP systems\n * Set SATA Mode: AHCI in BIOS\n * Set UEFI -> APFS to see APFS based drives:\n   * EnableJumpstart: YES\n   * HideVerbose: NO\n   * If running older versions of High Sierra(ie. 10.13.5 or older), set the following:\n     * MinDate: -1\n     * MinVersion: -1\n\n\n# Stuck on OCB: OcScanForBootEntries failure - Not Found\n\nThis is due to OpenCore being unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# Stuck on OCB: failed to match a default boot option\n\nSame fix as OCB: OcScanForBootEntries failure - Not Found, OpenCore is unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# Stuck on OCB: System has no boot entries\n\nSame fix as the above 2:\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...\n\nThis is due to either using a Clover config with OpenCore or using a configurator such as Mackie's Clover and OpenCore configurator. You'll need to start over and make a new config or figure out all the garbage you need to remove from your config. This is why we don't support configurators, they are known for these issues\n\n * Note: These same issues will also occur if you mix outdated configs with newer versions of OpenCore. Please update them accordingly\n\n\n# Stuck on OC: Driver XXX.efi at 0 cannot be found\n\nThis is due to an entry being in your config.plist, however not present in your EFI. To resolve:\n\n * Ensure your EFI/OC/Drivers matches up with your config.plist -> UEFI -> Drivers\n   * If not, please run Cmd/Ctrl+R with OpenCore to re-snapshot your config.plist\n\nNote that the entries are case-sensitive.\n\n\n# Receiving \"Failed to parse real field of type 1\"\n\nThis is due to a value set as real when it's not supposed to be, generally being that Xcode converted HaltLevel by accident:\n\n<key>HaltLevel</key>\n <real>2147483648</real>\n\n\nTo fix, swap real for integer:\n\n<key>HaltLevel</key>\n <integer>2147483648</integer>\n\n\n\n# Can't select anything in the picker\n\nThis is due to either a few things\n\n * Incompatible keyboard driver:\n   \n   * Disable PollAppleHotKeys and enable KeySupport, then remove OpenUsbKbDxe from your config.plist -> UEFI -> Drivers\n   * If the above doesn't work, reverse: disable KeySupport, then add OpenUsbKbDxe to your config.plist -> UEFI -> Drivers\n\n * Missing PS2 keyboard driver(Ignore if using a USB keyboard):\n   \n   * While most firmwares will include it by default, some laptops and older PCs may still need Ps2KeyboardDxe.efi to function correctly. Remember to add this to your config.plist as well\n\n\n# SSDTs not being added\n\nSo with OpenCore, there's some extra security checks added around ACPI files, specifically that table length header must equal to the file size. This is actually the fault of iASL when you compiled the file. Example of how to find it:\n\n* Original Table Header:\n*     Signature        \"SSDT\"\n*     Length           0x0000015D (349)\n*     Revision         0x02\n*     Checksum         0xCF\n*     OEM ID           \"ACDT\"\n*     OEM Table ID     \"SsdtEC\"\n*     OEM Revision     0x00001000 (4096)\n*     Compiler ID      \"INTL\"\n*     Compiler Version 0x20190509 (538510601)\n\n\nThe Length and checksum value is what we care about, so if our SSDT is actually 347 bytes then we want to change Length to 0x0000015B (347)(the 015B is in HEX)\n\nBest way to actually fix this is to grab a newer copy of iASL or Acidanthera's copy of MaciASL and remaking the SSDT\n\n * Note: MaciASL distributed by Rehabman are prone to ACPI corruption, please avoid it as they no longer maintain their repos\n\n\n# Booting OpenCore reboots to BIOS\n\n * Incorrect EFI folder structure, make sure all of your OC files are within an EFI folder located on your ESP(EFI system partition)\n\nExample of folder structure\n\n\n\n\n# OCABC: Incompatible OpenRuntime r4, require r10\n\nOutdated OpenRuntime.efi, make sure BOOTx64.efi, OpenCore.efi and OpenRuntime are all from the same exact build. Anything mismatched will break booting\n\n * Note: FwRuntimeServices has been renamed to OpenRuntime with 0.5.7 and newer\n\n\n# Failed to open OpenCore image - Access Denied\n\nOn newer Microsoft Surface device firmwares, loading OpenCore will now result in a security violation even when Secure Boot is disabled. To resolve this, enable UEFI -> Quirks -> DisableSecurityPolicy in your config.plist. See here for more info: Failed to open OpenCore image - Access Denied #1446\n\n\n# OC: Failed to find SB model disable halting on critical error\n\nThis is a typo, ensure that in your config.plist Misc -> Security -> SecureBootModel is set to Disabled\n\n\n# Legacy boot stuck on BOOT FAIL!\n\nThis error means that EFI/OC/OpenCore.efi could not be found on any partition. Double check that the EFI folder structure is correct.\n\nExample of folder structure\n\n",normalizedContent:"# opencore boot issues\n\nissues surrounding from initial booting the usb itself to right before you choose to boot the macos installer\n\n\n\n * stuck on a black screen before picker\n * stuck on no vault provided!\n * stuck on oc: invalid vault mode\n * can't see macos partitions\n * stuck on ocb: ocscanforbootentries failure - not found\n * stuck on ocb: failed to match a default boot option\n * stuck on ocb: system has no boot entries\n * stuck on ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...\n * stuck on oc: driver xxx.efi at 0 cannot be found\n * receiving \"failed to parse real field of type 1\"\n * can't select anything in the picker\n * ssdts not being added\n * booting opencore reboots to bios\n * ocabc: incompatible openruntime r4, require r10\n * failed to open opencore image - access denied\n * oc: failed to find sb model disable halting on critical error\n * legacy boot stuck on boot fail!\n\n\n\n\n# stuck on a black screen before picker\n\nthis is likely some error either on your firmware or opencore, specifically it's having troubles loading all the drivers and presenting the menu. the best way to diagnose it is via opencore's debug build and checking the logs whether opencore actually loaded, and if so what is it getting stuck on.\n\nsituations where opencore did not load:\n\n * if there are no logs present even after setting up the debug version of opencore with target set to 67, there's likely an issue either with:\n   * incorrect usb folder structure\n     * see booting opencore reboots to bios for more info\n   * firmware does not support uefi\n     * you'll need to setup duetpkg, this is covered in both the macos and windows install pages\n\nsituations where opencore did load:\n\n * check the last line printed in your logs, there will likely be either a .efi driver that's been loaded or some form of assert\n   * for assert's, you'll want to actually inform the developers about this issue here: acidanthera's bugtracker\n   * for .efi drivers getting stuck, check over the following:\n     * hfsplus.efi load issues:\n       * try using hfspluslegacy.efi instead\n       * this is recommended for cpus that do not support rdrand, mainly relevant for 3rd gen ivy bridge i3 and older\n       * vboxhfs.efi is another option however is much slower than hfsplus's version\n     * hiidatabase.efi load issues:\n       * likely your firmware already supports hiidatabase, so the driver is conflicting. simply remove the driver as you don't need it.\n\n\n# stuck on no vault provided!\n\nturn off vaulting in your config.plist under misc -> security -> vault by setting it to:\n\n * optional\n\nif you have already executed the sign.command you will need to restore the opencore.efi file as the 256 byte rsa-2048 signature has been shoved in. can grab a new copy of opencore.efi here: opencorepkg\n\nnote: vault and filevault are 2 separate things, see security and filevault for more details\n\n\n# stuck on oc: invalid vault mode\n\nthis is likely a spelling mistake, options in opencore are case-sensitive so make sure you check closely, optional is the correct way to enter it under misc -> security -> vault\n\n\n# can't see macos partitions\n\nmain things to check:\n\n * scanpolicy set to 0 to show all drives\n * have the proper firmware drivers such as hfsplus(note apfsdriverloader shouldn't be used in 0.5.8)\n * set unblockfsconnect to true in config.plist -> uefi -> quirks. needed for some hp systems\n * set sata mode: ahci in bios\n * set uefi -> apfs to see apfs based drives:\n   * enablejumpstart: yes\n   * hideverbose: no\n   * if running older versions of high sierra(ie. 10.13.5 or older), set the following:\n     * mindate: -1\n     * minversion: -1\n\n\n# stuck on ocb: ocscanforbootentries failure - not found\n\nthis is due to opencore being unable to find any drives with the current scanpolicy, setting to 0 will allow all boot options to be shown\n\n * misc -> security -> scanpolicy -> 0\n\n\n# stuck on ocb: failed to match a default boot option\n\nsame fix as ocb: ocscanforbootentries failure - not found, opencore is unable to find any drives with the current scanpolicy, setting to 0 will allow all boot options to be shown\n\n * misc -> security -> scanpolicy -> 0\n\n\n# stuck on ocb: system has no boot entries\n\nsame fix as the above 2:\n\n * misc -> security -> scanpolicy -> 0\n\n\n# stuck on ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...\n\nthis is due to either using a clover config with opencore or using a configurator such as mackie's clover and opencore configurator. you'll need to start over and make a new config or figure out all the garbage you need to remove from your config. this is why we don't support configurators, they are known for these issues\n\n * note: these same issues will also occur if you mix outdated configs with newer versions of opencore. please update them accordingly\n\n\n# stuck on oc: driver xxx.efi at 0 cannot be found\n\nthis is due to an entry being in your config.plist, however not present in your efi. to resolve:\n\n * ensure your efi/oc/drivers matches up with your config.plist -> uefi -> drivers\n   * if not, please run cmd/ctrl+r with opencore to re-snapshot your config.plist\n\nnote that the entries are case-sensitive.\n\n\n# receiving \"failed to parse real field of type 1\"\n\nthis is due to a value set as real when it's not supposed to be, generally being that xcode converted haltlevel by accident:\n\n<key>haltlevel</key>\n <real>2147483648</real>\n\n\nto fix, swap real for integer:\n\n<key>haltlevel</key>\n <integer>2147483648</integer>\n\n\n\n# can't select anything in the picker\n\nthis is due to either a few things\n\n * incompatible keyboard driver:\n   \n   * disable pollapplehotkeys and enable keysupport, then remove openusbkbdxe from your config.plist -> uefi -> drivers\n   * if the above doesn't work, reverse: disable keysupport, then add openusbkbdxe to your config.plist -> uefi -> drivers\n\n * missing ps2 keyboard driver(ignore if using a usb keyboard):\n   \n   * while most firmwares will include it by default, some laptops and older pcs may still need ps2keyboarddxe.efi to function correctly. remember to add this to your config.plist as well\n\n\n# ssdts not being added\n\nso with opencore, there's some extra security checks added around acpi files, specifically that table length header must equal to the file size. this is actually the fault of iasl when you compiled the file. example of how to find it:\n\n* original table header:\n*     signature        \"ssdt\"\n*     length           0x0000015d (349)\n*     revision         0x02\n*     checksum         0xcf\n*     oem id           \"acdt\"\n*     oem table id     \"ssdtec\"\n*     oem revision     0x00001000 (4096)\n*     compiler id      \"intl\"\n*     compiler version 0x20190509 (538510601)\n\n\nthe length and checksum value is what we care about, so if our ssdt is actually 347 bytes then we want to change length to 0x0000015b (347)(the 015b is in hex)\n\nbest way to actually fix this is to grab a newer copy of iasl or acidanthera's copy of maciasl and remaking the ssdt\n\n * note: maciasl distributed by rehabman are prone to acpi corruption, please avoid it as they no longer maintain their repos\n\n\n# booting opencore reboots to bios\n\n * incorrect efi folder structure, make sure all of your oc files are within an efi folder located on your esp(efi system partition)\n\nexample of folder structure\n\n\n\n\n# ocabc: incompatible openruntime r4, require r10\n\noutdated openruntime.efi, make sure bootx64.efi, opencore.efi and openruntime are all from the same exact build. anything mismatched will break booting\n\n * note: fwruntimeservices has been renamed to openruntime with 0.5.7 and newer\n\n\n# failed to open opencore image - access denied\n\non newer microsoft surface device firmwares, loading opencore will now result in a security violation even when secure boot is disabled. to resolve this, enable uefi -> quirks -> disablesecuritypolicy in your config.plist. see here for more info: failed to open opencore image - access denied #1446\n\n\n# oc: failed to find sb model disable halting on critical error\n\nthis is a typo, ensure that in your config.plist misc -> security -> securebootmodel is set to disabled\n\n\n# legacy boot stuck on boot fail!\n\nthis error means that efi/oc/opencore.efi could not be found on any partition. double check that the efi folder structure is correct.\n\nexample of folder structure\n\n",charsets:{}},{title:"Post-Install Issues",frontmatter:{},regularPath:"/troubleshooting/extended/post-issues.html",relativePath:"troubleshooting/extended/post-issues.md",key:"v-457daeed",path:"/troubleshooting/extended/post-issues.html",headers:[{level:2,title:"Broken iMessage and Siri",slug:"broken-imessage-and-siri",normalizedTitle:"broken imessage and siri",charIndex:84},{level:2,title:"No on-board audio",slug:"no-on-board-audio",normalizedTitle:"no on-board audio",charIndex:112},{level:2,title:"BIOS reset or sent into Safemode after reboot/shutdown",slug:"bios-reset-or-sent-into-safemode-after-reboot-shutdown",normalizedTitle:"bios reset or sent into safemode after reboot/shutdown",charIndex:133},{level:2,title:"Synaptics PS2 based trackpad doesn't work",slug:"synaptics-ps2-based-trackpad-doesn-t-work",normalizedTitle:"synaptics ps2 based trackpad doesn't work",charIndex:191},{level:2,title:"Fix for Dell breakless PS2 keyboard keys",slug:"fix-for-dell-breakless-ps2-keyboard-keys",normalizedTitle:"fix for dell breakless ps2 keyboard keys",charIndex:236},{level:2,title:"macOS GPU acceleration missing on AMD X570",slug:"macos-gpu-acceleration-missing-on-amd-x570",normalizedTitle:"macos gpu acceleration missing on amd x570",charIndex:280},{level:2,title:"DRM Broken",slug:"drm-broken",normalizedTitle:"drm broken",charIndex:326},{level:2,title:'"Memory Modules Misconfigured" on MacPro7,1',slug:"memory-modules-misconfigured-on-macpro7-1",normalizedTitle:"&quot;memory modules misconfigured&quot; on macpro7,1",charIndex:null},{level:2,title:"Apps crashing on AMD",slug:"apps-crashing-on-amd",normalizedTitle:"apps crashing on amd",charIndex:387},{level:2,title:"Sleep crashing on AMD",slug:"sleep-crashing-on-amd",normalizedTitle:"sleep crashing on amd",charIndex:411},{level:2,title:"AssetCache Content Caching unavailable in virtual machine",slug:"assetcache-content-caching-unavailable-in-virtual-machine",normalizedTitle:"assetcache content caching unavailable in virtual machine",charIndex:436},{level:2,title:"Coffee Lake systems failing to wake",slug:"coffee-lake-systems-failing-to-wake",normalizedTitle:"coffee lake systems failing to wake",charIndex:497},{level:2,title:"No brightness control on Dual GPU laptops",slug:"no-brightness-control-on-dual-gpu-laptops",normalizedTitle:"no brightness control on dual gpu laptops",charIndex:536},{level:2,title:"No temperature/fan sensor output",slug:"no-temperature-fan-sensor-output",normalizedTitle:"no temperature/fan sensor output",charIndex:581},{level:2,title:'"You can\'t change the startup disk to the selected disk" error',slug:"you-can-t-change-the-startup-disk-to-the-selected-disk-error",normalizedTitle:"&quot;you can't change the startup disk to the selected disk&quot; error",charIndex:null},{level:2,title:"Selecting Startup Disk doesn't apply correctly",slug:"selecting-startup-disk-doesn-t-apply-correctly",normalizedTitle:"selecting startup disk doesn't apply correctly",charIndex:683},{level:2,title:"macOS waking up with the wrong time",slug:"macos-waking-up-with-the-wrong-time",normalizedTitle:"macos waking up with the wrong time",charIndex:733},{level:2,title:"No Volume/Brightness control on external monitors",slug:"no-volume-brightness-control-on-external-monitors",normalizedTitle:"no volume/brightness control on external monitors",charIndex:772},{level:2,title:"Time inconsistency between macOS and Windows",slug:"time-inconsistency-between-macos-and-windows",normalizedTitle:"time inconsistency between macos and windows",charIndex:825},{level:2,title:"Disabling SIP",slug:"disabling-sip",normalizedTitle:"disabling sip",charIndex:873},{level:2,title:"Writing to the macOS system partition",slug:"writing-to-the-macos-system-partition",normalizedTitle:"writing to the macos system partition",charIndex:890},{level:2,title:"Rolling back APFS Snapshots",slug:"rolling-back-apfs-snapshots",normalizedTitle:"rolling back apfs snapshots",charIndex:931},{level:2,title:"Apple Watch Unlock issues",slug:"apple-watch-unlock-issues",normalizedTitle:"apple watch unlock issues",charIndex:962},{level:2,title:"4K iGPU output issues over HDMI",slug:"_4k-igpu-output-issues-over-hdmi",normalizedTitle:"4k igpu output issues over hdmi",charIndex:991}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:'Broken iMessage and Siri No on-board audio BIOS reset or sent into Safemode after reboot/shutdown Synaptics PS2 based trackpad doesn\'t work Fix for Dell breakless PS2 keyboard keys macOS GPU acceleration missing on AMD X570 DRM Broken "Memory Modules Misconfigured" on MacPro7,1 Apps crashing on AMD Sleep crashing on AMD AssetCache Content Caching unavailable in virtual machine Coffee Lake systems failing to wake No brightness control on Dual GPU laptops No temperature/fan sensor output "You can\'t change the startup disk to the selected disk" error Selecting Startup Disk doesn\'t apply correctly macOS waking up with the wrong time No Volume/Brightness control on external monitors Time inconsistency between macOS and Windows Disabling SIP Writing to the macOS system partition Rolling back APFS Snapshots Apple Watch Unlock issues 4K iGPU output issues over HDMI',content:"# Post-Install Issues\n\nIssues revolving around macOS once properly installed.\n\n\n\n * Broken iMessage and Siri\n * No on-board audio\n * BIOS reset or sent into Safemode after reboot/shutdown\n * Synaptics PS2 based trackpad doesn't work\n * Fix for Dell breakless PS2 keyboard keys\n * macOS GPU acceleration missing on AMD X570\n * DRM Broken\n * \"Memory Modules Misconfigured\" on MacPro7,1\n * Apps crashing on AMD\n * Sleep crashing on AMD\n * AssetCache Content Caching unavailable in virtual machine\n * Coffee Lake systems failing to wake\n * No brightness control on Dual GPU laptops\n * No temperature/fan sensor output\n * \"You can't change the startup disk to the selected disk\" error\n * Selecting Startup Disk doesn't apply correctly\n * macOS waking up with the wrong time\n * No Volume/Brightness control on external monitors\n * Time inconsistency between macOS and Windows\n * Disabling SIP\n * Writing to the macOS system partition\n * Rolling back APFS Snapshots\n * Apple Watch Unlock issues\n * 4K iGPU output issues over HDMI\n\n\n\n\n# Broken iMessage and Siri\n\nRefer to Fixing iServices section\n\n\n# No on-board audio\n\nRefer to Fixing Audio with AppleALC section\n\n\n# BIOS reset or sent into Safemode after reboot/shutdown\n\nRefer to Fixing RTC/CMOS Resets section\n\n\n# Synaptics PS2 based trackpad doesn't work\n\nYou can try to use SSDT-Enable_DynamicEWMode.dsl. First, you have to open Device Manager, and head to the following:\n\nDevice Manager -> Mice and other pointing devices -> Double click on your trackpad -> Properties -> Details > BIOS device name\n\n\nThen grab SSDT-Enable_DynamicEWMode.dsl By default, this uses PCI0.LPCB.PS2K for the pathing. you'll want to rename accordingly.\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- Rename this\n\n    Name(_SB.PCI0.LPCB.PS2K.RMCF, Package()  <- Rename this\n\n\n\nThen compile with MaciASL, copy to your OC/ACPI folder, and add it to your config, and you should be good to go.\n\n * Note: Although this will work for most cases, the trackpad may be laggy and you may not be able to use the physical buttons (more details). If you can live without the trackpad, this may be better:\n\nFind the ACPI path of your mouse (see above), then grab SSDT-DisableTrackpadProbe.dsl. By default, this uses PCI0.LPCB.PS2K so you have to change that to your ACPI path if necessary:\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- Rename this\n\n    Name(_SB.PCI0.LPCB.PS2K.RMCF, Package() <- Rename this\n\n\n\n# Fix for Dell breakless PS2 keyboard keys\n\nFor those with issues surrounding key presses not releasing(ie. pressing infinitely), you'll want to enable VoodooPS2's Dell profile.\n\nFirst of all, you need to find the path to your ACPI keyboard object in the Device Manager:\n\nDevice Manager -> Keyboards -> Double click on your keyboard -> Properties -> Details > BIOS device name\n\n\nAfter this, grab SSDT-KEY-DELL-WN09.dsl and change the ACPI path to the one found above as needed:\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- Rename this\n\n    Method(_SB.PCI0.LPCB.PS2K._DSM, 4) <- Rename this\n\n\n\n# macOS GPU acceleration missing on AMD X570\n\nVerify the following:\n\n * GPU is UEFI capable(GTX 7XX/2013+)\n * CSM is off in the BIOS\n * Forcing PCIe 3.0 link speed\n\n\n# DRM Broken\n\nRefer to Fixing DRM section\n\n\n# \"Memory Modules Misconfigured\" on MacPro7,1\n\nFollow guide listed here:\n\n * Fixing MacPro7,1 Memory Errors\n\nFor those who simply want to disable the notification(not the error itself) is more than enough. For these users, we recommend installing RestrictEvents\n\n\n# Apps crashing on AMD\n\nEasy fix, buy Intel\n\nSo with AMD, whenever Apple calls CPU specific functions the app will either not work or outright crash. Here are some apps and their \"fixes\":\n\n * Adobe Products don't always work\n   * Some fixes can be found here: Adobe Fixes\n   * Do note these fixes just disables functionality, they're not really fixes\n * Virtual Machine running off of AppleHV's framework will not work(ie: Parallels 15, VMware)\n   * VirtualBox works fine as it doesn't use AppleHV\n   * VMware 10 and older can work as well\n   * Parallels 13.1.0 and older are known to work as well\n * Docker broken\n   * Docker toolbox is the only solution as it's based off of VirtualBox, many features are unavailable with this version\n * IDA Pro won't install\n   * There's an Intel specific check in the installer, app itself is likely fine\n * 15/16h CPU web pages crashing\n   * Follow directions here after UPDATE 5: Fix web pages\n\n\n# Sleep crashing on AMD\n\nThis is generally seen on AMD who use the chipset's USB controller, specifically for the Ryzen series and newer. The main way to tell if you're having issues with this is checking logs after either sleeping or waking:\n\n * In terminal:\n   * log show --last 1d | grep -i \"Wake reason\"\n\nShould result in something like this:\n\nSleep transition timed out after 180 seconds while calling power state change callbacks. Suspected bundle: com.apple.iokit.IOUSBHostFamily.\n\n\nYou can double check which controller is XHC0 via IOReg and checking the Vendor ID(1022 for AMD chipset). The fix for this sleep issue is either:\n\n * Avoid the chipset USB all together(ideally set _STA = 0x0 to disable the controller outright with an SSDT)\n * Correct the USBX power properties to what the controller expects\n\n\n# AssetCache Content Caching unavailable in virtual machine\n\nErrors such as:\n\n$ sudo AssetCacheManagerUtil activate\nAssetCacheManagerUtil[] Failed to activate content caching: Error Domain=ACSMErrorDomain Code=5 \"virtual machine\"...\n\n\narise due to VMM flag being exposed by sysctl.\n\nApply VmAssetCacheEnable kernel patch to disguise the flag and allow normal operation.\n\n\n# Coffee Lake systems failing to wake\n\nIn macOS 10.15.4, there were some changes made to AGPM that can cause wake issues on Coffee Lake systems. Specifically displays hooked up to the iGPU would fail to wake. To resolve this:\n\n * Add igfxonln=1 to boot-args\n * Make sure you're using WhateverGreen v1.3.8 or newer\n\n\n# No brightness control on Dual GPU laptops\n\nIn macOS 11.3, there were some changes made to backlight controlling mechanisms that defaults the backlight to be controlled by the dGPU on Dual GPU laptops with MUX enabled. Optimus only laptops, however, are not affected, since you need to disable the dGPU anyways. Specifically, this problem only causes issues if you have a Dual GPU laptop with the internal screen from an iGPU output and external screens from dGPU outputs (Hybrid Mode on some Mobile Workstations). To resolve this, you may disable either the iGPU or the dGPU, or do the following:\n\n * Verify SSDT-PNLF is installed(ie. EFI/OC/ACPI as well as config.plist -> ACPI -> Add)\n\n * Add below to PciRoot(0x0)/Pci(0x2,0x0):\n\n@0,backlight-control | Data | 01000000\n\napplbkl | Data | 01000000\n\nAAPL,backlight-control | Data | 01000000\n\nAAPL00,backlight-control | Data | 01000000\n\n * Add below to your dGPU PCI address:\n\n@0,backlight-control | Data | 00000000\n\napplbkl | Data | 00000000\n\nAAPL,backlight-control | Data | 00000000\n\n\n# No temperature/fan sensor output\n\nSo couple things:\n\n * iStat Menus doesn't yet support MacPro7,1 readouts\n * VirtualSMC's bundled sensors do not support AMD\n\nFor iStat, you'll have to wait for an update. For AMD users, you can use either:\n\n * SMCAMDProcessor\n   * Still in early beta but great work has been done, note it's been mainly tested on Ryzen\n * FakeSMC3_with_plugins\n\nNote for AMD with FakeSMC:\n\n * FileVault support requires more work with FakeSMC\n * Make sure no other SMC kexts are present, specifically those from VirtualSMC\n\n\n# \"You can't change the startup disk to the selected disk\" error\n\nThis is commonly caused by irregular partition setup of the Windows drive, specifically that the EFI is not the first partition. To fix this, we need to enable this quirk:\n\n * PlatformInfo -> Generic -> AdviseFeatures -> True\n\n\n\n\n# Selecting Startup Disk doesn't apply correctly\n\nIf you're having issues with Startup Disk correctly applying your new boot entry, this is most likely caused by a missing DevicePathsSupported in your I/O Registry. To resolve this, ensure you are using PlatformInfo -> Automatic -> True\n\nExample of missing DevicePathsSupported:\n\n * Default DevicePath match failure due to different PciRoot #664\n\n\n# macOS waking up with the wrong time\n\nAn odd quirk some people may notice is that from wake, macOS will have the incorrect time for a bit before self-correcting with network time check. The root cause of this issue is most likely due to your RTC not ticking, and can be resolved with a new CMOS battery(note that Z270 and newer are quite picky with voltage so choose carefully).\n\nTo verify whether your RTC is working correctly:\n\n * Download VirtualSMC v1.1.5+ and run the smcread tool:\n\n/path/to/smcread -s | grep CLKT\n\n\n\n\nThis should provide you with a hexadecimal value, and once converted it should equal time elapsed from Midnight relative to Cupertino.\n\nSo for this example, we'll grab our value(00010D13) then convert it to decimal and finally divide it by 3600. This should result in the approximate time elapsed(in seconds) since midnight relative to Cupertino\n\n * 00010D13 (Convert to HEX)-> 68883 (Divided by 3600 so we get hours)-> 19.13h(so 19:07:48)\n\nNext you'll want to put your hack to sleep for a bit and wake it, then check the CLKT value once more to see whether it deviated more or if it has a set difference. If you find it didn't actually tick much of at all from the elapsed time, you'll need to look into buying a new battery(with proper voltage)\n\n\n# No Volume/Brightness control on external monitors\n\nOddly enough, macOS has locked down digital audio from having control. To bring back some functionality, the app MonitorControl has done great work on improving support in macOS\n\n\n# Time inconsistency between macOS and Windows\n\nThis is due to macOS using Universal Time while Windows relies on Greenwich time, so you'll need to force one OS to a different way of measuring time. We highly recommend modifying Windows instead as it's far less destructive and painful:\n\n * Install Bootcamp utilities\n * Modify Windows' registry\n\n\n# Disabling SIP\n\nSIP or more properly known as System Integrity Protection, is a security technology that attempts to prevent any malicious software and the end user from damaging the OS. First introduced with OS X El Capitan, SIP has grown over time to control more and more things in macOS, including limiting edits to restricted file locations and 3rd party kext loading with kextload(OpenCore is unaffected as kexts are injected at boot). To resolve this, Apple has provided numerous configuration options in the NVRAM variable csr-active-config which can either be set in the macOS recovery environment or with OpenCore's NVRAM section(The latter will be discussed below).\n\n * WARNING: Disabling SIP can break OS functionality such as software updates in macOS 11, Big Sur and newer. Please be careful to only disable specific SIP values instead of disabling SIP outright to avoid these issues.\n   * Enabling CSR_ALLOW_UNAUTHENTICATED_ROOT and CSR_ALLOW_APPLE_INTERNAL are common options that can break OS updates for users\n\nYou can choose different values to enable or disable certain flags of SIP. Some useful tools to help you with these are BitmaskDecode and csrstat. Common values are as follows (bytes are pre-hex swapped for you, and note that they go under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config):\n\n * 00000000 - SIP completely enabled (0x0).\n * 03000000 - Disable kext signing (0x1) and filesystem protections (0x2).\n * FF030000 - Disable all flags in macOS High Sierra (0x3ff).\n * FF070000 - Disable all flags in macOS Mojave and in macOS Catalina (0x7ff) as Apple introduced a value for executable policy.\n * FF0F0000 - Disable all flags in macOS Big Sur (0xfff) which has another new flag for authenticated root.\n\nNote: Disabling SIP with OpenCore is quite a bit different compared to Clover, specifically that NVRAM variables will not be overwritten unless explicitly told so under the Delete section. So if you've already set SIP once either via OpenCore or in macOS, you must override the variable:\n\n * NVRAM -> Delete -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config\n\n\n\n\n# Writing to the macOS system partition\n\nWith macOS Catalina and newer, Apple split the OS and user data into 2 volumes where the system volume is read-only by default. To make these drives writable we'll need to do a few things:\n\n * Note: Users of SecureBootModel may end up in a RecoveryOS boot loop if the system partition has been modified. To resolve this, Reset NVRAM and set SecureBootModel to Disabled\n\nmacOS Catalina\n\n 1. Disable SIP\n 2. Mount drive as writable (Run sudo mount -uw / in terminal)\n\nmacOS Big Sur\n\n 1. Disable SIP\n 2. Mount drive as writable (See below link for command)\n\n * Note: Due to how OS updates work in macOS Big Sur and newer, changing the system volume can in fact break OS updates. Please edit with caution\n\nCommands based off of Apple's KDK documents:\n\n# First, create a mount point for your drive\nmkdir ~/livemount\n\n# Next, find your System volume\ndiskutil list\n\n# From the below list, we can see our System volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# Now you can freely make any edits to the System volume\n\n# If you edited either the S*/L*/Kernel, S*/L*/Extensions or L*/Extensions,\n# you will need to rebuild the kernel cache\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# Finally, once done editing the system volume we'll want to create a new snapshot\nsudo bless --folder ~/livemount/System/Library/CoreServices --bootefi --create-snapshot\n\n\n\n# Rolling back APFS Snapshots\n\nWith macOS Big Sur, the system volume is now snapshotted allowing you to roll back in case of issues with system updates breaking due to a broken seal. Thanks to new snapshots being created with every OS update, we've got quite a bit to roll back too.\n\nTo roll back, you'll first need to reboot into Recovery partition then select \"Restore From Time Machine Backup\":\n\n\n\n * Credit to Lifewire for image\n\n\n# Apple Watch Unlock issues\n\nFor those with Apple Watch Unlock issues, verify the following:\n\n * You have a supported Apple Wireless card with Bluetooth Low Energy(4.0+)\n * Your watch and Mac are signed in with the same account\n * iServices working correctly(ie. iMessage)\n * There's an option to Unlock with Apple Watch under Security and Privacy setting in System Preferences\n\n\n\nIf the above are met, and you still have unlock issues we recommend running through the below guide:\n\n * Fixing Auto Unlock\n\n\n# 4K iGPU output issues over HDMI\n\nFor machines with HDMI 2.0 capable ports with resolution issues, verify the following:\n\n * 4k output works correctly in Windows\n * Monitor is set explicitly to HDMI 2.0\n   * If using an HDMI to DisplayPort converter, ensure the monitor is set to DisplayPort 1.2 or higher\n * Ensure enough iGPU memory has been allocated\n   * For Broadwell and newer, 64MB is expected to be allocated\n   * Machines relying on WhateverGreen's framebuffer-stolenmem property should know this can cause 4k output issues. Please ensure you can set the iGPU's memory to 64MB allowing you to remove these properties\n * Laptops and many desktop users may need this boot-arg:\n   * -cdfon\n\nFor all other troubleshooting, please reference WhateverGreen's Intel docs",normalizedContent:"# post-install issues\n\nissues revolving around macos once properly installed.\n\n\n\n * broken imessage and siri\n * no on-board audio\n * bios reset or sent into safemode after reboot/shutdown\n * synaptics ps2 based trackpad doesn't work\n * fix for dell breakless ps2 keyboard keys\n * macos gpu acceleration missing on amd x570\n * drm broken\n * \"memory modules misconfigured\" on macpro7,1\n * apps crashing on amd\n * sleep crashing on amd\n * assetcache content caching unavailable in virtual machine\n * coffee lake systems failing to wake\n * no brightness control on dual gpu laptops\n * no temperature/fan sensor output\n * \"you can't change the startup disk to the selected disk\" error\n * selecting startup disk doesn't apply correctly\n * macos waking up with the wrong time\n * no volume/brightness control on external monitors\n * time inconsistency between macos and windows\n * disabling sip\n * writing to the macos system partition\n * rolling back apfs snapshots\n * apple watch unlock issues\n * 4k igpu output issues over hdmi\n\n\n\n\n# broken imessage and siri\n\nrefer to fixing iservices section\n\n\n# no on-board audio\n\nrefer to fixing audio with applealc section\n\n\n# bios reset or sent into safemode after reboot/shutdown\n\nrefer to fixing rtc/cmos resets section\n\n\n# synaptics ps2 based trackpad doesn't work\n\nyou can try to use ssdt-enable_dynamicewmode.dsl. first, you have to open device manager, and head to the following:\n\ndevice manager -> mice and other pointing devices -> double click on your trackpad -> properties -> details > bios device name\n\n\nthen grab ssdt-enable_dynamicewmode.dsl by default, this uses pci0.lpcb.ps2k for the pathing. you'll want to rename accordingly.\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- rename this\n\n    name(_sb.pci0.lpcb.ps2k.rmcf, package()  <- rename this\n\n\n\nthen compile with maciasl, copy to your oc/acpi folder, and add it to your config, and you should be good to go.\n\n * note: although this will work for most cases, the trackpad may be laggy and you may not be able to use the physical buttons (more details). if you can live without the trackpad, this may be better:\n\nfind the acpi path of your mouse (see above), then grab ssdt-disabletrackpadprobe.dsl. by default, this uses pci0.lpcb.ps2k so you have to change that to your acpi path if necessary:\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- rename this\n\n    name(_sb.pci0.lpcb.ps2k.rmcf, package() <- rename this\n\n\n\n# fix for dell breakless ps2 keyboard keys\n\nfor those with issues surrounding key presses not releasing(ie. pressing infinitely), you'll want to enable voodoops2's dell profile.\n\nfirst of all, you need to find the path to your acpi keyboard object in the device manager:\n\ndevice manager -> keyboards -> double click on your keyboard -> properties -> details > bios device name\n\n\nafter this, grab ssdt-key-dell-wn09.dsl and change the acpi path to the one found above as needed:\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- rename this\n\n    method(_sb.pci0.lpcb.ps2k._dsm, 4) <- rename this\n\n\n\n# macos gpu acceleration missing on amd x570\n\nverify the following:\n\n * gpu is uefi capable(gtx 7xx/2013+)\n * csm is off in the bios\n * forcing pcie 3.0 link speed\n\n\n# drm broken\n\nrefer to fixing drm section\n\n\n# \"memory modules misconfigured\" on macpro7,1\n\nfollow guide listed here:\n\n * fixing macpro7,1 memory errors\n\nfor those who simply want to disable the notification(not the error itself) is more than enough. for these users, we recommend installing restrictevents\n\n\n# apps crashing on amd\n\neasy fix, buy intel\n\nso with amd, whenever apple calls cpu specific functions the app will either not work or outright crash. here are some apps and their \"fixes\":\n\n * adobe products don't always work\n   * some fixes can be found here: adobe fixes\n   * do note these fixes just disables functionality, they're not really fixes\n * virtual machine running off of applehv's framework will not work(ie: parallels 15, vmware)\n   * virtualbox works fine as it doesn't use applehv\n   * vmware 10 and older can work as well\n   * parallels 13.1.0 and older are known to work as well\n * docker broken\n   * docker toolbox is the only solution as it's based off of virtualbox, many features are unavailable with this version\n * ida pro won't install\n   * there's an intel specific check in the installer, app itself is likely fine\n * 15/16h cpu web pages crashing\n   * follow directions here after update 5: fix web pages\n\n\n# sleep crashing on amd\n\nthis is generally seen on amd who use the chipset's usb controller, specifically for the ryzen series and newer. the main way to tell if you're having issues with this is checking logs after either sleeping or waking:\n\n * in terminal:\n   * log show --last 1d | grep -i \"wake reason\"\n\nshould result in something like this:\n\nsleep transition timed out after 180 seconds while calling power state change callbacks. suspected bundle: com.apple.iokit.iousbhostfamily.\n\n\nyou can double check which controller is xhc0 via ioreg and checking the vendor id(1022 for amd chipset). the fix for this sleep issue is either:\n\n * avoid the chipset usb all together(ideally set _sta = 0x0 to disable the controller outright with an ssdt)\n * correct the usbx power properties to what the controller expects\n\n\n# assetcache content caching unavailable in virtual machine\n\nerrors such as:\n\n$ sudo assetcachemanagerutil activate\nassetcachemanagerutil[] failed to activate content caching: error domain=acsmerrordomain code=5 \"virtual machine\"...\n\n\narise due to vmm flag being exposed by sysctl.\n\napply vmassetcacheenable kernel patch to disguise the flag and allow normal operation.\n\n\n# coffee lake systems failing to wake\n\nin macos 10.15.4, there were some changes made to agpm that can cause wake issues on coffee lake systems. specifically displays hooked up to the igpu would fail to wake. to resolve this:\n\n * add igfxonln=1 to boot-args\n * make sure you're using whatevergreen v1.3.8 or newer\n\n\n# no brightness control on dual gpu laptops\n\nin macos 11.3, there were some changes made to backlight controlling mechanisms that defaults the backlight to be controlled by the dgpu on dual gpu laptops with mux enabled. optimus only laptops, however, are not affected, since you need to disable the dgpu anyways. specifically, this problem only causes issues if you have a dual gpu laptop with the internal screen from an igpu output and external screens from dgpu outputs (hybrid mode on some mobile workstations). to resolve this, you may disable either the igpu or the dgpu, or do the following:\n\n * verify ssdt-pnlf is installed(ie. efi/oc/acpi as well as config.plist -> acpi -> add)\n\n * add below to pciroot(0x0)/pci(0x2,0x0):\n\n@0,backlight-control | data | 01000000\n\napplbkl | data | 01000000\n\naapl,backlight-control | data | 01000000\n\naapl00,backlight-control | data | 01000000\n\n * add below to your dgpu pci address:\n\n@0,backlight-control | data | 00000000\n\napplbkl | data | 00000000\n\naapl,backlight-control | data | 00000000\n\n\n# no temperature/fan sensor output\n\nso couple things:\n\n * istat menus doesn't yet support macpro7,1 readouts\n * virtualsmc's bundled sensors do not support amd\n\nfor istat, you'll have to wait for an update. for amd users, you can use either:\n\n * smcamdprocessor\n   * still in early beta but great work has been done, note it's been mainly tested on ryzen\n * fakesmc3_with_plugins\n\nnote for amd with fakesmc:\n\n * filevault support requires more work with fakesmc\n * make sure no other smc kexts are present, specifically those from virtualsmc\n\n\n# \"you can't change the startup disk to the selected disk\" error\n\nthis is commonly caused by irregular partition setup of the windows drive, specifically that the efi is not the first partition. to fix this, we need to enable this quirk:\n\n * platforminfo -> generic -> advisefeatures -> true\n\n\n\n\n# selecting startup disk doesn't apply correctly\n\nif you're having issues with startup disk correctly applying your new boot entry, this is most likely caused by a missing devicepathssupported in your i/o registry. to resolve this, ensure you are using platforminfo -> automatic -> true\n\nexample of missing devicepathssupported:\n\n * default devicepath match failure due to different pciroot #664\n\n\n# macos waking up with the wrong time\n\nan odd quirk some people may notice is that from wake, macos will have the incorrect time for a bit before self-correcting with network time check. the root cause of this issue is most likely due to your rtc not ticking, and can be resolved with a new cmos battery(note that z270 and newer are quite picky with voltage so choose carefully).\n\nto verify whether your rtc is working correctly:\n\n * download virtualsmc v1.1.5+ and run the smcread tool:\n\n/path/to/smcread -s | grep clkt\n\n\n\n\nthis should provide you with a hexadecimal value, and once converted it should equal time elapsed from midnight relative to cupertino.\n\nso for this example, we'll grab our value(00010d13) then convert it to decimal and finally divide it by 3600. this should result in the approximate time elapsed(in seconds) since midnight relative to cupertino\n\n * 00010d13 (convert to hex)-> 68883 (divided by 3600 so we get hours)-> 19.13h(so 19:07:48)\n\nnext you'll want to put your hack to sleep for a bit and wake it, then check the clkt value once more to see whether it deviated more or if it has a set difference. if you find it didn't actually tick much of at all from the elapsed time, you'll need to look into buying a new battery(with proper voltage)\n\n\n# no volume/brightness control on external monitors\n\noddly enough, macos has locked down digital audio from having control. to bring back some functionality, the app monitorcontrol has done great work on improving support in macos\n\n\n# time inconsistency between macos and windows\n\nthis is due to macos using universal time while windows relies on greenwich time, so you'll need to force one os to a different way of measuring time. we highly recommend modifying windows instead as it's far less destructive and painful:\n\n * install bootcamp utilities\n * modify windows' registry\n\n\n# disabling sip\n\nsip or more properly known as system integrity protection, is a security technology that attempts to prevent any malicious software and the end user from damaging the os. first introduced with os x el capitan, sip has grown over time to control more and more things in macos, including limiting edits to restricted file locations and 3rd party kext loading with kextload(opencore is unaffected as kexts are injected at boot). to resolve this, apple has provided numerous configuration options in the nvram variable csr-active-config which can either be set in the macos recovery environment or with opencore's nvram section(the latter will be discussed below).\n\n * warning: disabling sip can break os functionality such as software updates in macos 11, big sur and newer. please be careful to only disable specific sip values instead of disabling sip outright to avoid these issues.\n   * enabling csr_allow_unauthenticated_root and csr_allow_apple_internal are common options that can break os updates for users\n\nyou can choose different values to enable or disable certain flags of sip. some useful tools to help you with these are bitmaskdecode and csrstat. common values are as follows (bytes are pre-hex swapped for you, and note that they go under nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config):\n\n * 00000000 - sip completely enabled (0x0).\n * 03000000 - disable kext signing (0x1) and filesystem protections (0x2).\n * ff030000 - disable all flags in macos high sierra (0x3ff).\n * ff070000 - disable all flags in macos mojave and in macos catalina (0x7ff) as apple introduced a value for executable policy.\n * ff0f0000 - disable all flags in macos big sur (0xfff) which has another new flag for authenticated root.\n\nnote: disabling sip with opencore is quite a bit different compared to clover, specifically that nvram variables will not be overwritten unless explicitly told so under the delete section. so if you've already set sip once either via opencore or in macos, you must override the variable:\n\n * nvram -> delete -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config\n\n\n\n\n# writing to the macos system partition\n\nwith macos catalina and newer, apple split the os and user data into 2 volumes where the system volume is read-only by default. to make these drives writable we'll need to do a few things:\n\n * note: users of securebootmodel may end up in a recoveryos boot loop if the system partition has been modified. to resolve this, reset nvram and set securebootmodel to disabled\n\nmacos catalina\n\n 1. disable sip\n 2. mount drive as writable (run sudo mount -uw / in terminal)\n\nmacos big sur\n\n 1. disable sip\n 2. mount drive as writable (see below link for command)\n\n * note: due to how os updates work in macos big sur and newer, changing the system volume can in fact break os updates. please edit with caution\n\ncommands based off of apple's kdk documents:\n\n# first, create a mount point for your drive\nmkdir ~/livemount\n\n# next, find your system volume\ndiskutil list\n\n# from the below list, we can see our system volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# now you can freely make any edits to the system volume\n\n# if you edited either the s*/l*/kernel, s*/l*/extensions or l*/extensions,\n# you will need to rebuild the kernel cache\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# finally, once done editing the system volume we'll want to create a new snapshot\nsudo bless --folder ~/livemount/system/library/coreservices --bootefi --create-snapshot\n\n\n\n# rolling back apfs snapshots\n\nwith macos big sur, the system volume is now snapshotted allowing you to roll back in case of issues with system updates breaking due to a broken seal. thanks to new snapshots being created with every os update, we've got quite a bit to roll back too.\n\nto roll back, you'll first need to reboot into recovery partition then select \"restore from time machine backup\":\n\n\n\n * credit to lifewire for image\n\n\n# apple watch unlock issues\n\nfor those with apple watch unlock issues, verify the following:\n\n * you have a supported apple wireless card with bluetooth low energy(4.0+)\n * your watch and mac are signed in with the same account\n * iservices working correctly(ie. imessage)\n * there's an option to unlock with apple watch under security and privacy setting in system preferences\n\n\n\nif the above are met, and you still have unlock issues we recommend running through the below guide:\n\n * fixing auto unlock\n\n\n# 4k igpu output issues over hdmi\n\nfor machines with hdmi 2.0 capable ports with resolution issues, verify the following:\n\n * 4k output works correctly in windows\n * monitor is set explicitly to hdmi 2.0\n   * if using an hdmi to displayport converter, ensure the monitor is set to displayport 1.2 or higher\n * ensure enough igpu memory has been allocated\n   * for broadwell and newer, 64mb is expected to be allocated\n   * machines relying on whatevergreen's framebuffer-stolenmem property should know this can cause 4k output issues. please ensure you can set the igpu's memory to 64mb allowing you to remove these properties\n * laptops and many desktop users may need this boot-arg:\n   * -cdfon\n\nfor all other troubleshooting, please reference whatevergreen's intel docs",charsets:{cjk:!0}},{title:"Userspace Issues",frontmatter:{},regularPath:"/troubleshooting/extended/userspace-issues.html",relativePath:"troubleshooting/extended/userspace-issues.md",key:"v-4e3122ad",path:"/troubleshooting/extended/userspace-issues.html",headers:[{level:2,title:"macOS installer in Russian",slug:"macos-installer-in-russian",normalizedTitle:"macos installer in russian",charIndex:100},{level:2,title:"macOS Installer being damaged",slug:"macos-installer-being-damaged",normalizedTitle:"macos installer being damaged",charIndex:130},{level:2,title:"Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...",slug:"stuck-on-or-near-ioconsoleusers-gioscreenlock-giolockstate-3",normalizedTitle:"stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...",charIndex:163},{level:2,title:"Scrambled Screen on laptops",slug:"scrambled-screen-on-laptops",normalizedTitle:"scrambled screen on laptops",charIndex:235},{level:2,title:"Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs",slug:"black-screen-after-ioconsoleusers-gioscreenlock-on-laptops-and-aios",normalizedTitle:"black screen after ioconsoleusers: gioscreenlock... on laptops and aios",charIndex:266},{level:2,title:"Black screen after IOConsoleUsers: gIOScreenLock... on Navi",slug:"black-screen-after-ioconsoleusers-gioscreenlock-on-navi",normalizedTitle:"black screen after ioconsoleusers: gioscreenlock... on navi",charIndex:341},{level:2,title:"Frozen in the macOS installer after 30 seconds",slug:"frozen-in-the-macos-installer-after-30-seconds",normalizedTitle:"frozen in the macos installer after 30 seconds",charIndex:404},{level:2,title:"15h/16h CPU reboot after Data & Privacy screen",slug:"_15h-16h-cpu-reboot-after-data-privacy-screen",normalizedTitle:"15h/16h cpu reboot after data &amp; privacy screen",charIndex:null},{level:2,title:"macOS frozen right before login",slug:"macos-frozen-right-before-login",normalizedTitle:"macos frozen right before login",charIndex:504},{level:2,title:"MediaKit reports not enough space",slug:"mediakit-reports-not-enough-space",normalizedTitle:"mediakit reports not enough space",charIndex:539},{level:2,title:"DiskUtility failing to erase",slug:"diskutility-failing-to-erase",normalizedTitle:"diskutility failing to erase",charIndex:576},{level:2,title:"SATA Drives Not Shown in DiskUtility",slug:"sata-drives-not-shown-in-diskutility",normalizedTitle:"sata drives not shown in diskutility",charIndex:608},{level:2,title:"Stuck at 2 minutes remaining",slug:"stuck-at-2-minutes-remaining",normalizedTitle:"stuck at 2 minutes remaining",charIndex:648},{level:2,title:"The recovery server cannot get contacted",slug:"the-recovery-server-cannot-get-contacted",normalizedTitle:"the recovery server cannot get contacted",charIndex:680},{level:2,title:"Keyboard and Mouse broken in Big Sur",slug:"keyboard-and-mouse-broken-in-big-sur",normalizedTitle:"keyboard and mouse broken in big sur",charIndex:724},{level:2,title:"Stuck on Your Mac needs a firmware update in order to install to this volume",slug:"stuck-on-your-mac-needs-a-firmware-update-in-order-to-install-to-this-volume",normalizedTitle:"stuck on your mac needs a firmware update in order to install to this volume",charIndex:764}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"macOS installer in Russian macOS Installer being damaged Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3... Scrambled Screen on laptops Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs Black screen after IOConsoleUsers: gIOScreenLock... on Navi Frozen in the macOS installer after 30 seconds 15h/16h CPU reboot after Data & Privacy screen macOS frozen right before login MediaKit reports not enough space DiskUtility failing to erase SATA Drives Not Shown in DiskUtility Stuck at 2 minutes remaining The recovery server cannot get contacted Keyboard and Mouse broken in Big Sur Stuck on Your Mac needs a firmware update in order to install to this volume",content:"# Userspace Issues\n\nIssues regarding once you've booted the installer and the GUI has loaded.\n\n\n\n * macOS installer in Russian\n * macOS Installer being damaged\n * Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n * Scrambled Screen on laptops\n * Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n * Frozen in the macOS installer after 30 seconds\n * 15h/16h CPU reboot after Data & Privacy screen\n * macOS frozen right before login\n * MediaKit reports not enough space\n * DiskUtility failing to erase\n * SATA Drives Not Shown in DiskUtility\n * Stuck at 2 minutes remaining\n * The recovery server cannot get contacted\n * Keyboard and Mouse broken in Big Sur\n * Stuck on Your Mac needs a firmware update in order to install to this volume\n\n\n\n\n# macOS installer in Russian\n\nDefault sample config is in Russian because slavs rule the Hackintosh world, check your prev-lang:kbd value under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82. Set to 656e2d55533a30 for American: en-US:0 and a full list can be found in AppleKeyboardLayouts.txt. For those using with a simple text editor(ie. UEFI Shell, Notepad++, etc), 656e2d55533a30 will become ZW4tVVM6MA==\n\nYou may also need to reset NVRAM in the boot picker as well\n\n * Note: Thinkpad laptops are known to be semi-bricked after an NVRAM reset in OpenCore, we recommend resetting NVRAM by updating the BIOS on these machines.\n\nStill didn't work? Well time for the big guns. We'll force remove that exact property and let OpenCore rebuild it:\n\nNVRAM -> Delete -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> Item 0 then set it Type String and Value prev-lang:kbd\n\n\n\n\n# macOS Installer being damaged\n\nIf you've download macOS before October 2019, you likely have an expired macOS Installer certificate, there's 2 ways to fix this:\n\n * Download newest copy of macOS\n * Change date in terminal to when the certificate was valid\n\nFor the latter:\n\n * Disconnect all networking devices(Ethernet, disable WiFi)\n * In the recovery terminal set to September 1st, 2019:\n\ndate 0901000019\n\n\n\n# Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n\nThis is right before the GPU is properly initialized, verify the following:\n\n * GPU is UEFI capable(GTX 7XX/2013+)\n * CSM is off in the BIOS\n * Forcing PCIe 3.0 link speed\n * Double check that ig-platform-id and device-id are valid if running an iGPU.\n   * Desktop UHD 630's may need to use 00009B3E instead\n * Trying various WhateverGreen Fixes\n   * -igfxmlr boot argument. This can also manifest as a \"Divide by Zero\" error.\n * Coffee Lake iGPU users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# Scrambled Screen on laptops\n\nEnable CSM in your UEFI settings. This may appear as \"Boot legacy ROMs\" or other legacy setting.\n\n\n# Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs\n\nVerify the following:\n\n * SSDT-PNLF is installed(ie. EFI/OC/ACPI as well as config.plist -> ACPI -> Add)\n * iGPU properties were setup correctly under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0)\n * Coffee Lake and newer laptops, add -igfxblr to your boot-args\n   * Alternatively, add enable-backlight-registers-fix | Data | 01000000 to PciRoot(0x0)/Pci(0x2,0x0)\n\nAdditionally, verify issues mentioned in Stuck on or near IOConsoleUsers: gIOScreenLock...\n\n\n# Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n\n * Add agdpmod=pikera to boot args\n * Switch between different display outputs\n * Try running MacPro7,1 SMBIOS with the boot-arg agdpmod=ignore\n\nFor MSI Navi users, you'll need to apply the patch mentioned here: Installer not working with 5700XT #901\n\nSpecifically, add the following entry under Kernel -> Patch:\n\nBase:\nComment: Navi VBIOS Bug Patch\nCount: 1\nEnabled: YES\nFind: 4154592C526F6D2300\nIdentifier: com.apple.kext.AMDRadeonX6000Framebuffer\nLimit: 0\nMask:\nMinKernel:\nMaxKernel:\nReplace: 414D442C526F6D2300\nReplaceMask:\nSkip: 0\n\n\n\n# Frozen in the macOS installer after 30 seconds\n\nThis is likely due to faulty or outright missing NullCPUPowerManagement, the one hosted on AMD OSX's Vanilla Guide is corrupted. Go yell at Shannee to fix it. To fix the issue, remove NullCPUPowerManagement from Kernel -> Add and EFI/OC/Kexts then enable DummyPowerManagement under Kernel -> Emulate\n\n\n# 15h/16h CPU reboot after Data & Privacy screen\n\nFollow directions here after UPDATE 2: Fix Data and Privacy reboot\n\n\n# macOS frozen right before login\n\nThis is a common example of screwed up TSC, for most system add CpuTscSync\n\nFor Skylake-X, many firmwares including Asus and EVGA won't write to all cores. So we'll need to reset the TSC on cold boot and wake with TSCAdjustReset. Compiled version can be found here: TSCAdjustReset.kext. Note that you must open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n\nThe most common way to see the TSC issue:\n\nCASE 1   CASE 2\n         \n\n\n# MediaKit reports not enough space\n\nThis error is due to a small EFI, by default Windows will create a 100MB EFI whereas macOS will expect 200MB. To get around this you have 2 way to go:\n\n * Expand the EFI of the drive to 200MB(See Google on how)\n * Format the entire drive instead of just the partition\n   * Note by default Disk Utility only shows partitions, press Cmd/Win+2 to show all devices(Alternatively you can press the view button)\n\nDEFAULT   SHOW ALL DEVICES(CMD+2)\n          \n\n\n# DiskUtility failing to erase\n\nThis is either 1(or more) of 5 issues:\n\n * Formatting partition and not the drive, see MediaKit reports not enough space\n * DiskUtility has an odd bug where it will fail on first erase, try erasing again\n * SATA Hot-plug support in the BIOS is causing issues(try disabling this option)\n * Old firmware, make sure the drive is on the latest firmware\n * And finally, you may just have a bad drive\n\n\n# SATA Drives Not Shown in DiskUtility\n\n * Make sure SATA Mode is AHCI in bios\n * Certain SATA controllers may not be officially supported by macOS, for these cases you'll want to grab CtlnaAHCIPort.kext\n   * For very legacy SATA controllers, AHCIPortInjector.kext may be more suitable.\n\n\n# Stuck at 2 minutes remaining\n\n\n\nThis error is directly related to the stage at which macOS will write certain NVRAM variables for your system to boot next, and so when there's issues revolving around NVRAM it'll stall here.\n\nTo resolve, we have a few options:\n\n * 300 series Intel Fix(ie. Z390):\n   * SSDT-PMC\n * Others can set the following in their config.plist:\n   * LegacyEnable -> YES\n   * LegacyOverwrite -> YES\n   * WriteFlash -> YES\n\n\n# The recovery server cannot get contacted\n\nIf you made your installer in Windows or Linux, then this means your USB installer is recovery based. What this means is that only a small portion of the macOS installer is on disk while the rest must be downloaded from Apple servers in the installer. And reason we do not include full installer guides is due to unstable HFS drivers and other utilities that commonly end up with data corruption.\n\nTo resolve the error, you have a few options:\n\n * Ensure you have a working Ethernet or WiFi connection\n   * Open Network Utility under Utilties header in the installer and see if your Network Card shows up\n     * If you network card doesn't show up, it's likely you're missing the right Network kext\n       * Please refer here: Ethernet Kexts and Finding your hardware\n     * If the network card does show up, next run ping -c3 www.google.com in the installer's terminal to ensure your network connection is working\n       * If nothing shows, either your network or kexts are acting up\n         * We recommend trying older variants of kexts in cases where newer builds have weird bugs with your hardware\n       * If it does return something, then the issue is on Apple's end. You'll simply need to try to install again another time unfortunately\n\nCHECK NIC   PING\n            \n\n\n# Keyboard and Mouse broken in Big Sur\n\nFor certain legacy systems(ie. Core2 Duo/2010 and older), you may notice that while the USB ports work your HID-based devices such as the keyboard and mouse may be broken. To resolve this, add the following patch:\n\nIOHIDFamily Patch\n\nconfig.plist -> Kernel -> Patch:\n\nKEY           TYPE      VALUE\nBase          String    _isSingleUser\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    com.apple.iokit.IOHIDFamily\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B801000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\nSource\n\n\n# Stuck on Your Mac needs a firmware update in order to install to this volume\n\nIf you're being prompted to update your firmware to install with an APFS volume, this likely indicates an outdated SMBIOS table. First, verify the following:\n\n * You have PlatformInfo -> Automatic enabled\n * UpdateSMBIOSMode is set to Create\n   * Make sure CustomSMBIOSGuid is disabled\n   * For Dell and VAIO machines, ensure that CustomSMBIOSGuid is enabled and UpdateSMBIOSMode is set to Custom instead\n     * CustomSMBIOSGuid and UpdateSMBIOSMode should always be in tandem with each other\n * Using a SMBIOS supported in this version of macOS\n   * ie. you're not using -no_compat_check\n * You're using the latest version of OpenCore\n\nIf you still receive this error, then there's likely some outdated SMBIOS info in OpenCore itself. We recommend changing to a similar SMBIOS and see if this is resolved. For a full list of SMBIOS, see here: Choosing the right SMBIOS",normalizedContent:"# userspace issues\n\nissues regarding once you've booted the installer and the gui has loaded.\n\n\n\n * macos installer in russian\n * macos installer being damaged\n * stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n * scrambled screen on laptops\n * black screen after ioconsoleusers: gioscreenlock... on laptops and aios\n * black screen after ioconsoleusers: gioscreenlock... on navi\n * frozen in the macos installer after 30 seconds\n * 15h/16h cpu reboot after data & privacy screen\n * macos frozen right before login\n * mediakit reports not enough space\n * diskutility failing to erase\n * sata drives not shown in diskutility\n * stuck at 2 minutes remaining\n * the recovery server cannot get contacted\n * keyboard and mouse broken in big sur\n * stuck on your mac needs a firmware update in order to install to this volume\n\n\n\n\n# macos installer in russian\n\ndefault sample config is in russian because slavs rule the hackintosh world, check your prev-lang:kbd value under nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82. set to 656e2d55533a30 for american: en-us:0 and a full list can be found in applekeyboardlayouts.txt. for those using with a simple text editor(ie. uefi shell, notepad++, etc), 656e2d55533a30 will become zw4tvvm6ma==\n\nyou may also need to reset nvram in the boot picker as well\n\n * note: thinkpad laptops are known to be semi-bricked after an nvram reset in opencore, we recommend resetting nvram by updating the bios on these machines.\n\nstill didn't work? well time for the big guns. we'll force remove that exact property and let opencore rebuild it:\n\nnvram -> delete -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> item 0 then set it type string and value prev-lang:kbd\n\n\n\n\n# macos installer being damaged\n\nif you've download macos before october 2019, you likely have an expired macos installer certificate, there's 2 ways to fix this:\n\n * download newest copy of macos\n * change date in terminal to when the certificate was valid\n\nfor the latter:\n\n * disconnect all networking devices(ethernet, disable wifi)\n * in the recovery terminal set to september 1st, 2019:\n\ndate 0901000019\n\n\n\n# stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n\nthis is right before the gpu is properly initialized, verify the following:\n\n * gpu is uefi capable(gtx 7xx/2013+)\n * csm is off in the bios\n * forcing pcie 3.0 link speed\n * double check that ig-platform-id and device-id are valid if running an igpu.\n   * desktop uhd 630's may need to use 00009b3e instead\n * trying various whatevergreen fixes\n   * -igfxmlr boot argument. this can also manifest as a \"divide by zero\" error.\n * coffee lake igpu users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# scrambled screen on laptops\n\nenable csm in your uefi settings. this may appear as \"boot legacy roms\" or other legacy setting.\n\n\n# black screen after ioconsoleusers: gioscreenlock... on laptops and aios\n\nverify the following:\n\n * ssdt-pnlf is installed(ie. efi/oc/acpi as well as config.plist -> acpi -> add)\n * igpu properties were setup correctly under deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0)\n * coffee lake and newer laptops, add -igfxblr to your boot-args\n   * alternatively, add enable-backlight-registers-fix | data | 01000000 to pciroot(0x0)/pci(0x2,0x0)\n\nadditionally, verify issues mentioned in stuck on or near ioconsoleusers: gioscreenlock...\n\n\n# black screen after ioconsoleusers: gioscreenlock... on navi\n\n * add agdpmod=pikera to boot args\n * switch between different display outputs\n * try running macpro7,1 smbios with the boot-arg agdpmod=ignore\n\nfor msi navi users, you'll need to apply the patch mentioned here: installer not working with 5700xt #901\n\nspecifically, add the following entry under kernel -> patch:\n\nbase:\ncomment: navi vbios bug patch\ncount: 1\nenabled: yes\nfind: 4154592c526f6d2300\nidentifier: com.apple.kext.amdradeonx6000framebuffer\nlimit: 0\nmask:\nminkernel:\nmaxkernel:\nreplace: 414d442c526f6d2300\nreplacemask:\nskip: 0\n\n\n\n# frozen in the macos installer after 30 seconds\n\nthis is likely due to faulty or outright missing nullcpupowermanagement, the one hosted on amd osx's vanilla guide is corrupted. go yell at shannee to fix it. to fix the issue, remove nullcpupowermanagement from kernel -> add and efi/oc/kexts then enable dummypowermanagement under kernel -> emulate\n\n\n# 15h/16h cpu reboot after data & privacy screen\n\nfollow directions here after update 2: fix data and privacy reboot\n\n\n# macos frozen right before login\n\nthis is a common example of screwed up tsc, for most system add cputscsync\n\nfor skylake-x, many firmwares including asus and evga won't write to all cores. so we'll need to reset the tsc on cold boot and wake with tscadjustreset. compiled version can be found here: tscadjustreset.kext. note that you must open up the kext(showpackagecontents in finder, contents -> info.plist) and change the info.plist -> iokitpersonalities -> iopropertymatch -> iocpunumber to the number of cpu threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n\nthe most common way to see the tsc issue:\n\ncase 1   case 2\n         \n\n\n# mediakit reports not enough space\n\nthis error is due to a small efi, by default windows will create a 100mb efi whereas macos will expect 200mb. to get around this you have 2 way to go:\n\n * expand the efi of the drive to 200mb(see google on how)\n * format the entire drive instead of just the partition\n   * note by default disk utility only shows partitions, press cmd/win+2 to show all devices(alternatively you can press the view button)\n\ndefault   show all devices(cmd+2)\n          \n\n\n# diskutility failing to erase\n\nthis is either 1(or more) of 5 issues:\n\n * formatting partition and not the drive, see mediakit reports not enough space\n * diskutility has an odd bug where it will fail on first erase, try erasing again\n * sata hot-plug support in the bios is causing issues(try disabling this option)\n * old firmware, make sure the drive is on the latest firmware\n * and finally, you may just have a bad drive\n\n\n# sata drives not shown in diskutility\n\n * make sure sata mode is ahci in bios\n * certain sata controllers may not be officially supported by macos, for these cases you'll want to grab ctlnaahciport.kext\n   * for very legacy sata controllers, ahciportinjector.kext may be more suitable.\n\n\n# stuck at 2 minutes remaining\n\n\n\nthis error is directly related to the stage at which macos will write certain nvram variables for your system to boot next, and so when there's issues revolving around nvram it'll stall here.\n\nto resolve, we have a few options:\n\n * 300 series intel fix(ie. z390):\n   * ssdt-pmc\n * others can set the following in their config.plist:\n   * legacyenable -> yes\n   * legacyoverwrite -> yes\n   * writeflash -> yes\n\n\n# the recovery server cannot get contacted\n\nif you made your installer in windows or linux, then this means your usb installer is recovery based. what this means is that only a small portion of the macos installer is on disk while the rest must be downloaded from apple servers in the installer. and reason we do not include full installer guides is due to unstable hfs drivers and other utilities that commonly end up with data corruption.\n\nto resolve the error, you have a few options:\n\n * ensure you have a working ethernet or wifi connection\n   * open network utility under utilties header in the installer and see if your network card shows up\n     * if you network card doesn't show up, it's likely you're missing the right network kext\n       * please refer here: ethernet kexts and finding your hardware\n     * if the network card does show up, next run ping -c3 www.google.com in the installer's terminal to ensure your network connection is working\n       * if nothing shows, either your network or kexts are acting up\n         * we recommend trying older variants of kexts in cases where newer builds have weird bugs with your hardware\n       * if it does return something, then the issue is on apple's end. you'll simply need to try to install again another time unfortunately\n\ncheck nic   ping\n            \n\n\n# keyboard and mouse broken in big sur\n\nfor certain legacy systems(ie. core2 duo/2010 and older), you may notice that while the usb ports work your hid-based devices such as the keyboard and mouse may be broken. to resolve this, add the following patch:\n\niohidfamily patch\n\nconfig.plist -> kernel -> patch:\n\nkey           type      value\nbase          string    _issingleuser\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    com.apple.iokit.iohidfamily\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b801000000c3\nreplacemask   data      \nskip          integer   0\n\nsource\n\n\n# stuck on your mac needs a firmware update in order to install to this volume\n\nif you're being prompted to update your firmware to install with an apfs volume, this likely indicates an outdated smbios table. first, verify the following:\n\n * you have platforminfo -> automatic enabled\n * updatesmbiosmode is set to create\n   * make sure customsmbiosguid is disabled\n   * for dell and vaio machines, ensure that customsmbiosguid is enabled and updatesmbiosmode is set to custom instead\n     * customsmbiosguid and updatesmbiosmode should always be in tandem with each other\n * using a smbios supported in this version of macos\n   * ie. you're not using -no_compat_check\n * you're using the latest version of opencore\n\nif you still receive this error, then there's likely some outdated smbios info in opencore itself. we recommend changing to a similar smbios and see if this is resolved. for a full list of smbios, see here: choosing the right smbios",charsets:{cjk:!0}},{title:"System Debugging: In-depth",frontmatter:{},regularPath:"/troubleshooting/kernel-debugging.html",relativePath:"troubleshooting/kernel-debugging.md",key:"v-ca48b55a",path:"/troubleshooting/kernel-debugging.html",headers:[{level:2,title:"EFI Setup",slug:"efi-setup",normalizedTitle:"efi setup",charIndex:320},{level:2,title:"Config.plist Setup",slug:"config-plist-setup",normalizedTitle:"config.plist setup",charIndex:333},{level:3,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:357},{level:3,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:367},{level:2,title:"Serial Setup(Optional)",slug:"serial-setup-optional",normalizedTitle:"serial setup(optional)",charIndex:376},{level:3,title:"Hardware Setup",slug:"hardware-setup",normalizedTitle:"hardware setup",charIndex:404},{level:3,title:"CoolTerm Setup",slug:"coolterm-setup",normalizedTitle:"coolterm setup",charIndex:424},{level:2,title:"Kernel Debug Kits (Optional)",slug:"kernel-debug-kits-optional",normalizedTitle:"kernel debug kits (optional)",charIndex:442},{level:3,title:"KDK on an Installed OS",slug:"kdk-on-an-installed-os",normalizedTitle:"kdk on an installed os",charIndex:476},{level:3,title:"Uninstalling the KDK",slug:"uninstalling-the-kdk",normalizedTitle:"uninstalling the kdk",charIndex:504}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"EFI Setup Config.plist Setup Misc NVRAM Serial Setup(Optional) Hardware Setup CoolTerm Setup Kernel Debug Kits (Optional) KDK on an Installed OS Uninstalling the KDK",content:"# System Debugging: In-depth\n\nThis section will go a bit deeper into the troubleshooting rabbit hole, specifically focusing on more low level debugging with proper debug output and optional serial setup.\n\nNote: 99% of users do not need this level of debugging, this is only for the hardcore or extreme edge-cases.\n\n\n\n * EFI Setup\n * Config.plist Setup\n   * Misc\n   * NVRAM\n * Serial Setup(Optional)\n   * Hardware Setup\n   * CoolTerm Setup\n * Kernel Debug Kits (Optional)\n   * KDK on an Installed OS\n   * Uninstalling the KDK\n\n\n\n\n# EFI Setup\n\nFor most part, there's fairly minimal changes required. Main things we recommend are DEBUG version of OpenCore and all your kexts. This can help ensure you get all the necessary data, see here for more details on OpenCore debugging: OpenCore debugging\n\nBesides just using DEBUG variants of OpenCore and kexts, these tools can also help out greatly:\n\n * DebugEnhancer.kext\n   \n   * Helps greatly with kernel debugging while also patching kern.msgbuf to 10485760 and allowing a much larger kernel-log.\n   * Note this kext cannot start with kernel initialization, so early logs are not patched until the kext is loaded right before PCI Configuration Stage\n\n * SSDT-DBG\n   \n   * Enables debug statements from your ACPI tables, helping for in-OS ACPI event debugging\n   * Note you will need to compile the SSDT\n\n\n# Config.plist Setup\n\nFor serial setup, OpenCore actually makes this quite straight forward.\n\n\n# Misc\n\n# Serial\n\n * Init: YES\n   * Initializes the serial port from OpenCore\n   * Needed for sending OpenCore logging to the serial port\n\n# Debug\n\n * Target: 67\n   * Enables debug output with OpenCore\n   * Target = 75 adds the additional serial output flag(0x08) if you plan to use serial\n   * You can calculate your own value here: OpenCore debugging\n\n\n# NVRAM\n\n# boot-args\n\nHere we get to set some variables that will help us with debug output, for us we'll be using the following boot-args:\n\n-v keepsyms=1 debug=0x12a msgbuf=1048576\n\n\nNow lets go over what each arg does:\n\n * -v\n   * Enables verbose output\n * keepsyms=1\n   * Ensures symbols are kept during kernel panics, which are greatly helpful for troubleshooting\n * debug=0x12a\n   * Combination of DB_PRT (0x2), DB_KPRT (0x8), DB_SLOG (0x20), and DB_LOG_PI_SCRN (0x100)\n   * A full list of values for the latest version of XNU can be found here: debug.h\n * msgbuf=1048576\n   * Sets the kernel's message buffer size, this helps with getting proper logs during boot\n   * 1048576 is 1MB(/1024^2), can be larger if required\n   * Note not required with DebugEnhancer.kext, however for early kernel logs it's still required\n\nOther helpful boot-args:\n\nDepending on what you're debugging, you may also find these boot-args extremely helpful:\n\n * -liludbgall\n   * Enables debugging on Lilu and any other plugins, though note that this requires DEBUG versions of the kexts\n * io=0xff\n   * Enables IOKit debugging, with greater output. Be aware that the logging-amount of this parameter will be huge and will slow down the system. Especially while booting.\n * igdebug=0xff\n   * Enables iGPU related debugging, helpful when working with iGPU systems\n * serial=5\n   * Redirects output to serial if you plan to use serial\n   * Recommended for early kernel output before PCI Configuration\n * acpi_layer=0x8\n   * Enables ACPI_TABLES debug, see acoutput.h for more information\n   * 0xFFFFFFFF alternatively enables all layers\n * acpi_level=0x2\n   * Sets ACPI_LV_DEBUG_OBJECT debug, see acoutput.h for more information\n   * 0xFFFF5F alternatively implies ACPI_ALL_COMPONENTS\n\n\n# Serial Setup(Optional)\n\n * Hardware Setup\n * EFI Setup\n * Config.plist Setup\n\nWhile optional, serial can be super helpful in grabbing all the important info flooding your PC. It's also the only way to properly log super early kernel panics(such as things right after [EB|#LOG:EXITBS:START])\n\nFor this setup, you'll need a few things:\n\n * A serial header/port on the test machine\n * A serial-to-serial or serial-to-USB cable\n * A second machine to receive the serial logging(with either Serial or USB)\n * Software to monitor the serial output\n   * For this guide, we'll use CoolTerm as it supports macOS, Linux, Windows and even Raspberry Pi's\n   * screen and other methods are also supported\n\n\n# Hardware Setup\n\nFor this example, we'll be using an Asus X299-E Strix board which does have a serial header. To verify whether your board comes with one, check the owners or service manual and search for the serial/COM port:\n\n\n\nAs you can see, we have a COM port on the bottom of our motherboard and even provides us with a diagram for manually hooking up our serial pins if you're not using a 9/10 Pin Serial Header to DB9 adapter.\n\nAlternatively, some machine come with DB9 Serial ports right on the rear IO such as this Dell Optiplex 780 SFF(note that VGA and Serial are not the same connector):\n\nFor my X299 setup, I'm using a simple Serial header to DB9, then a DB9 to USB RS 232 adapter which finally terminates at my laptop:\n\nSERIAL HEADER TO DB9   DB9 TO USB RS 232 ADAPTER\n                       \n\nThe OpenCore manual generally recommends CP21202-based UART devices:\n\n> To obtain the log during boot you can make the use of serial port debugging. Serial port debugging is enabled in Target, e.g. 0xB for onscreen with serial. OpenCore uses 115200 baud rate, 8 data bits, no parity, and 1 stop bit. For macOS your best choice are CP2102-based UART devices. Connect motherboard TX to USB UART RX, and motherboard GND to USB UART GND. Use screen utility to get the output, or download GUI software, such as CoolTerm. Note: On several motherboards (and possibly USB UART dongles) PIN naming may be incorrect. It is very common to have GND swapped with RX, thus you have to connect motherboard “TX” to USB UART GND, and motherboard “GND” to USB UART RX.\n\nImportant reminder: Don't forget to also enable the serial port in your BIOS, most motherboards will disable it by default\n\n\n# CoolTerm Setup\n\nNow lets fire up CoolTerm and set a few options. When you open CoolTerm, you'll likely be greeted with a simple window. Here select the Options entry:\n\n\n\nHere we're given quite a few options, but the mains ones we care about are:\n\n * Port: Ensure this matches with your serial controller.\n * Baudrate = 115200\n * Data Bits = 8\n * Parity = none\n * Stop Bit = 1\n\nNext save these settings, and select the Connect entry. This will provide you a live log from serial:\n\n\n\nTo record, simply head to Connections -> Capture to Text/Binary File -> Start...(Cmd+R):\n\n\n\n\n# Kernel Debug Kits (Optional)\n\n * KDK on an Installed OS\n * Uninstalling the KDK\n\nKernel Debug Kits(KDKs) are a great way to get even more logging information from the kernel and core kexts, KDKs specifically are debug versions of macOS's core foundation provided from Apple themselves. They include both more logging as well as ASSERTs allowing you to more directly see issues with your setup. Note however we will not be discussing bridged debugging or lldb usage.\n\nCAUTION: Installing KDKs on work machines can lead to issues with OS updates as well as bricked installs. Please debug on dedicated macOS installs to avoid data loss\n\nTo start, we'll first need a minimum of a free developer account from Apple. Once you've signed up for a minimum of a free tier, you can now access KDKs from the More Downloads page:\n\n * Note: Free tiers will be limited to release KDKs, only beta KDKs are provided for paid developer accounts\n * Note 2: Apple hosts KDKs as far back as OS X 10.5, Leopard so don't worry about your OS not being supported\n\n\n\nTo determine which KDK build you need with beta builds, run the following in terminal:\n\nsw_vers | grep BuildVersion\n\n\nFor this, I will be downloading Kernel Debug Kit 11.3 build 20E5186d. Once downloaded, mount the disk image and you'll find the KDK installer. By default, the KDK will only install itself for \"Performing Two-Machine Debugging\" and will provide zero extra benefit on the host machine for kernel debugging by default.\n\n\n# KDK on an Installed OS\n\nTo enable debugging on the host machine, you'll need to do the following:\n\n 1. Run the KDK Install pkg\n 2. Disable SIP(OS X 10.11+)\n 3. Mount root partition as writable(macOS 10.15+)\n 4. Install debug kernel and kexts\n 5. Update boot-args\n 6. Reboot and check your work\n\n# 1. Run the KDK Install pkg\n\nSimply run the pkg as normal:\n\n\n\nOnce installed, you'll find the KDK components such as the debug kernel located at /Library/Developer/KDKs:\n\n\n\n# 2. Disabling SIP\n\n * Applicable for OS X 10.11, El Capitan and newer\n\nTo disable SIP, users have 2 choices:\n\n * Disable via Recovery\n\n * Disable via config.plist\n\nGenerally we highly recommend recovery to easily revert with NVRAM reset, however some users may require SIP to be disabled through NVRAM wipes as well.\n\nFor the former, simply reboot into macOS Recovery, open terminal and run the following:\n\ncsrutil disable\ncsrutil authenticated-root disable # Big Sur+\n\n\nReboot, and SIP will have been adjusted accordingly. You can run csrutil status in terminal to verify it worked.\n\n * CAUTION: For users relying on OpenCore's ApECID feature, please be aware this must be disabled to use the KDK.\n\n# 3. Mount root partition as writable\n\n * Applicable for macOS 10.15, Catalina and newer\n\nMounting the root volume as writable is easy, however the process is a bit long:\n\n# Big Sur+\n# First, create a mount point for your drive\nmkdir ~/livemount\n\n# Next, find your System volume\ndiskutil list\n\n# From the below list, we can see our System volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# Now you can freely make any edits to the System volume\n\n\n# Catalina only\nsudo mount -uw /\n\n\n# 4. Install debug kernel and kexts\n\nNow we install our KDK into the system:\n\n# Install KDK to System Volume\n# Ensure to replace <KDK Version>\n# For 10.15 and older, swap livemount with /Volumes/<Target Volume>\nsudo ditto /Library/Developer/KDKs/<KDK Version>/System ~/livemount/System\n\n# Rebuild Truethe kernel cache(Big Sur and newer)\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# Rebuild the kernel cache(Catalina and older)\nsudo kextcache -invalidate /Volumes/<Target Volume>\n\n# Finally, once done editing the system volume\n# we'll want to create a new snapshot (Big Sur and newer)\nsudo bless --folder ~/livemount/System/Library/CoreServices --bootefi --create-snapshot\n\n\n# 5. Update boot-args\n\nNow that you've finished setting up the KDK and installed it, we now need to tell boot.efi which kernel to use. You have 2 options to choose from:\n\n * kcsuffix=debug (removed with Big Sur)\n * kcsuffix=development\n * kcsuffix=kasan\n\ndevelopment arg will set the new default debug kernel in Big Sur, while kasan is a much more logging intensive kernel that incorporates AddressSanitizer.\n\nOnce you've decided which kernel is ideal for you, add the kcsuffix arg to your boot-args in your config.plist\n\n# 6. Reboot and check your work\n\nAssuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: kasan\n\n\nAnd as we can see, we're successfully booting a KASAN kernel.\n\n\n# Uninstalling the KDK\n\nUninstalling the KDK is fairly simple, however can be a bit destructive if not care.\n\n 1. Mount root partition as writable(macOS 10.15+)\n 2. Remove debug kernel and kexts\n 3. Re-enable SIP\n 4. Clean boot-args\n 5. Reboot and check your work\n\nSteps:\n\n# 1. Mount root partition as writable(macOS 10.15+)\n\n# Big Sur+\n# First, create a mount point for your drive\n# Skip of still present from mounting volume last time\nmkdir ~/livemount\n\n# Next, find your System volume\ndiskutil list\n\n# From the below list, we can see our System volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Mount the drive (ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n\n# Catalina only\nsudo mount -uw /\n\n\n# 2. Remove debug kernel and kexts\n\n# Revert to old snapshot (Big Sur+)\nsudo bless --mount ~/livemount --bootefi --last-sealed-snapshot\n\n\n# Reset kernel cache (Catalina and older)\nsudo rm /System/Library/Caches/com.apple.kext.caches/Startup/kernelcache.de*\nsudo rm /System/Library/PrelinkedKernels/prelinkedkernel.de*\nsudo kextcache -invalidate /\n\n\n# 3. Re-enable SIP\n\n * Recovery commands(if previously changed via recovery):\n\ncsrutil enable\ncsrutil authenticated-root enable # Big Sur+\n\n\n * config.plist changes(if previously changed via config.plist):\n   * Enabling via config.plist\n\n# 4. Clean boot-args\n\nDon't forget to remove kcsuffix= in your boot-args\n\n# 5. Reboot and check your work\n\nAssuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: release\n\n\nAnd as we can see, we're successfully booting a KASAN kernel.",normalizedContent:"# system debugging: in-depth\n\nthis section will go a bit deeper into the troubleshooting rabbit hole, specifically focusing on more low level debugging with proper debug output and optional serial setup.\n\nnote: 99% of users do not need this level of debugging, this is only for the hardcore or extreme edge-cases.\n\n\n\n * efi setup\n * config.plist setup\n   * misc\n   * nvram\n * serial setup(optional)\n   * hardware setup\n   * coolterm setup\n * kernel debug kits (optional)\n   * kdk on an installed os\n   * uninstalling the kdk\n\n\n\n\n# efi setup\n\nfor most part, there's fairly minimal changes required. main things we recommend are debug version of opencore and all your kexts. this can help ensure you get all the necessary data, see here for more details on opencore debugging: opencore debugging\n\nbesides just using debug variants of opencore and kexts, these tools can also help out greatly:\n\n * debugenhancer.kext\n   \n   * helps greatly with kernel debugging while also patching kern.msgbuf to 10485760 and allowing a much larger kernel-log.\n   * note this kext cannot start with kernel initialization, so early logs are not patched until the kext is loaded right before pci configuration stage\n\n * ssdt-dbg\n   \n   * enables debug statements from your acpi tables, helping for in-os acpi event debugging\n   * note you will need to compile the ssdt\n\n\n# config.plist setup\n\nfor serial setup, opencore actually makes this quite straight forward.\n\n\n# misc\n\n# serial\n\n * init: yes\n   * initializes the serial port from opencore\n   * needed for sending opencore logging to the serial port\n\n# debug\n\n * target: 67\n   * enables debug output with opencore\n   * target = 75 adds the additional serial output flag(0x08) if you plan to use serial\n   * you can calculate your own value here: opencore debugging\n\n\n# nvram\n\n# boot-args\n\nhere we get to set some variables that will help us with debug output, for us we'll be using the following boot-args:\n\n-v keepsyms=1 debug=0x12a msgbuf=1048576\n\n\nnow lets go over what each arg does:\n\n * -v\n   * enables verbose output\n * keepsyms=1\n   * ensures symbols are kept during kernel panics, which are greatly helpful for troubleshooting\n * debug=0x12a\n   * combination of db_prt (0x2), db_kprt (0x8), db_slog (0x20), and db_log_pi_scrn (0x100)\n   * a full list of values for the latest version of xnu can be found here: debug.h\n * msgbuf=1048576\n   * sets the kernel's message buffer size, this helps with getting proper logs during boot\n   * 1048576 is 1mb(/1024^2), can be larger if required\n   * note not required with debugenhancer.kext, however for early kernel logs it's still required\n\nother helpful boot-args:\n\ndepending on what you're debugging, you may also find these boot-args extremely helpful:\n\n * -liludbgall\n   * enables debugging on lilu and any other plugins, though note that this requires debug versions of the kexts\n * io=0xff\n   * enables iokit debugging, with greater output. be aware that the logging-amount of this parameter will be huge and will slow down the system. especially while booting.\n * igdebug=0xff\n   * enables igpu related debugging, helpful when working with igpu systems\n * serial=5\n   * redirects output to serial if you plan to use serial\n   * recommended for early kernel output before pci configuration\n * acpi_layer=0x8\n   * enables acpi_tables debug, see acoutput.h for more information\n   * 0xffffffff alternatively enables all layers\n * acpi_level=0x2\n   * sets acpi_lv_debug_object debug, see acoutput.h for more information\n   * 0xffff5f alternatively implies acpi_all_components\n\n\n# serial setup(optional)\n\n * hardware setup\n * efi setup\n * config.plist setup\n\nwhile optional, serial can be super helpful in grabbing all the important info flooding your pc. it's also the only way to properly log super early kernel panics(such as things right after [eb|#log:exitbs:start])\n\nfor this setup, you'll need a few things:\n\n * a serial header/port on the test machine\n * a serial-to-serial or serial-to-usb cable\n * a second machine to receive the serial logging(with either serial or usb)\n * software to monitor the serial output\n   * for this guide, we'll use coolterm as it supports macos, linux, windows and even raspberry pi's\n   * screen and other methods are also supported\n\n\n# hardware setup\n\nfor this example, we'll be using an asus x299-e strix board which does have a serial header. to verify whether your board comes with one, check the owners or service manual and search for the serial/com port:\n\n\n\nas you can see, we have a com port on the bottom of our motherboard and even provides us with a diagram for manually hooking up our serial pins if you're not using a 9/10 pin serial header to db9 adapter.\n\nalternatively, some machine come with db9 serial ports right on the rear io such as this dell optiplex 780 sff(note that vga and serial are not the same connector):\n\nfor my x299 setup, i'm using a simple serial header to db9, then a db9 to usb rs 232 adapter which finally terminates at my laptop:\n\nserial header to db9   db9 to usb rs 232 adapter\n                       \n\nthe opencore manual generally recommends cp21202-based uart devices:\n\n> to obtain the log during boot you can make the use of serial port debugging. serial port debugging is enabled in target, e.g. 0xb for onscreen with serial. opencore uses 115200 baud rate, 8 data bits, no parity, and 1 stop bit. for macos your best choice are cp2102-based uart devices. connect motherboard tx to usb uart rx, and motherboard gnd to usb uart gnd. use screen utility to get the output, or download gui software, such as coolterm. note: on several motherboards (and possibly usb uart dongles) pin naming may be incorrect. it is very common to have gnd swapped with rx, thus you have to connect motherboard “tx” to usb uart gnd, and motherboard “gnd” to usb uart rx.\n\nimportant reminder: don't forget to also enable the serial port in your bios, most motherboards will disable it by default\n\n\n# coolterm setup\n\nnow lets fire up coolterm and set a few options. when you open coolterm, you'll likely be greeted with a simple window. here select the options entry:\n\n\n\nhere we're given quite a few options, but the mains ones we care about are:\n\n * port: ensure this matches with your serial controller.\n * baudrate = 115200\n * data bits = 8\n * parity = none\n * stop bit = 1\n\nnext save these settings, and select the connect entry. this will provide you a live log from serial:\n\n\n\nto record, simply head to connections -> capture to text/binary file -> start...(cmd+r):\n\n\n\n\n# kernel debug kits (optional)\n\n * kdk on an installed os\n * uninstalling the kdk\n\nkernel debug kits(kdks) are a great way to get even more logging information from the kernel and core kexts, kdks specifically are debug versions of macos's core foundation provided from apple themselves. they include both more logging as well as asserts allowing you to more directly see issues with your setup. note however we will not be discussing bridged debugging or lldb usage.\n\ncaution: installing kdks on work machines can lead to issues with os updates as well as bricked installs. please debug on dedicated macos installs to avoid data loss\n\nto start, we'll first need a minimum of a free developer account from apple. once you've signed up for a minimum of a free tier, you can now access kdks from the more downloads page:\n\n * note: free tiers will be limited to release kdks, only beta kdks are provided for paid developer accounts\n * note 2: apple hosts kdks as far back as os x 10.5, leopard so don't worry about your os not being supported\n\n\n\nto determine which kdk build you need with beta builds, run the following in terminal:\n\nsw_vers | grep buildversion\n\n\nfor this, i will be downloading kernel debug kit 11.3 build 20e5186d. once downloaded, mount the disk image and you'll find the kdk installer. by default, the kdk will only install itself for \"performing two-machine debugging\" and will provide zero extra benefit on the host machine for kernel debugging by default.\n\n\n# kdk on an installed os\n\nto enable debugging on the host machine, you'll need to do the following:\n\n 1. run the kdk install pkg\n 2. disable sip(os x 10.11+)\n 3. mount root partition as writable(macos 10.15+)\n 4. install debug kernel and kexts\n 5. update boot-args\n 6. reboot and check your work\n\n# 1. run the kdk install pkg\n\nsimply run the pkg as normal:\n\n\n\nonce installed, you'll find the kdk components such as the debug kernel located at /library/developer/kdks:\n\n\n\n# 2. disabling sip\n\n * applicable for os x 10.11, el capitan and newer\n\nto disable sip, users have 2 choices:\n\n * disable via recovery\n\n * disable via config.plist\n\ngenerally we highly recommend recovery to easily revert with nvram reset, however some users may require sip to be disabled through nvram wipes as well.\n\nfor the former, simply reboot into macos recovery, open terminal and run the following:\n\ncsrutil disable\ncsrutil authenticated-root disable # big sur+\n\n\nreboot, and sip will have been adjusted accordingly. you can run csrutil status in terminal to verify it worked.\n\n * caution: for users relying on opencore's apecid feature, please be aware this must be disabled to use the kdk.\n\n# 3. mount root partition as writable\n\n * applicable for macos 10.15, catalina and newer\n\nmounting the root volume as writable is easy, however the process is a bit long:\n\n# big sur+\n# first, create a mount point for your drive\nmkdir ~/livemount\n\n# next, find your system volume\ndiskutil list\n\n# from the below list, we can see our system volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# now you can freely make any edits to the system volume\n\n\n# catalina only\nsudo mount -uw /\n\n\n# 4. install debug kernel and kexts\n\nnow we install our kdk into the system:\n\n# install kdk to system volume\n# ensure to replace <kdk version>\n# for 10.15 and older, swap livemount with /volumes/<target volume>\nsudo ditto /library/developer/kdks/<kdk version>/system ~/livemount/system\n\n# rebuild truethe kernel cache(big sur and newer)\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# rebuild the kernel cache(catalina and older)\nsudo kextcache -invalidate /volumes/<target volume>\n\n# finally, once done editing the system volume\n# we'll want to create a new snapshot (big sur and newer)\nsudo bless --folder ~/livemount/system/library/coreservices --bootefi --create-snapshot\n\n\n# 5. update boot-args\n\nnow that you've finished setting up the kdk and installed it, we now need to tell boot.efi which kernel to use. you have 2 options to choose from:\n\n * kcsuffix=debug (removed with big sur)\n * kcsuffix=development\n * kcsuffix=kasan\n\ndevelopment arg will set the new default debug kernel in big sur, while kasan is a much more logging intensive kernel that incorporates addresssanitizer.\n\nonce you've decided which kernel is ideal for you, add the kcsuffix arg to your boot-args in your config.plist\n\n# 6. reboot and check your work\n\nassuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: kasan\n\n\nand as we can see, we're successfully booting a kasan kernel.\n\n\n# uninstalling the kdk\n\nuninstalling the kdk is fairly simple, however can be a bit destructive if not care.\n\n 1. mount root partition as writable(macos 10.15+)\n 2. remove debug kernel and kexts\n 3. re-enable sip\n 4. clean boot-args\n 5. reboot and check your work\n\nsteps:\n\n# 1. mount root partition as writable(macos 10.15+)\n\n# big sur+\n# first, create a mount point for your drive\n# skip of still present from mounting volume last time\nmkdir ~/livemount\n\n# next, find your system volume\ndiskutil list\n\n# from the below list, we can see our system volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# mount the drive (ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n\n# catalina only\nsudo mount -uw /\n\n\n# 2. remove debug kernel and kexts\n\n# revert to old snapshot (big sur+)\nsudo bless --mount ~/livemount --bootefi --last-sealed-snapshot\n\n\n# reset kernel cache (catalina and older)\nsudo rm /system/library/caches/com.apple.kext.caches/startup/kernelcache.de*\nsudo rm /system/library/prelinkedkernels/prelinkedkernel.de*\nsudo kextcache -invalidate /\n\n\n# 3. re-enable sip\n\n * recovery commands(if previously changed via recovery):\n\ncsrutil enable\ncsrutil authenticated-root enable # big sur+\n\n\n * config.plist changes(if previously changed via config.plist):\n   * enabling via config.plist\n\n# 4. clean boot-args\n\ndon't forget to remove kcsuffix= in your boot-args\n\n# 5. reboot and check your work\n\nassuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: release\n\n\nand as we can see, we're successfully booting a kasan kernel.",charsets:{cjk:!0}},{title:"General Troubleshooting",frontmatter:{},regularPath:"/troubleshooting/troubleshooting.html",relativePath:"troubleshooting/troubleshooting.md",key:"v-e6d98926",path:"/troubleshooting/troubleshooting.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:510}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"Table of Contents",content:"# General Troubleshooting\n\nThis section is for those having issues booting either OpenCore, macOS or having issues inside macOS. If you're confused as to where exactly in the macOS boot process you're stuck, reading the macOS Boot Process page can help clarify things.\n\nAnd if your issue is not covered, please read the official OpenCore documentation: Configuration.pdf. This document goes into much more technical detail around how OpenCore works and has much more detailed info on all supported quirks.\n\n\n# Table of Contents\n\nIf you're unsure where you're currently stuck, please see here: Understanding the macOS Boot Process\n\n * OpenCore Boot Issues\n   * This section refers to booting the actual USB and getting to OpenCore's picker. Anything after the picker, like booting macOS, should see below\n * Kernelspace Issues\n   * Covering everything that many occur in early boot from the moment you select macOS in the OpenCore menu, till the point right before the Apple logo and the installer GUI loads\n * Userspace Issues\n   * Covering the process from loading macOS's GUI to installing macOS on the drive\n * Post-Install Issues\n   * Covering issues once macOS has been installed and is fully booted\n * Miscellaneous Issues\n   * Covering issues after macOS's installation or with other OSes",normalizedContent:"# general troubleshooting\n\nthis section is for those having issues booting either opencore, macos or having issues inside macos. if you're confused as to where exactly in the macos boot process you're stuck, reading the macos boot process page can help clarify things.\n\nand if your issue is not covered, please read the official opencore documentation: configuration.pdf. this document goes into much more technical detail around how opencore works and has much more detailed info on all supported quirks.\n\n\n# table of contents\n\nif you're unsure where you're currently stuck, please see here: understanding the macos boot process\n\n * opencore boot issues\n   * this section refers to booting the actual usb and getting to opencore's picker. anything after the picker, like booting macos, should see below\n * kernelspace issues\n   * covering everything that many occur in early boot from the moment you select macos in the opencore menu, till the point right before the apple logo and the installer gui loads\n * userspace issues\n   * covering the process from loading macos's gui to installing macos on the drive\n * post-install issues\n   * covering issues once macos has been installed and is fully booted\n * miscellaneous issues\n   * covering issues after macos's installation or with other oses",charsets:{}},{title:"為什麼 OpenCore 超越 Clover 和其他程式",frontmatter:{},regularPath:"/why-oc.html",relativePath:"why-oc.md",key:"v-3a54b007",path:"/why-oc.html",headers:[{level:2,title:"OpenCore 特性",slug:"opencore-特性",normalizedTitle:"opencore 特性",charIndex:109},{level:3,title:"軟體支援",slug:"軟體支援",normalizedTitle:"軟體支援",charIndex:126},{level:2,title:"OpenCore 的缺點",slug:"opencore-的缺點",normalizedTitle:"opencore 的缺點",charIndex:134},{level:2,title:"常見的誤解",slug:"常見的誤解",normalizedTitle:"常見的誤解",charIndex:150},{level:3,title:"OpenCore 還是測試版，所以不穩定嗎？",slug:"opencore-還是測試版-所以不穩定嗎",normalizedTitle:"opencore 還是測試版，所以不穩定嗎？",charIndex:161},{level:3,title:"OpenCore 是否總是在其他操作系統中注入 SMBIOS 和 ACPI 數據?",slug:"opencore-是否總是在其他操作系統中注入-smbios-和-acpi-數據",normalizedTitle:"opencore 是否總是在其他操作系統中注入 smbios 和 acpi 數據?",charIndex:189},{level:3,title:"OpenCore 需要全新安裝嗎？",slug:"opencore-需要全新安裝嗎",normalizedTitle:"opencore 需要全新安裝嗎？",charIndex:236},{level:3,title:"OpenCore 只支援有限的 macOS 版本嗎？",slug:"opencore-只支援有限的-macos-版本嗎",normalizedTitle:"opencore 只支援有限的 macos 版本嗎？",charIndex:259},{level:3,title:"OpenCore 支援舊的硬體嗎?",slug:"opencore-支援舊的硬體嗎",normalizedTitle:"opencore 支援舊的硬體嗎?",charIndex:291},{level:3,title:"OpenCore 支持 Windows/Linux 開機嗎?",slug:"opencore-支持-windows-linux-開機嗎",normalizedTitle:"opencore 支持 windows/linux 開機嗎?",charIndex:314},{level:3,title:"Hackintosh 的合法性",slug:"hackintosh-的合法性",normalizedTitle:"hackintosh 的合法性",charIndex:350},{level:3,title:"macOS 支援 NVIDIA GPU 嗎?",slug:"macos-支援-nvidia-gpu-嗎",normalizedTitle:"macos 支援 nvidia gpu 嗎?",charIndex:371}],lastUpdated:"2023/6/28 下午2:01:19",lastUpdatedTimestamp:1687960879e3,headersStr:"OpenCore 特性 軟體支援 OpenCore 的缺點 常見的誤解 OpenCore 還是測試版，所以不穩定嗎？ OpenCore 是否總是在其他操作系統中注入 SMBIOS 和 ACPI 數據? OpenCore 需要全新安裝嗎？ OpenCore 只支援有限的 macOS 版本嗎？ OpenCore 支援舊的硬體嗎? OpenCore 支持 Windows/Linux 開機嗎? Hackintosh 的合法性 macOS 支援 NVIDIA GPU 嗎?",content:"# 為什麼 OpenCore 超越 Clover 和其他程式\n\n本節簡單介紹了為什麼社群已經過渡到 OpenCore，並旨在消除社群中常見的一些誤解。那些只是想要一台 macOS 電腦的人可以跳過這一頁。\n\n\n\n * OpenCore 特性\n   * 軟體支援\n * OpenCore 的缺點\n * 常見的誤解\n   * OpenCore 還是測試版，所以不穩定嗎？\n   * OpenCore 是否總是在其他操作系統中注入 SMBIOS 和 ACPI 數據?\n   * OpenCore 需要全新安裝嗎？\n   * OpenCore 只支援有限的 macOS 版本嗎？\n   * OpenCore 支援舊的硬體嗎?\n   * OpenCore 支持 Windows/Linux 開機嗎?\n   * Hackintosh 的合法性\n   * macOS 支援 NVIDIA GPU 嗎?\n\n\n\n\n# OpenCore 特性\n\n * 更多的操作系統支援！\n   * OpenCore 現在支持更多版本的 OS X 和 macOS，而無需像 Clover 和 Chameleon 那樣必須進行痛苦的破解過程\n   * 這包括早在 10.4、Tiger 的操作系統，甚至是最新版本的 macOS 13 Ventura！\n * 平均而言，OpenCore 系統的啟動速度比使用 Clover 的系統要快，因為減少了不必要的修補\n * 更好的整體穩定性，修補可以更精確：\n   * macOS 10.15.4 更新\n   * AMD OSX 修補不需要在每個小的安全更新中更新\n * 以多種形式提高整體安全性:\n   * 不需要停用系統完整性保護（SIP）\n   * 內置 FileVault 2 支援\n   * Vaulting 允許建立 EFI 快照防止不必要的修改\n   * 真正的 Secure Boot 支援\n     * 包括 UEFI 和蘋果的變種\n * BootCamp 切換和啟動設備選擇通過讀取啟動盤設置的 NVRAM 變量來支援，就像真正的 Mac 一樣。\n * 通過 boot.efi 支援開機熱鍵 - 啟動時按 Option 或 ESC 來選擇啟動設備, Cmd+R 進入恢復模式或 Cmd+Opt+P+R 重設 NVRAM。\n\n\n# 軟體支援\n\n一些人想要從其他開機程式轉換的最大原因實際上是軟體支援：\n\n * Kexts 不再使用 Clover 測試:\n   * kext 出問題了？許多開發人員，包括 Acidanthera (您最喜歡的大多數 kext 的製造者) 不再提供除了 OpenCore 以外的支援\n * 許多韌體驅動程式被整合到 OpenCore：\n   * APFS 支援\n   * FileVault 支援\n   * 韌體補丁\n\n\n# OpenCore 的缺點\n\nClover 的大部分功能實際上在 OpenCore 中以一些奇怪的形式得到了支援，但是在過渡時，你應該密切關注 OpenCore 缺失的功能，因為這可能會影響到你自己:\n\n * 不支援引導基於 MBR 的操作系統\n   * 解決方法是在 OpenCore 中鍊式加載 rEFInd 一次\n * 不支援基於 UEFI 的 VBIOS 修補\n   * 但是在 macOS 中可以這樣做\n * 不支援傳統 GPU 的自動設備屬性注入\n   * 例如：InjectIntel、InjectNVIDIA、InjectAti\n   * 然而，你可以手動 修補 GPU\n * 不支援 IRQ 衝突修補\n   * 可以使用 SSDTTime\n * 不支援舊的 CPU 生成 P 和 C 狀態\n * 不支援硬體 UUID 注入\n * 不支援 Clover 的許多 XCPM 修補\n   * 例如：Ivy Bridge XCPM 修補\n * 不支援隱藏特定的硬碟區\n * 不支援在 OpenCore 的選單內改變設置\n * 不修補 PCIRoot UID 值\n * 不支援 macOS 特有的 ACPI 修補\n\n\n# 常見的誤解\n\n\n# OpenCore 還是測試版，所以不穩定嗎？\n\n簡短的回答：不\n\n長答案：不是\n\nOpenCore 的版本號並不代表項目的質量。相反，它更多的是一種看到項目的墊腳石的方式。 Acidanthera 仍然有很多他們想要做的項目，包括全面的改進和更多的功能支持。\n\n例如，OpenCore 通過適當的安全審計以確保符合 UEFI Secure Boot，並且是唯一經過這些嚴格審查並具有此類支援的 Hackintosh 開機程式。\n\n版本 0.6.1 最初被設計為 OpenCore 的官方發布版本，因為它將擁有適當的 UEFI/Apple Secure Boot，並將是 OpenCore 作為公共工具發布的一周年。然而，由於 macOS Big Sur 周圍的情況以及 OpenCore 的預連接器的重寫以支持它，它決定將 1.0.0 推遲一年。\n\n目前的路線圖：\n\n * 2019年：測試年\n * 2020年：安全啟動之年\n * 2021年：改進之年\n\n所以請不要把版本號看作是一個障礙，而應該看作是值得期待的東西。\n\n\n# OpenCore 是否總是在其他操作系統中注入 SMBIOS 和 ACPI 數據?\n\n預設情況下，OpenCore 將假設所有操作系統都應該平等對待 ACPI 和 SMBIOS 訊息。這種想法的原因包括三個部分:\n\n * 這允許正確的多系統開機支援，如 BootCamp\n * 避免製作不良的 DSDT，並鼓勵適當的 ACPI 實踐\n * 避免訊息被多次注入的邊緣情況，通常在 Clover 中看到\n   * 例如：一旦啟動 boot.efi，你將如何處理 SMBIOS 和 ACPI 數據注入，但後來被趕出去嗎？因此試圖撤銷它們可能相當危險。這就是為什麼 Clover 的方法是不被允許的。\n\n然而，在 OpenCore 中有一些奇怪的地方允許 SMBIOS 注入受到 macOS 的限制，這是通過為 macOS 讀取 SMBIOS 信息的地方打補丁實現的。將 CustomSMBIOSMode 設置為 Custom 的 CustomSMIOSGuid 選項可能會在未來中斷，因此我們只建議在其他操作系統中某些軟件中斷的情況下使用此選項。為了最好的穩定性，請禁用這些選項。\n\n\n# OpenCore 需要全新安裝嗎？\n\n如果你有一個純淨的安裝，那就完全不需要了——這指的是操作系統是否以任何方式被篡改了，比如將第三方 kext 安裝到系統卷或其他蘋果不支持的修改。當你的系統被嚴重篡改，無論是你還是第三方工具，如 Hackintool，我們建議重新安裝，以避免任何潛在的問題。\n\n特別提醒 Clover 用戶：安裝 OpenCore 時，請重置 NVRAM。Clover 的許多變量可能與 OpenCore 和 macOS 衝突。\n\n * 注：眾所周知，Thinkpad 筆記本電腦在 OpenCore 中 NVRAM 重置後是會變磚的，我們建議通過更新這些機器的 BIOS 來重置 NVRAM。\n\n\n# OpenCore 只支援有限的 macOS 版本嗎？\n\n從 OpenCore 0.6.2 開始，你現在可以啟動每個 Intel 版本的 macOS（OS X 10.4 及以上）！正確的支援取決於您的硬體，所以請自行驗證：硬體限制\n\nmacOS 安裝圖庫\n\nAcidanthera 測試了很多版本的 OS X，而 dortania 也在他們的舊 HP DC 7900 (Core2 Quad Q8300) 上運行過很多版本的 OS X。以下是他們測試過的一小部分:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# OpenCore 支援舊的硬體嗎?\n\n到目前為止，只要操作系統本身支持，大多數 Intel 硬體都是支援的！但是，請參閱硬體限制頁面 以了解 OS X/macOS 的哪些版本支援哪些硬體。\n\n目前，Intel 的 Yonah 和更新系列的 CPU 已經通過 OpenCore 進行了適當的測試。\n\n\n# OpenCore 支持 Windows/Linux 開機嗎?\n\nOpenCore 將自動檢測 Windows 而無需任何額外配置。在 OpenCore 0.7.3 中，OpenLinuxBoot 作為 EFI 驅動程式加入到 OpenCore 中，它將自動檢測 Linux 分區。這需要 ext4_x64.efi 或 btrfs_x64.efi，具體取決於在發行版中使用的格式。對於開機程式具有不規則路徑或名稱的任何操作系統，你可以簡單地將其新增到 BlessOverride 部分。\n\n\n# Hackintosh 的合法性\n\nHackintosh 位於法律的灰色地帶，主要是因為雖然這並不違法，但我們實際上違反了蘋果的 EULA。這不是違法的原因：\n\n * 我們從蘋果的伺服器直接下載 macOS\n * 我們是作為一個教學和個人使用的非營利組織來做這件事的\n   * 計劃將 Hackintosh 用於工作或想轉售它們的人應該參考 Psystar 案例 和他們的地區法律\n\n雖然 EULA 規定 macOS 只能安裝在真正的 Mac 電腦或在真正的 mac 電腦上運行的虛擬機器上 (第 2B-i 和 2B-iii 節)，但沒有強制執行的法律完全禁止這一點。然而，重新打包和修改 macOS 安裝程序的網站確實存在 DMCA takedowns 等問題的潛在風險。\n\n * 注意：這不是法律建議，所以請自己進行適當的評估，如果你有任何疑問，請與你的律師討論。\n\n\n# macOS 支援 NVIDIA GPU 嗎?\n\n由於在 macOS 的新版本中圍繞 NVIDIA 支援的問題，許多用戶得出結論，macOS 從未支持 NVIDIA GPU。事實上，在直到 Monterey Beta 7 發布之前，蘋果都支持使用 NVIDIA GPU 的 Mac 電腦（例如 2013 年使用 Kepler dGPU 的 MacBook Pro)。雖然有社區製作的修補可以恢復支援，但它們需要停用 SIP（系統完整性保護），使 macOS 中的重要安全功能失效。\n\n另一個問題與任何新型號的 NVIDIA GPU 有關，因為蘋果停止了與它們一起發貨的機器，因此它們從來沒有得到蘋果的官方操作系統支援。相反，用戶不得不依賴 NVIDIA 的第三方驅動。由於蘋果新推出的安全啟動的問題，他們不能再支援 Web Driver，因此 NVIDIA 不能在更新的平台上發布它們，限制它們在 mac OS 10.13, High Sierra。\n\n有關操作系統支援的更多資訊，請參閱：顯示卡購買指南",normalizedContent:"# 為什麼 opencore 超越 clover 和其他程式\n\n本節簡單介紹了為什麼社群已經過渡到 opencore，並旨在消除社群中常見的一些誤解。那些只是想要一台 macos 電腦的人可以跳過這一頁。\n\n\n\n * opencore 特性\n   * 軟體支援\n * opencore 的缺點\n * 常見的誤解\n   * opencore 還是測試版，所以不穩定嗎？\n   * opencore 是否總是在其他操作系統中注入 smbios 和 acpi 數據?\n   * opencore 需要全新安裝嗎？\n   * opencore 只支援有限的 macos 版本嗎？\n   * opencore 支援舊的硬體嗎?\n   * opencore 支持 windows/linux 開機嗎?\n   * hackintosh 的合法性\n   * macos 支援 nvidia gpu 嗎?\n\n\n\n\n# opencore 特性\n\n * 更多的操作系統支援！\n   * opencore 現在支持更多版本的 os x 和 macos，而無需像 clover 和 chameleon 那樣必須進行痛苦的破解過程\n   * 這包括早在 10.4、tiger 的操作系統，甚至是最新版本的 macos 13 ventura！\n * 平均而言，opencore 系統的啟動速度比使用 clover 的系統要快，因為減少了不必要的修補\n * 更好的整體穩定性，修補可以更精確：\n   * macos 10.15.4 更新\n   * amd osx 修補不需要在每個小的安全更新中更新\n * 以多種形式提高整體安全性:\n   * 不需要停用系統完整性保護（sip）\n   * 內置 filevault 2 支援\n   * vaulting 允許建立 efi 快照防止不必要的修改\n   * 真正的 secure boot 支援\n     * 包括 uefi 和蘋果的變種\n * bootcamp 切換和啟動設備選擇通過讀取啟動盤設置的 nvram 變量來支援，就像真正的 mac 一樣。\n * 通過 boot.efi 支援開機熱鍵 - 啟動時按 option 或 esc 來選擇啟動設備, cmd+r 進入恢復模式或 cmd+opt+p+r 重設 nvram。\n\n\n# 軟體支援\n\n一些人想要從其他開機程式轉換的最大原因實際上是軟體支援：\n\n * kexts 不再使用 clover 測試:\n   * kext 出問題了？許多開發人員，包括 acidanthera (您最喜歡的大多數 kext 的製造者) 不再提供除了 opencore 以外的支援\n * 許多韌體驅動程式被整合到 opencore：\n   * apfs 支援\n   * filevault 支援\n   * 韌體補丁\n\n\n# opencore 的缺點\n\nclover 的大部分功能實際上在 opencore 中以一些奇怪的形式得到了支援，但是在過渡時，你應該密切關注 opencore 缺失的功能，因為這可能會影響到你自己:\n\n * 不支援引導基於 mbr 的操作系統\n   * 解決方法是在 opencore 中鍊式加載 refind 一次\n * 不支援基於 uefi 的 vbios 修補\n   * 但是在 macos 中可以這樣做\n * 不支援傳統 gpu 的自動設備屬性注入\n   * 例如：injectintel、injectnvidia、injectati\n   * 然而，你可以手動 修補 gpu\n * 不支援 irq 衝突修補\n   * 可以使用 ssdttime\n * 不支援舊的 cpu 生成 p 和 c 狀態\n * 不支援硬體 uuid 注入\n * 不支援 clover 的許多 xcpm 修補\n   * 例如：ivy bridge xcpm 修補\n * 不支援隱藏特定的硬碟區\n * 不支援在 opencore 的選單內改變設置\n * 不修補 pciroot uid 值\n * 不支援 macos 特有的 acpi 修補\n\n\n# 常見的誤解\n\n\n# opencore 還是測試版，所以不穩定嗎？\n\n簡短的回答：不\n\n長答案：不是\n\nopencore 的版本號並不代表項目的質量。相反，它更多的是一種看到項目的墊腳石的方式。 acidanthera 仍然有很多他們想要做的項目，包括全面的改進和更多的功能支持。\n\n例如，opencore 通過適當的安全審計以確保符合 uefi secure boot，並且是唯一經過這些嚴格審查並具有此類支援的 hackintosh 開機程式。\n\n版本 0.6.1 最初被設計為 opencore 的官方發布版本，因為它將擁有適當的 uefi/apple secure boot，並將是 opencore 作為公共工具發布的一周年。然而，由於 macos big sur 周圍的情況以及 opencore 的預連接器的重寫以支持它，它決定將 1.0.0 推遲一年。\n\n目前的路線圖：\n\n * 2019年：測試年\n * 2020年：安全啟動之年\n * 2021年：改進之年\n\n所以請不要把版本號看作是一個障礙，而應該看作是值得期待的東西。\n\n\n# opencore 是否總是在其他操作系統中注入 smbios 和 acpi 數據?\n\n預設情況下，opencore 將假設所有操作系統都應該平等對待 acpi 和 smbios 訊息。這種想法的原因包括三個部分:\n\n * 這允許正確的多系統開機支援，如 bootcamp\n * 避免製作不良的 dsdt，並鼓勵適當的 acpi 實踐\n * 避免訊息被多次注入的邊緣情況，通常在 clover 中看到\n   * 例如：一旦啟動 boot.efi，你將如何處理 smbios 和 acpi 數據注入，但後來被趕出去嗎？因此試圖撤銷它們可能相當危險。這就是為什麼 clover 的方法是不被允許的。\n\n然而，在 opencore 中有一些奇怪的地方允許 smbios 注入受到 macos 的限制，這是通過為 macos 讀取 smbios 信息的地方打補丁實現的。將 customsmbiosmode 設置為 custom 的 customsmiosguid 選項可能會在未來中斷，因此我們只建議在其他操作系統中某些軟件中斷的情況下使用此選項。為了最好的穩定性，請禁用這些選項。\n\n\n# opencore 需要全新安裝嗎？\n\n如果你有一個純淨的安裝，那就完全不需要了——這指的是操作系統是否以任何方式被篡改了，比如將第三方 kext 安裝到系統卷或其他蘋果不支持的修改。當你的系統被嚴重篡改，無論是你還是第三方工具，如 hackintool，我們建議重新安裝，以避免任何潛在的問題。\n\n特別提醒 clover 用戶：安裝 opencore 時，請重置 nvram。clover 的許多變量可能與 opencore 和 macos 衝突。\n\n * 注：眾所周知，thinkpad 筆記本電腦在 opencore 中 nvram 重置後是會變磚的，我們建議通過更新這些機器的 bios 來重置 nvram。\n\n\n# opencore 只支援有限的 macos 版本嗎？\n\n從 opencore 0.6.2 開始，你現在可以啟動每個 intel 版本的 macos（os x 10.4 及以上）！正確的支援取決於您的硬體，所以請自行驗證：硬體限制\n\nmacos 安裝圖庫\n\nacidanthera 測試了很多版本的 os x，而 dortania 也在他們的舊 hp dc 7900 (core2 quad q8300) 上運行過很多版本的 os x。以下是他們測試過的一小部分:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# opencore 支援舊的硬體嗎?\n\n到目前為止，只要操作系統本身支持，大多數 intel 硬體都是支援的！但是，請參閱硬體限制頁面 以了解 os x/macos 的哪些版本支援哪些硬體。\n\n目前，intel 的 yonah 和更新系列的 cpu 已經通過 opencore 進行了適當的測試。\n\n\n# opencore 支持 windows/linux 開機嗎?\n\nopencore 將自動檢測 windows 而無需任何額外配置。在 opencore 0.7.3 中，openlinuxboot 作為 efi 驅動程式加入到 opencore 中，它將自動檢測 linux 分區。這需要 ext4_x64.efi 或 btrfs_x64.efi，具體取決於在發行版中使用的格式。對於開機程式具有不規則路徑或名稱的任何操作系統，你可以簡單地將其新增到 blessoverride 部分。\n\n\n# hackintosh 的合法性\n\nhackintosh 位於法律的灰色地帶，主要是因為雖然這並不違法，但我們實際上違反了蘋果的 eula。這不是違法的原因：\n\n * 我們從蘋果的伺服器直接下載 macos\n * 我們是作為一個教學和個人使用的非營利組織來做這件事的\n   * 計劃將 hackintosh 用於工作或想轉售它們的人應該參考 psystar 案例 和他們的地區法律\n\n雖然 eula 規定 macos 只能安裝在真正的 mac 電腦或在真正的 mac 電腦上運行的虛擬機器上 (第 2b-i 和 2b-iii 節)，但沒有強制執行的法律完全禁止這一點。然而，重新打包和修改 macos 安裝程序的網站確實存在 dmca takedowns 等問題的潛在風險。\n\n * 注意：這不是法律建議，所以請自己進行適當的評估，如果你有任何疑問，請與你的律師討論。\n\n\n# macos 支援 nvidia gpu 嗎?\n\n由於在 macos 的新版本中圍繞 nvidia 支援的問題，許多用戶得出結論，macos 從未支持 nvidia gpu。事實上，在直到 monterey beta 7 發布之前，蘋果都支持使用 nvidia gpu 的 mac 電腦（例如 2013 年使用 kepler dgpu 的 macbook pro)。雖然有社區製作的修補可以恢復支援，但它們需要停用 sip（系統完整性保護），使 macos 中的重要安全功能失效。\n\n另一個問題與任何新型號的 nvidia gpu 有關，因為蘋果停止了與它們一起發貨的機器，因此它們從來沒有得到蘋果的官方操作系統支援。相反，用戶不得不依賴 nvidia 的第三方驅動。由於蘋果新推出的安全啟動的問題，他們不能再支援 web driver，因此 nvidia 不能在更新的平台上發布它們，限制它們在 mac os 10.13, high sierra。\n\n有關操作系統支援的更多資訊，請參閱：顯示卡購買指南",charsets:{cjk:!0}}],themeConfig:{lastUpdated:!0,smoothScroll:!0,repo:"https://github.com/eason329/OpenCore-Install-Guide",editLinks:!0,editLinkText:"在 GitHub 上編輯此頁",logo:"/homepage.png",locales:{"/":{label:"正體中文",lastUpdated:"上次更新",nav:[{text:"指南選單",items:[{text:"OpenCore 安裝指南",link:"https://eason329.github.io/OpenCore-Install-Guide/"},{text:"OpenCore 安裝後完善指南",link:"https://eason329.github.io/OpenCore-Post-Install/"},{text:"OpenCore 多系統開機",link:"https://eason329.github.io/OpenCore-Multiboot/"},{text:"ACPI 入門教學",link:"https://eason329.github.io/Getting-Started-With-ACPI/"},{text:"無線網卡購買指南",link:"https://eason329.github.io/Wireless-Buyers-Guide/"},{text:"顯示卡購買指南",link:"https://eason329.github.io/GPU-Buyers-Guide/"},{text:"避免購買指南",link:"https://eason329.github.io/Anti-Hackintosh-Buyers-Guide/"}]},{text:"English",link:"https://dortania.github.io/OpenCore-Install-Guide/"}],sidebar:[{title:"簡介",collapsable:!1,sidebarDepth:1,children:["prerequisites","macos-limits","find-hardware","terminology","why-oc"]},{title:"製作開機隨身碟",collapsable:!1,sidebarDepth:2,children:[{title:"製作開機隨身碟",collapsable:!0,path:"/installer-guide/",sidebarDepth:1,children:["/installer-guide/mac-install","/installer-guide/windows-install","/installer-guide/linux-install"]},"/installer-guide/opencore-efi","ktext",["https://sumingyd.github.io/Getting-Started-With-ACPI/","ACPI 入門教學"]]},{title:"建構 config.plist",collapsable:!1,sidebarDepth:2,children:[{title:"開始建構 config.plist",collapsable:!0,path:"/config.plist/",sidebarDepth:1,children:["/config.plist/acpi","/config.plist/booter","/config.plist/device-properties","/config.plist/kernel","/config.plist/misc","/config.plist/nvram","/config.plist/platform-info","/config.plist/uefi"]},"/config.plist/security","/config.plist/bios-settings"]},{title:"安裝",collapsable:!1,children:["/installation/installation-process"]},{title:"故障診斷",collapsable:!1,children:["/troubleshooting/troubleshooting",{title:"",collapsable:!1,children:["/troubleshooting/extended/opencore-issues","/troubleshooting/extended/kernel-issues","/troubleshooting/extended/userspace-issues","/troubleshooting/extended/post-issues","/troubleshooting/extended/misc-issues"]},"/troubleshooting/debug","/troubleshooting/boot","/troubleshooting/kernel-debugging"]},{title:"安裝 OpenCore 以後",collapsable:!1,children:[["https://sumingyd.github.io/OpenCore-Post-Install/","安裝後完善指南"],{title:"通用",collapsable:!0,sidebarDepth:1,children:[["https://sumingyd.github.io/OpenCore-Post-Install/universal/security","安全與 FileVault"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/audio","修復音訊"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/oc2hdd","無 USB 開機"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/update","更新 OpenCore、kext 和 macOS"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/drm","修復 DRM"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/iservices","修復 iServices"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/pm","修復電源管理"],["https://sumingyd.github.io/OpenCore-Post-Install/universal/sleep","修復睡眠"],["https://sumingyd.github.io/OpenCore-Post-Install/usb/","修復 USB"]]},{title:"筆記型電腦",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Post-Install/laptop-specific/battery","修復電池讀數"]]},{title:"美化",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Post-Install/cosmetic/verbose","修復分辨率和囉嗦模式"],["https://sumingyd.github.io/OpenCore-Post-Install/cosmetic/gui","增加 GUI 和開機鈴聲"]]},{title:"多系統開機",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Multiboot/","OpenCore 多系統開機"],["https://sumingyd.github.io/OpenCore-Post-Install/multiboot/bootstrap","設定啟動選項"],["https://sumingyd.github.io/OpenCore-Post-Install/multiboot/bootcamp","安裝 Boot Camp"]]},{title:"其他",collapsable:!0,children:[["https://sumingyd.github.io/OpenCore-Post-Install/misc/rtc","修復 RTC"],["https://sumingyd.github.io/OpenCore-Post-Install/misc/msr-lock","修復 CFG Lock"],["https://sumingyd.github.io/OpenCore-Post-Install/misc/nvram","模擬 NVRAM"]]}]},{title:"額外資訊",collapsable:!1,sidebarDepth:2,children:["/extras/kaslr-fix","/extras/spoof","/extras/ventura",["https://github.com/eason329/OpenCore-Install-Guide/tree/master/clover-conversion","從 Clover 轉換（建設中）"],"/extras/smbios-support.md"]},{title:"其他",collapsable:!1,children:["CONTRIBUTING","/misc/credit"]}]}}},locales:{"/":{lang:"zh-TW",title:"OpenCore 安裝指南",description:"正體中文版 - 目前支援版本 0.8.8",path:"/"}}};t(236);Xt.component("Badge",()=>Promise.all([t.e(0),t.e(24)]).then(t.bind(null,528))),Xt.component("ThemeManager",()=>t.e(35).then(t.bind(null,468))),Xt.component("Badge",()=>Promise.all([t.e(0),t.e(21)]).then(t.bind(null,529))),Xt.component("CodeBlock",()=>Promise.all([t.e(0),t.e(22)]).then(t.bind(null,469))),Xt.component("CodeGroup",()=>Promise.all([t.e(0),t.e(23)]).then(t.bind(null,470)));var Ks={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",Ls()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},Xs=(t(237),Object(zs.a)(Ks,(function(){var e=this._self._c;return e("transition",{attrs:{name:"fade"}},[this.show?e("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[e("g",{attrs:{transform:"translate(-229 -126.358)"}},[e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports);t(238),t(239);function qs(e){const n=document.documentElement.getBoundingClientRect(),t=e.getBoundingClientRect();return{x:t.left-n.left,y:t.top-n.top}}var Ws=[{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},({Vue:e})=>{e.component("BackToTop",Xs)},{},({Vue:e,router:n})=>{n.options.scrollBehavior=(n,t,o)=>{if(o)return window.scrollTo({top:o.y,behavior:"smooth"});if(n.hash){if(e.$vuepress.$get("disableScrollBehavior"))return!1;const t=document.querySelector(n.hash);return!!t&&window.scrollTo({top:qs(t).y,behavior:"smooth"})}return window.scrollTo({top:0,behavior:"smooth"})}}],Ys=t(87);class $s extends class{constructor(){this.store=new Xt({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,n){Xt.set(this.store.state,e,n)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign($s.prototype,{getPageAsyncComponent:rs,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:cs});var Qs={install(e){const n=new $s;e.$vuepress=n,e.prototype.$vuepress=n}};function Js(e,n){const t=n.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===t)}var Zs={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const n=this.pageKey||this.$parent.$page.key;return us("pageKey",n),Xt.component(n)||Xt.component(n,rs(n)),Xt.component(n)?e(n):e("")}},el={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:n,slots:t})=>e("div",{class:["content__"+n.slotKey]},t()[n.slotKey])},nl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},tl=(t(240),t(241),Object(zs.a)(nl,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),ol={functional:!0,render(e,{parent:n,children:t}){if(n._isMounted)return t;n.$once("hook:mounted",()=>{n.$forceUpdate()})}};Xt.config.productionTip=!1,Xt.use(jr),Xt.use(Qs),Xt.mixin(function(e,n,t=Xt){!function(e){e.locales&&Object.keys(e.locales).forEach(n=>{e.locales[n].path=n});Object.freeze(e)}(n),t.$vuepress.$set("siteData",n);const o=new(e(t.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((e,n)=>(n.startsWith("$")&&(e[n]=i[n].get),e),a),{computed:a}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let n,t;for(const o in e)"/"===o?t=e[o]:0===this.$page.path.indexOf(o)&&(n=e[o]);return n||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:n}=this.$page.frontmatter;if("string"==typeof n)return n;const t=this.$siteTitle,o=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const e=function(e){if(e){const n=e.filter(e=>"description"===e.name)[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,n){for(let t=0;t<e.length;t++){const o=e[t];if(o.path.toLowerCase()===n.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},js)),Xt.component("Content",Zs),Xt.component("ContentSlotsDistributor",el),Xt.component("OutboundLink",tl),Xt.component("ClientOnly",ol),Xt.component("Layout",ss("Layout")),Xt.component("NotFound",ss("NotFound")),Xt.prototype.$withBase=function(e){const n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.8",hash:"542cffc"},async function(e){const n="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:js.routerBase||js.base,t=new jr({base:n,mode:"history",fallback:!1,routes:Vs,scrollBehavior:(e,n,t)=>t||(e.hash?!Xt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((n,t,o)=>{if(Js(e,n.path))o();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){const t=n.path.replace(/\/$/,"")+".html";Js(e,t)?o(t):o()}else o();else{const t=n.path+"/",i=n.path+".html";Js(e,i)?o(i):Js(e,t)?o(t):o()}})}(t);const o={};try{await Promise.all(Ws.filter(e=>"function"==typeof e).map(n=>n({Vue:Xt,options:o,router:t,siteData:js,isServer:e})))}catch(e){console.error(e)}return{app:new Xt(Object.assign(o,{router:t,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Ys.a.map(n=>e(n)))])})),router:t}}(!1).then(({app:e,router:n})=>{n.onReady(()=>{e.$mount("#app")})})}]);